
AS608KEYLCDBUZZER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000067c0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000044c  08006960  08006960  00016960  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006dac  08006dac  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08006dac  08006dac  00016dac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006db4  08006db4  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006db4  08006db4  00016db4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006db8  08006db8  00016db8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006dbc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000200  20000074  08006e30  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000274  08006e30  00020274  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f2a0  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f27  00000000  00000000  0002f344  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d80  00000000  00000000  00031270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cc8  00000000  00000000  00031ff0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000174ff  00000000  00000000  00032cb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f177  00000000  00000000  0004a1b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008fd75  00000000  00000000  0005932e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e90a3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000043f0  00000000  00000000  000e90f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006948 	.word	0x08006948

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	08006948 	.word	0x08006948

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <delay>:
#define MAX_NUM_TEMPLATES 254
#define timer htim3
#define MAX_RETRIES 3 // Maximum number of retries
extern TIM_HandleTypeDef timer;
void delay (uint16_t us)
{
 8000584:	b480      	push	{r7}
 8000586:	b083      	sub	sp, #12
 8000588:	af00      	add	r7, sp, #0
 800058a:	4603      	mov	r3, r0
 800058c:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&timer, 0);
 800058e:	4b09      	ldr	r3, [pc, #36]	; (80005b4 <delay+0x30>)
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	2200      	movs	r2, #0
 8000594:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&timer) < us);
 8000596:	bf00      	nop
 8000598:	4b06      	ldr	r3, [pc, #24]	; (80005b4 <delay+0x30>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800059e:	88fb      	ldrh	r3, [r7, #6]
 80005a0:	429a      	cmp	r2, r3
 80005a2:	d3f9      	bcc.n	8000598 <delay+0x14>
}
 80005a4:	bf00      	nop
 80005a6:	bf00      	nop
 80005a8:	370c      	adds	r7, #12
 80005aa:	46bd      	mov	sp, r7
 80005ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop
 80005b4:	200000e0 	.word	0x200000e0

080005b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005bc:	f001 fdaa 	bl	8002114 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c0:	f000 f8ae 	bl	8000720 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c4:	f000 fa30 	bl	8000a28 <MX_GPIO_Init>
  MX_TIM2_Init();
 80005c8:	f000 f914 	bl	80007f4 <MX_TIM2_Init>
  MX_TIM3_Init();
 80005cc:	f000 f988 	bl	80008e0 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 80005d0:	f000 f9d6 	bl	8000980 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80005d4:	f000 f9fe 	bl	80009d4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start(&htim3);
 80005d8:	4846      	ldr	r0, [pc, #280]	; (80006f4 <main+0x13c>)
 80005da:	f002 fe4b 	bl	8003274 <HAL_TIM_Base_Start>
	lcd_init ();
 80005de:	f001 fa5e 	bl	8001a9e <lcd_init>
	lcd_clear();
 80005e2:	f001 fa33 	bl	8001a4c <lcd_clear>
	RetargetInit(&huart2);
 80005e6:	4844      	ldr	r0, [pc, #272]	; (80006f8 <main+0x140>)
 80005e8:	f001 faea 	bl	8001bc0 <RetargetInit>
	HAL_UART_Receive_IT(&huart1, (uint8_t *)&Rxbuff, sizeof(Rxbuff));
 80005ec:	2201      	movs	r2, #1
 80005ee:	4943      	ldr	r1, [pc, #268]	; (80006fc <main+0x144>)
 80005f0:	4843      	ldr	r0, [pc, #268]	; (8000700 <main+0x148>)
 80005f2:	f003 fe4c 	bl	800428e <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart2, (uint8_t *)&Rxbuff, sizeof(Rxbuff));
 80005f6:	2201      	movs	r2, #1
 80005f8:	4940      	ldr	r1, [pc, #256]	; (80006fc <main+0x144>)
 80005fa:	483f      	ldr	r0, [pc, #252]	; (80006f8 <main+0x140>)
 80005fc:	f003 fe47 	bl	800428e <HAL_UART_Receive_IT>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 8000600:	2201      	movs	r2, #1
 8000602:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000606:	483f      	ldr	r0, [pc, #252]	; (8000704 <main+0x14c>)
 8000608:	f002 f95a 	bl	80028c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 1);
 800060c:	2201      	movs	r2, #1
 800060e:	2108      	movs	r1, #8
 8000610:	483d      	ldr	r0, [pc, #244]	; (8000708 <main+0x150>)
 8000612:	f002 f955 	bl	80028c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1);
 8000616:	2201      	movs	r2, #1
 8000618:	2110      	movs	r1, #16
 800061a:	483b      	ldr	r0, [pc, #236]	; (8000708 <main+0x150>)
 800061c:	f002 f950 	bl	80028c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1);
 8000620:	2201      	movs	r2, #1
 8000622:	2120      	movs	r1, #32
 8000624:	4838      	ldr	r0, [pc, #224]	; (8000708 <main+0x150>)
 8000626:	f002 f94b 	bl	80028c0 <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	printf("\nchoose\nA.Enroll\nB.Find\nC.Delete\nD.DeleteAll\n");
 800062a:	4838      	ldr	r0, [pc, #224]	; (800070c <main+0x154>)
 800062c:	f004 fe9e 	bl	800536c <puts>
 while (1)
  {
    /* USER CODE END WHILE */
	 if (keyPressed!=0x00)
 8000630:	4b37      	ldr	r3, [pc, #220]	; (8000710 <main+0x158>)
 8000632:	781b      	ldrb	r3, [r3, #0]
 8000634:	2b00      	cmp	r3, #0
 8000636:	d008      	beq.n	800064a <main+0x92>
	 		{
	 			HAL_UART_Transmit(&huart2,(uint8_t*)&keyPressed,1,100);
 8000638:	2364      	movs	r3, #100	; 0x64
 800063a:	2201      	movs	r2, #1
 800063c:	4934      	ldr	r1, [pc, #208]	; (8000710 <main+0x158>)
 800063e:	482e      	ldr	r0, [pc, #184]	; (80006f8 <main+0x140>)
 8000640:	f003 fcf1 	bl	8004026 <HAL_UART_Transmit>
	 			keyPressed=0;
 8000644:	4b32      	ldr	r3, [pc, #200]	; (8000710 <main+0x158>)
 8000646:	2200      	movs	r2, #0
 8000648:	701a      	strb	r2, [r3, #0]
	 		}
	 		HAL_Delay(1000);
 800064a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800064e:	f001 fdd3 	bl	80021f8 <HAL_Delay>
	 		lcd_clear();
 8000652:	f001 f9fb 	bl	8001a4c <lcd_clear>
	 		lcd_put_cur(0, 0);
 8000656:	2100      	movs	r1, #0
 8000658:	2000      	movs	r0, #0
 800065a:	f001 fa01 	bl	8001a60 <lcd_put_cur>
	 		HAL_Delay(1500);
 800065e:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000662:	f001 fdc9 	bl	80021f8 <HAL_Delay>
	 		lcd_clear();
 8000666:	f001 f9f1 	bl	8001a4c <lcd_clear>
	 		lcd_init ();
 800066a:	f001 fa18 	bl	8001a9e <lcd_init>
	 		if (keyPressed == 0)
 800066e:	4b28      	ldr	r3, [pc, #160]	; (8000710 <main+0x158>)
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	2b00      	cmp	r3, #0
 8000674:	d106      	bne.n	8000684 <main+0xcc>
	 		{
	 			lcd_send_string("1enr2fnd3del4delA");
 8000676:	4827      	ldr	r0, [pc, #156]	; (8000714 <main+0x15c>)
 8000678:	f001 fa4e 	bl	8001b18 <lcd_send_string>
	 			HAL_Delay(100);
 800067c:	2064      	movs	r0, #100	; 0x64
 800067e:	f001 fdbb 	bl	80021f8 <HAL_Delay>
 8000682:	e7d5      	b.n	8000630 <main+0x78>
	 		}
	 		else if(keyPressed ==65 )
 8000684:	4b22      	ldr	r3, [pc, #136]	; (8000710 <main+0x158>)
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	2b41      	cmp	r3, #65	; 0x41
 800068a:	d105      	bne.n	8000698 <main+0xe0>
	 		{
	 			keyPressed = 0;
 800068c:	4b20      	ldr	r3, [pc, #128]	; (8000710 <main+0x158>)
 800068e:	2200      	movs	r2, #0
 8000690:	701a      	strb	r2, [r3, #0]
	 			InputFinger();
 8000692:	f000 fba9 	bl	8000de8 <InputFinger>
 8000696:	e7cb      	b.n	8000630 <main+0x78>
	 		}
	 		else if(keyPressed == 66)
 8000698:	4b1d      	ldr	r3, [pc, #116]	; (8000710 <main+0x158>)
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	2b42      	cmp	r3, #66	; 0x42
 800069e:	d105      	bne.n	80006ac <main+0xf4>
	 		{
	 			keyPressed = 0;
 80006a0:	4b1b      	ldr	r3, [pc, #108]	; (8000710 <main+0x158>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	701a      	strb	r2, [r3, #0]
	 			FindFingerprint();
 80006a6:	f000 fa83 	bl	8000bb0 <FindFingerprint>
 80006aa:	e7c1      	b.n	8000630 <main+0x78>
	 		}
	 		else if(keyPressed ==67 )
 80006ac:	4b18      	ldr	r3, [pc, #96]	; (8000710 <main+0x158>)
 80006ae:	781b      	ldrb	r3, [r3, #0]
 80006b0:	2b43      	cmp	r3, #67	; 0x43
 80006b2:	d105      	bne.n	80006c0 <main+0x108>
	 		{
	 			keyPressed = 0;
 80006b4:	4b16      	ldr	r3, [pc, #88]	; (8000710 <main+0x158>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	701a      	strb	r2, [r3, #0]
	 			DeleteFinger();
 80006ba:	f000 fb27 	bl	8000d0c <DeleteFinger>
 80006be:	e7b7      	b.n	8000630 <main+0x78>
	 		}
	 		else if (keyPressed == 68){
 80006c0:	4b13      	ldr	r3, [pc, #76]	; (8000710 <main+0x158>)
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	2b44      	cmp	r3, #68	; 0x44
 80006c6:	d1b3      	bne.n	8000630 <main+0x78>
	 			keyPressed = 0;
 80006c8:	4b11      	ldr	r3, [pc, #68]	; (8000710 <main+0x158>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	701a      	strb	r2, [r3, #0]
	 			AS608_EmptyDatabase();
 80006ce:	f000 fe69 	bl	80013a4 <AS608_EmptyDatabase>
	 			lcd_send_string("Allfingerdeleted");
 80006d2:	4811      	ldr	r0, [pc, #68]	; (8000718 <main+0x160>)
 80006d4:	f001 fa20 	bl	8001b18 <lcd_send_string>
	 			printf("ALL DELETED");
 80006d8:	4810      	ldr	r0, [pc, #64]	; (800071c <main+0x164>)
 80006da:	f004 fdab 	bl	8005234 <iprintf>
	 			playTone(800,1000,20);
 80006de:	2214      	movs	r2, #20
 80006e0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80006e4:	f44f 7048 	mov.w	r0, #800	; 0x320
 80006e8:	f001 fa2c 	bl	8001b44 <playTone>
	 			stopTone();
 80006ec:	f001 fa58 	bl	8001ba0 <stopTone>
	 if (keyPressed!=0x00)
 80006f0:	e79e      	b.n	8000630 <main+0x78>
 80006f2:	bf00      	nop
 80006f4:	200000e0 	.word	0x200000e0
 80006f8:	2000016c 	.word	0x2000016c
 80006fc:	2000024e 	.word	0x2000024e
 8000700:	20000128 	.word	0x20000128
 8000704:	40020000 	.word	0x40020000
 8000708:	40020400 	.word	0x40020400
 800070c:	08006960 	.word	0x08006960
 8000710:	200001cc 	.word	0x200001cc
 8000714:	08006990 	.word	0x08006990
 8000718:	080069a4 	.word	0x080069a4
 800071c:	080069b8 	.word	0x080069b8

08000720 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b094      	sub	sp, #80	; 0x50
 8000724:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000726:	f107 0320 	add.w	r3, r7, #32
 800072a:	2230      	movs	r2, #48	; 0x30
 800072c:	2100      	movs	r1, #0
 800072e:	4618      	mov	r0, r3
 8000730:	f004 fd78 	bl	8005224 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000734:	f107 030c 	add.w	r3, r7, #12
 8000738:	2200      	movs	r2, #0
 800073a:	601a      	str	r2, [r3, #0]
 800073c:	605a      	str	r2, [r3, #4]
 800073e:	609a      	str	r2, [r3, #8]
 8000740:	60da      	str	r2, [r3, #12]
 8000742:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000744:	2300      	movs	r3, #0
 8000746:	60bb      	str	r3, [r7, #8]
 8000748:	4b28      	ldr	r3, [pc, #160]	; (80007ec <SystemClock_Config+0xcc>)
 800074a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800074c:	4a27      	ldr	r2, [pc, #156]	; (80007ec <SystemClock_Config+0xcc>)
 800074e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000752:	6413      	str	r3, [r2, #64]	; 0x40
 8000754:	4b25      	ldr	r3, [pc, #148]	; (80007ec <SystemClock_Config+0xcc>)
 8000756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000758:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800075c:	60bb      	str	r3, [r7, #8]
 800075e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000760:	2300      	movs	r3, #0
 8000762:	607b      	str	r3, [r7, #4]
 8000764:	4b22      	ldr	r3, [pc, #136]	; (80007f0 <SystemClock_Config+0xd0>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800076c:	4a20      	ldr	r2, [pc, #128]	; (80007f0 <SystemClock_Config+0xd0>)
 800076e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000772:	6013      	str	r3, [r2, #0]
 8000774:	4b1e      	ldr	r3, [pc, #120]	; (80007f0 <SystemClock_Config+0xd0>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800077c:	607b      	str	r3, [r7, #4]
 800077e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000780:	2302      	movs	r3, #2
 8000782:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000784:	2301      	movs	r3, #1
 8000786:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000788:	2310      	movs	r3, #16
 800078a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800078c:	2302      	movs	r3, #2
 800078e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000790:	2300      	movs	r3, #0
 8000792:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000794:	2308      	movs	r3, #8
 8000796:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8000798:	2354      	movs	r3, #84	; 0x54
 800079a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800079c:	2302      	movs	r3, #2
 800079e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007a0:	2304      	movs	r3, #4
 80007a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007a4:	f107 0320 	add.w	r3, r7, #32
 80007a8:	4618      	mov	r0, r3
 80007aa:	f002 f8bb 	bl	8002924 <HAL_RCC_OscConfig>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80007b4:	f001 f9fe 	bl	8001bb4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007b8:	230f      	movs	r3, #15
 80007ba:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007bc:	2302      	movs	r3, #2
 80007be:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007c0:	2300      	movs	r3, #0
 80007c2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007c8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007ca:	2300      	movs	r3, #0
 80007cc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007ce:	f107 030c 	add.w	r3, r7, #12
 80007d2:	2102      	movs	r1, #2
 80007d4:	4618      	mov	r0, r3
 80007d6:	f002 fb1d 	bl	8002e14 <HAL_RCC_ClockConfig>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d001      	beq.n	80007e4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80007e0:	f001 f9e8 	bl	8001bb4 <Error_Handler>
  }
}
 80007e4:	bf00      	nop
 80007e6:	3750      	adds	r7, #80	; 0x50
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	40023800 	.word	0x40023800
 80007f0:	40007000 	.word	0x40007000

080007f4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b08e      	sub	sp, #56	; 0x38
 80007f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007fe:	2200      	movs	r2, #0
 8000800:	601a      	str	r2, [r3, #0]
 8000802:	605a      	str	r2, [r3, #4]
 8000804:	609a      	str	r2, [r3, #8]
 8000806:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000808:	f107 0320 	add.w	r3, r7, #32
 800080c:	2200      	movs	r2, #0
 800080e:	601a      	str	r2, [r3, #0]
 8000810:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000812:	1d3b      	adds	r3, r7, #4
 8000814:	2200      	movs	r2, #0
 8000816:	601a      	str	r2, [r3, #0]
 8000818:	605a      	str	r2, [r3, #4]
 800081a:	609a      	str	r2, [r3, #8]
 800081c:	60da      	str	r2, [r3, #12]
 800081e:	611a      	str	r2, [r3, #16]
 8000820:	615a      	str	r2, [r3, #20]
 8000822:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000824:	4b2d      	ldr	r3, [pc, #180]	; (80008dc <MX_TIM2_Init+0xe8>)
 8000826:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800082a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800082c:	4b2b      	ldr	r3, [pc, #172]	; (80008dc <MX_TIM2_Init+0xe8>)
 800082e:	2200      	movs	r2, #0
 8000830:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000832:	4b2a      	ldr	r3, [pc, #168]	; (80008dc <MX_TIM2_Init+0xe8>)
 8000834:	2200      	movs	r2, #0
 8000836:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000838:	4b28      	ldr	r3, [pc, #160]	; (80008dc <MX_TIM2_Init+0xe8>)
 800083a:	f04f 32ff 	mov.w	r2, #4294967295
 800083e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000840:	4b26      	ldr	r3, [pc, #152]	; (80008dc <MX_TIM2_Init+0xe8>)
 8000842:	2200      	movs	r2, #0
 8000844:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000846:	4b25      	ldr	r3, [pc, #148]	; (80008dc <MX_TIM2_Init+0xe8>)
 8000848:	2200      	movs	r2, #0
 800084a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800084c:	4823      	ldr	r0, [pc, #140]	; (80008dc <MX_TIM2_Init+0xe8>)
 800084e:	f002 fcc1 	bl	80031d4 <HAL_TIM_Base_Init>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000858:	f001 f9ac 	bl	8001bb4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800085c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000860:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000862:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000866:	4619      	mov	r1, r3
 8000868:	481c      	ldr	r0, [pc, #112]	; (80008dc <MX_TIM2_Init+0xe8>)
 800086a:	f002 ff8d 	bl	8003788 <HAL_TIM_ConfigClockSource>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d001      	beq.n	8000878 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000874:	f001 f99e 	bl	8001bb4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000878:	4818      	ldr	r0, [pc, #96]	; (80008dc <MX_TIM2_Init+0xe8>)
 800087a:	f002 fd55 	bl	8003328 <HAL_TIM_PWM_Init>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000884:	f001 f996 	bl	8001bb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000888:	2300      	movs	r3, #0
 800088a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800088c:	2300      	movs	r3, #0
 800088e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000890:	f107 0320 	add.w	r3, r7, #32
 8000894:	4619      	mov	r1, r3
 8000896:	4811      	ldr	r0, [pc, #68]	; (80008dc <MX_TIM2_Init+0xe8>)
 8000898:	f003 fb0a 	bl	8003eb0 <HAL_TIMEx_MasterConfigSynchronization>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80008a2:	f001 f987 	bl	8001bb4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008a6:	2360      	movs	r3, #96	; 0x60
 80008a8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80008aa:	2300      	movs	r3, #0
 80008ac:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008ae:	2300      	movs	r3, #0
 80008b0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008b2:	2300      	movs	r3, #0
 80008b4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008b6:	1d3b      	adds	r3, r7, #4
 80008b8:	2200      	movs	r2, #0
 80008ba:	4619      	mov	r1, r3
 80008bc:	4807      	ldr	r0, [pc, #28]	; (80008dc <MX_TIM2_Init+0xe8>)
 80008be:	f002 fea1 	bl	8003604 <HAL_TIM_PWM_ConfigChannel>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80008c8:	f001 f974 	bl	8001bb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80008cc:	4803      	ldr	r0, [pc, #12]	; (80008dc <MX_TIM2_Init+0xe8>)
 80008ce:	f001 fa9b 	bl	8001e08 <HAL_TIM_MspPostInit>

}
 80008d2:	bf00      	nop
 80008d4:	3738      	adds	r7, #56	; 0x38
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	20000098 	.word	0x20000098

080008e0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b086      	sub	sp, #24
 80008e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008e6:	f107 0308 	add.w	r3, r7, #8
 80008ea:	2200      	movs	r2, #0
 80008ec:	601a      	str	r2, [r3, #0]
 80008ee:	605a      	str	r2, [r3, #4]
 80008f0:	609a      	str	r2, [r3, #8]
 80008f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008f4:	463b      	mov	r3, r7
 80008f6:	2200      	movs	r2, #0
 80008f8:	601a      	str	r2, [r3, #0]
 80008fa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80008fc:	4b1e      	ldr	r3, [pc, #120]	; (8000978 <MX_TIM3_Init+0x98>)
 80008fe:	4a1f      	ldr	r2, [pc, #124]	; (800097c <MX_TIM3_Init+0x9c>)
 8000900:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 72-1;
 8000902:	4b1d      	ldr	r3, [pc, #116]	; (8000978 <MX_TIM3_Init+0x98>)
 8000904:	2247      	movs	r2, #71	; 0x47
 8000906:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000908:	4b1b      	ldr	r3, [pc, #108]	; (8000978 <MX_TIM3_Init+0x98>)
 800090a:	2200      	movs	r2, #0
 800090c:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 0xffff-1;
 800090e:	4b1a      	ldr	r3, [pc, #104]	; (8000978 <MX_TIM3_Init+0x98>)
 8000910:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000914:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000916:	4b18      	ldr	r3, [pc, #96]	; (8000978 <MX_TIM3_Init+0x98>)
 8000918:	2200      	movs	r2, #0
 800091a:	611a      	str	r2, [r3, #16]
	htim3.Init.RepetitionCounter = 0;
 800091c:	4b16      	ldr	r3, [pc, #88]	; (8000978 <MX_TIM3_Init+0x98>)
 800091e:	2200      	movs	r2, #0
 8000920:	615a      	str	r2, [r3, #20]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000922:	4b15      	ldr	r3, [pc, #84]	; (8000978 <MX_TIM3_Init+0x98>)
 8000924:	2200      	movs	r2, #0
 8000926:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000928:	4813      	ldr	r0, [pc, #76]	; (8000978 <MX_TIM3_Init+0x98>)
 800092a:	f002 fc53 	bl	80031d4 <HAL_TIM_Base_Init>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000934:	f001 f93e 	bl	8001bb4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000938:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800093c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800093e:	f107 0308 	add.w	r3, r7, #8
 8000942:	4619      	mov	r1, r3
 8000944:	480c      	ldr	r0, [pc, #48]	; (8000978 <MX_TIM3_Init+0x98>)
 8000946:	f002 ff1f 	bl	8003788 <HAL_TIM_ConfigClockSource>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 8000950:	f001 f930 	bl	8001bb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000954:	2300      	movs	r3, #0
 8000956:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000958:	2300      	movs	r3, #0
 800095a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800095c:	463b      	mov	r3, r7
 800095e:	4619      	mov	r1, r3
 8000960:	4805      	ldr	r0, [pc, #20]	; (8000978 <MX_TIM3_Init+0x98>)
 8000962:	f003 faa5 	bl	8003eb0 <HAL_TIMEx_MasterConfigSynchronization>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 800096c:	f001 f922 	bl	8001bb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000970:	bf00      	nop
 8000972:	3718      	adds	r7, #24
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}
 8000978:	200000e0 	.word	0x200000e0
 800097c:	40000400 	.word	0x40000400

08000980 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000984:	4b11      	ldr	r3, [pc, #68]	; (80009cc <MX_USART1_UART_Init+0x4c>)
 8000986:	4a12      	ldr	r2, [pc, #72]	; (80009d0 <MX_USART1_UART_Init+0x50>)
 8000988:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 800098a:	4b10      	ldr	r3, [pc, #64]	; (80009cc <MX_USART1_UART_Init+0x4c>)
 800098c:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8000990:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000992:	4b0e      	ldr	r3, [pc, #56]	; (80009cc <MX_USART1_UART_Init+0x4c>)
 8000994:	2200      	movs	r2, #0
 8000996:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000998:	4b0c      	ldr	r3, [pc, #48]	; (80009cc <MX_USART1_UART_Init+0x4c>)
 800099a:	2200      	movs	r2, #0
 800099c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800099e:	4b0b      	ldr	r3, [pc, #44]	; (80009cc <MX_USART1_UART_Init+0x4c>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009a4:	4b09      	ldr	r3, [pc, #36]	; (80009cc <MX_USART1_UART_Init+0x4c>)
 80009a6:	220c      	movs	r2, #12
 80009a8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009aa:	4b08      	ldr	r3, [pc, #32]	; (80009cc <MX_USART1_UART_Init+0x4c>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009b0:	4b06      	ldr	r3, [pc, #24]	; (80009cc <MX_USART1_UART_Init+0x4c>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009b6:	4805      	ldr	r0, [pc, #20]	; (80009cc <MX_USART1_UART_Init+0x4c>)
 80009b8:	f003 fae8 	bl	8003f8c <HAL_UART_Init>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80009c2:	f001 f8f7 	bl	8001bb4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80009c6:	bf00      	nop
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	20000128 	.word	0x20000128
 80009d0:	40011000 	.word	0x40011000

080009d4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009d8:	4b11      	ldr	r3, [pc, #68]	; (8000a20 <MX_USART2_UART_Init+0x4c>)
 80009da:	4a12      	ldr	r2, [pc, #72]	; (8000a24 <MX_USART2_UART_Init+0x50>)
 80009dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 57600;
 80009de:	4b10      	ldr	r3, [pc, #64]	; (8000a20 <MX_USART2_UART_Init+0x4c>)
 80009e0:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 80009e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009e6:	4b0e      	ldr	r3, [pc, #56]	; (8000a20 <MX_USART2_UART_Init+0x4c>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009ec:	4b0c      	ldr	r3, [pc, #48]	; (8000a20 <MX_USART2_UART_Init+0x4c>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009f2:	4b0b      	ldr	r3, [pc, #44]	; (8000a20 <MX_USART2_UART_Init+0x4c>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009f8:	4b09      	ldr	r3, [pc, #36]	; (8000a20 <MX_USART2_UART_Init+0x4c>)
 80009fa:	220c      	movs	r2, #12
 80009fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009fe:	4b08      	ldr	r3, [pc, #32]	; (8000a20 <MX_USART2_UART_Init+0x4c>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a04:	4b06      	ldr	r3, [pc, #24]	; (8000a20 <MX_USART2_UART_Init+0x4c>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a0a:	4805      	ldr	r0, [pc, #20]	; (8000a20 <MX_USART2_UART_Init+0x4c>)
 8000a0c:	f003 fabe 	bl	8003f8c <HAL_UART_Init>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d001      	beq.n	8000a1a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a16:	f001 f8cd 	bl	8001bb4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a1a:	bf00      	nop
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	2000016c 	.word	0x2000016c
 8000a24:	40004400 	.word	0x40004400

08000a28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b088      	sub	sp, #32
 8000a2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a2e:	f107 030c 	add.w	r3, r7, #12
 8000a32:	2200      	movs	r2, #0
 8000a34:	601a      	str	r2, [r3, #0]
 8000a36:	605a      	str	r2, [r3, #4]
 8000a38:	609a      	str	r2, [r3, #8]
 8000a3a:	60da      	str	r2, [r3, #12]
 8000a3c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a3e:	2300      	movs	r3, #0
 8000a40:	60bb      	str	r3, [r7, #8]
 8000a42:	4b57      	ldr	r3, [pc, #348]	; (8000ba0 <MX_GPIO_Init+0x178>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a46:	4a56      	ldr	r2, [pc, #344]	; (8000ba0 <MX_GPIO_Init+0x178>)
 8000a48:	f043 0304 	orr.w	r3, r3, #4
 8000a4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a4e:	4b54      	ldr	r3, [pc, #336]	; (8000ba0 <MX_GPIO_Init+0x178>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a52:	f003 0304 	and.w	r3, r3, #4
 8000a56:	60bb      	str	r3, [r7, #8]
 8000a58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	607b      	str	r3, [r7, #4]
 8000a5e:	4b50      	ldr	r3, [pc, #320]	; (8000ba0 <MX_GPIO_Init+0x178>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a62:	4a4f      	ldr	r2, [pc, #316]	; (8000ba0 <MX_GPIO_Init+0x178>)
 8000a64:	f043 0301 	orr.w	r3, r3, #1
 8000a68:	6313      	str	r3, [r2, #48]	; 0x30
 8000a6a:	4b4d      	ldr	r3, [pc, #308]	; (8000ba0 <MX_GPIO_Init+0x178>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	f003 0301 	and.w	r3, r3, #1
 8000a72:	607b      	str	r3, [r7, #4]
 8000a74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a76:	2300      	movs	r3, #0
 8000a78:	603b      	str	r3, [r7, #0]
 8000a7a:	4b49      	ldr	r3, [pc, #292]	; (8000ba0 <MX_GPIO_Init+0x178>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7e:	4a48      	ldr	r2, [pc, #288]	; (8000ba0 <MX_GPIO_Init+0x178>)
 8000a80:	f043 0302 	orr.w	r3, r3, #2
 8000a84:	6313      	str	r3, [r2, #48]	; 0x30
 8000a86:	4b46      	ldr	r3, [pc, #280]	; (8000ba0 <MX_GPIO_Init+0x178>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	f003 0302 	and.w	r3, r3, #2
 8000a8e:	603b      	str	r3, [r7, #0]
 8000a90:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RS_Pin|D5_Pin|D6_Pin|D7_Pin
 8000a92:	2200      	movs	r2, #0
 8000a94:	f240 413f 	movw	r1, #1087	; 0x43f
 8000a98:	4842      	ldr	r0, [pc, #264]	; (8000ba4 <MX_GPIO_Init+0x17c>)
 8000a9a:	f001 ff11 	bl	80028c0 <HAL_GPIO_WritePin>
                          |RW_Pin|EN_Pin|D4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000aa4:	4840      	ldr	r0, [pc, #256]	; (8000ba8 <MX_GPIO_Init+0x180>)
 8000aa6:	f001 ff0b 	bl	80028c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8000aaa:	2200      	movs	r2, #0
 8000aac:	2138      	movs	r1, #56	; 0x38
 8000aae:	483f      	ldr	r0, [pc, #252]	; (8000bac <MX_GPIO_Init+0x184>)
 8000ab0:	f001 ff06 	bl	80028c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RS_Pin D5_Pin D6_Pin D7_Pin
                           RW_Pin EN_Pin D4_Pin */
  GPIO_InitStruct.Pin = RS_Pin|D5_Pin|D6_Pin|D7_Pin
 8000ab4:	f240 433f 	movw	r3, #1087	; 0x43f
 8000ab8:	60fb      	str	r3, [r7, #12]
                          |RW_Pin|EN_Pin|D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aba:	2301      	movs	r3, #1
 8000abc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ac6:	f107 030c 	add.w	r3, r7, #12
 8000aca:	4619      	mov	r1, r3
 8000acc:	4835      	ldr	r0, [pc, #212]	; (8000ba4 <MX_GPIO_Init+0x17c>)
 8000ace:	f001 fd5b 	bl	8002588 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000ad2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000ad6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ad8:	2301      	movs	r3, #1
 8000ada:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000adc:	2300      	movs	r3, #0
 8000ade:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ae4:	f107 030c 	add.w	r3, r7, #12
 8000ae8:	4619      	mov	r1, r3
 8000aea:	482f      	ldr	r0, [pc, #188]	; (8000ba8 <MX_GPIO_Init+0x180>)
 8000aec:	f001 fd4c 	bl	8002588 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000af0:	2338      	movs	r3, #56	; 0x38
 8000af2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af4:	2301      	movs	r3, #1
 8000af6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af8:	2300      	movs	r3, #0
 8000afa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000afc:	2300      	movs	r3, #0
 8000afe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b00:	f107 030c 	add.w	r3, r7, #12
 8000b04:	4619      	mov	r1, r3
 8000b06:	4829      	ldr	r0, [pc, #164]	; (8000bac <MX_GPIO_Init+0x184>)
 8000b08:	f001 fd3e 	bl	8002588 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8000b0c:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8000b10:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b12:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b16:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b1c:	f107 030c 	add.w	r3, r7, #12
 8000b20:	4619      	mov	r1, r3
 8000b22:	4822      	ldr	r0, [pc, #136]	; (8000bac <MX_GPIO_Init+0x184>)
 8000b24:	f001 fd30 	bl	8002588 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000b28:	2200      	movs	r2, #0
 8000b2a:	2100      	movs	r1, #0
 8000b2c:	2017      	movs	r0, #23
 8000b2e:	f001 fc62 	bl	80023f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000b32:	2017      	movs	r0, #23
 8000b34:	f001 fc7b 	bl	800242e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
	HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000b38:	2200      	movs	r2, #0
 8000b3a:	2100      	movs	r1, #0
 8000b3c:	2006      	movs	r0, #6
 8000b3e:	f001 fc5a 	bl	80023f6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000b42:	2006      	movs	r0, #6
 8000b44:	f001 fc73 	bl	800242e <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000b48:	2200      	movs	r2, #0
 8000b4a:	2100      	movs	r1, #0
 8000b4c:	2007      	movs	r0, #7
 8000b4e:	f001 fc52 	bl	80023f6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000b52:	2007      	movs	r0, #7
 8000b54:	f001 fc6b 	bl	800242e <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8000b58:	2200      	movs	r2, #0
 8000b5a:	2100      	movs	r1, #0
 8000b5c:	2008      	movs	r0, #8
 8000b5e:	f001 fc4a 	bl	80023f6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000b62:	2008      	movs	r0, #8
 8000b64:	f001 fc63 	bl	800242e <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000b68:	2200      	movs	r2, #0
 8000b6a:	2100      	movs	r1, #0
 8000b6c:	2009      	movs	r0, #9
 8000b6e:	f001 fc42 	bl	80023f6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000b72:	2009      	movs	r0, #9
 8000b74:	f001 fc5b 	bl	800242e <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000b78:	2200      	movs	r2, #0
 8000b7a:	2100      	movs	r1, #0
 8000b7c:	200a      	movs	r0, #10
 8000b7e:	f001 fc3a 	bl	80023f6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000b82:	200a      	movs	r0, #10
 8000b84:	f001 fc53 	bl	800242e <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000b88:	2200      	movs	r2, #0
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	2017      	movs	r0, #23
 8000b8e:	f001 fc32 	bl	80023f6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000b92:	2017      	movs	r0, #23
 8000b94:	f001 fc4b 	bl	800242e <HAL_NVIC_EnableIRQ>
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b98:	bf00      	nop
 8000b9a:	3720      	adds	r7, #32
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	40023800 	.word	0x40023800
 8000ba4:	40020800 	.word	0x40020800
 8000ba8:	40020000 	.word	0x40020000
 8000bac:	40020400 	.word	0x40020400

08000bb0 <FindFingerprint>:

/* USER CODE BEGIN 4 */
uint8_t FindFingerprint(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b086      	sub	sp, #24
 8000bb4:	af00      	add	r7, sp, #0
	HAL_Delay(1000); // Delay for 1 second
 8000bb6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000bba:	f001 fb1d 	bl	80021f8 <HAL_Delay>

	uint8_t f_status = AS608_GetImage(); // Attempt to capture a fingerprint image
 8000bbe:	f000 fb85 	bl	80012cc <AS608_GetImage>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	75fb      	strb	r3, [r7, #23]

	if (f_status != FINGERPRINT_OK) {
 8000bc6:	7dfb      	ldrb	r3, [r7, #23]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d00d      	beq.n	8000be8 <FindFingerprint+0x38>
		printf("error in the getimage"); // Print an error message to the console
 8000bcc:	4844      	ldr	r0, [pc, #272]	; (8000ce0 <FindFingerprint+0x130>)
 8000bce:	f004 fb31 	bl	8005234 <iprintf>
		lcd_send_string("errorinfinger"); // Send an error message to the LCD
 8000bd2:	4844      	ldr	r0, [pc, #272]	; (8000ce4 <FindFingerprint+0x134>)
 8000bd4:	f000 ffa0 	bl	8001b18 <lcd_send_string>
		HAL_Delay(1000); // Delay for 1 second
 8000bd8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000bdc:	f001 fb0c 	bl	80021f8 <HAL_Delay>
		lcd_clear(); // Clear the LCD display
 8000be0:	f000 ff34 	bl	8001a4c <lcd_clear>
		return f_status; // Return the status code
 8000be4:	7dfb      	ldrb	r3, [r7, #23]
 8000be6:	e077      	b.n	8000cd8 <FindFingerprint+0x128>
	}

	HAL_Delay(1000); // Delay for 1 second
 8000be8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000bec:	f001 fb04 	bl	80021f8 <HAL_Delay>

	f_status = AS608_Image2Tz(1); // Convert the captured image to a template
 8000bf0:	2001      	movs	r0, #1
 8000bf2:	f000 fb8d 	bl	8001310 <AS608_Image2Tz>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	75fb      	strb	r3, [r7, #23]

	if (f_status != FINGERPRINT_OK) {
 8000bfa:	7dfb      	ldrb	r3, [r7, #23]
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d00d      	beq.n	8000c1c <FindFingerprint+0x6c>
		printf("convert fail"); // Print an error message to the console
 8000c00:	4839      	ldr	r0, [pc, #228]	; (8000ce8 <FindFingerprint+0x138>)
 8000c02:	f004 fb17 	bl	8005234 <iprintf>
		lcd_send_string("convertinfinger"); // Send an error message to the LCD
 8000c06:	4839      	ldr	r0, [pc, #228]	; (8000cec <FindFingerprint+0x13c>)
 8000c08:	f000 ff86 	bl	8001b18 <lcd_send_string>
		HAL_Delay(1000); // Delay for 1 second
 8000c0c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c10:	f001 faf2 	bl	80021f8 <HAL_Delay>
		lcd_clear(); // Clear the LCD display
 8000c14:	f000 ff1a 	bl	8001a4c <lcd_clear>
		return f_status; // Return the status code
 8000c18:	7dfb      	ldrb	r3, [r7, #23]
 8000c1a:	e05d      	b.n	8000cd8 <FindFingerprint+0x128>
	}

	HAL_Delay(1000); // Delay for 1 second
 8000c1c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c20:	f001 faea 	bl	80021f8 <HAL_Delay>

	int pointer[3]; // Create an array to store 2 integers
	char idString[4]; // Create a character array to hold the string representation of the ID

	f_status = AS608_FingerFastSearch(pointer); // Search for a matching fingerprint
 8000c24:	f107 0308 	add.w	r3, r7, #8
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f000 fc3f 	bl	80014ac <AS608_FingerFastSearch>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	75fb      	strb	r3, [r7, #23]

	id = pointer[0]; // Assign the ID to the variable 'id'
 8000c32:	68bb      	ldr	r3, [r7, #8]
 8000c34:	4a2e      	ldr	r2, [pc, #184]	; (8000cf0 <FindFingerprint+0x140>)
 8000c36:	6013      	str	r3, [r2, #0]
	printf("id=%d", id); // Print the ID to the console
 8000c38:	4b2d      	ldr	r3, [pc, #180]	; (8000cf0 <FindFingerprint+0x140>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	482d      	ldr	r0, [pc, #180]	; (8000cf4 <FindFingerprint+0x144>)
 8000c40:	f004 faf8 	bl	8005234 <iprintf>
	sprintf(idString, "%d", id); // Convert the integer to a string
 8000c44:	4b2a      	ldr	r3, [pc, #168]	; (8000cf0 <FindFingerprint+0x140>)
 8000c46:	681a      	ldr	r2, [r3, #0]
 8000c48:	1d3b      	adds	r3, r7, #4
 8000c4a:	492b      	ldr	r1, [pc, #172]	; (8000cf8 <FindFingerprint+0x148>)
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f004 fc5b 	bl	8005508 <siprintf>

	if (f_status == FINGERPRINT_OK) {
 8000c52:	7dfb      	ldrb	r3, [r7, #23]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d125      	bne.n	8000ca4 <FindFingerprint+0xf4>
		HAL_Delay(100); // Delay for 0.1 second
 8000c58:	2064      	movs	r0, #100	; 0x64
 8000c5a:	f001 facd 	bl	80021f8 <HAL_Delay>
		printf("Fingerprint found with id = %d\n", pointer[0]); // Print the ID of the found fingerprint to the console
 8000c5e:	68bb      	ldr	r3, [r7, #8]
 8000c60:	4619      	mov	r1, r3
 8000c62:	4826      	ldr	r0, [pc, #152]	; (8000cfc <FindFingerprint+0x14c>)
 8000c64:	f004 fae6 	bl	8005234 <iprintf>
		lcd_clear(); // Clear the LCD display
 8000c68:	f000 fef0 	bl	8001a4c <lcd_clear>
		HAL_Delay(1500); // Delay for 1.5 seconds
 8000c6c:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000c70:	f001 fac2 	bl	80021f8 <HAL_Delay>
		lcd_send_string("Finger Found\n"); // Send a message to the LCD
 8000c74:	4822      	ldr	r0, [pc, #136]	; (8000d00 <FindFingerprint+0x150>)
 8000c76:	f000 ff4f 	bl	8001b18 <lcd_send_string>
		lcd_send_string(idString); // Send the ID string to the LCD
 8000c7a:	1d3b      	adds	r3, r7, #4
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f000 ff4b 	bl	8001b18 <lcd_send_string>
		 playTone(500,1000,20);
 8000c82:	2214      	movs	r2, #20
 8000c84:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000c88:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c8c:	f000 ff5a 	bl	8001b44 <playTone>
		stopTone();
 8000c90:	f000 ff86 	bl	8001ba0 <stopTone>
		HAL_Delay(1500); // Delay for 1.5 seconds
 8000c94:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000c98:	f001 faae 	bl	80021f8 <HAL_Delay>
		lcd_clear(); // Clear the LCD display
 8000c9c:	f000 fed6 	bl	8001a4c <lcd_clear>
		return f_status; // Return the status code
 8000ca0:	7dfb      	ldrb	r3, [r7, #23]
 8000ca2:	e019      	b.n	8000cd8 <FindFingerprint+0x128>
	} else {
		printf("Fingerprint not found\n"); // Print a message indicating the fingerprint was not found
 8000ca4:	4817      	ldr	r0, [pc, #92]	; (8000d04 <FindFingerprint+0x154>)
 8000ca6:	f004 fb61 	bl	800536c <puts>
		lcd_send_string("finger not found"); // Send a message to the LCD
 8000caa:	4817      	ldr	r0, [pc, #92]	; (8000d08 <FindFingerprint+0x158>)
 8000cac:	f000 ff34 	bl	8001b18 <lcd_send_string>
		lcd_send_string(idString); // Send the ID string to the LCD
 8000cb0:	1d3b      	adds	r3, r7, #4
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f000 ff30 	bl	8001b18 <lcd_send_string>
		 playTone(500,1000,20);
 8000cb8:	2214      	movs	r2, #20
 8000cba:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000cbe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000cc2:	f000 ff3f 	bl	8001b44 <playTone>
		stopTone();
 8000cc6:	f000 ff6b 	bl	8001ba0 <stopTone>
		HAL_Delay(2000); // Delay for 2 seconds to display the message
 8000cca:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000cce:	f001 fa93 	bl	80021f8 <HAL_Delay>
		lcd_clear(); // Clear the LCD display
 8000cd2:	f000 febb 	bl	8001a4c <lcd_clear>
		// HAL_Delay(1000); // Delay for 1 second to display the message
	}

	return f_status; // Return the status code
 8000cd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8000cd8:	4618      	mov	r0, r3
 8000cda:	3718      	adds	r7, #24
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	080069c4 	.word	0x080069c4
 8000ce4:	080069dc 	.word	0x080069dc
 8000ce8:	080069ec 	.word	0x080069ec
 8000cec:	080069fc 	.word	0x080069fc
 8000cf0:	20000090 	.word	0x20000090
 8000cf4:	08006a0c 	.word	0x08006a0c
 8000cf8:	08006a14 	.word	0x08006a14
 8000cfc:	08006a18 	.word	0x08006a18
 8000d00:	08006a38 	.word	0x08006a38
 8000d04:	08006a48 	.word	0x08006a48
 8000d08:	08006a60 	.word	0x08006a60

08000d0c <DeleteFinger>:


void DeleteFinger(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
	HAL_Delay(1000); // Delay for 1 second
 8000d12:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d16:	f001 fa6f 	bl	80021f8 <HAL_Delay>

	char ids[3]; // Create an array to store 2 characters
	uint8_t i = 0; // Initialize a counter variable
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	71fb      	strb	r3, [r7, #7]
	// Loop to get 2 key presses
	while (i < 2)
 8000d1e:	e021      	b.n	8000d64 <DeleteFinger+0x58>
	{
		HAL_Delay(1000); // Delay for 1 seconds
 8000d20:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d24:	f001 fa68 	bl	80021f8 <HAL_Delay>

		//		// Start UART reception in interrupt mode to receive 2 characters
		//		HAL_UART_Receive_IT(&huart2, (uint8_t *)&Rxbuff, 2);

		printf("press the keys\n"); // Prompt the user to press keys
 8000d28:	4829      	ldr	r0, [pc, #164]	; (8000dd0 <DeleteFinger+0xc4>)
 8000d2a:	f004 fb1f 	bl	800536c <puts>
		HAL_Delay(1000);
 8000d2e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d32:	f001 fa61 	bl	80021f8 <HAL_Delay>
		lcd_send_string("press the keys");
 8000d36:	4826      	ldr	r0, [pc, #152]	; (8000dd0 <DeleteFinger+0xc4>)
 8000d38:	f000 feee 	bl	8001b18 <lcd_send_string>
		HAL_Delay(1000); // Delay for 1 seconds
 8000d3c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d40:	f001 fa5a 	bl	80021f8 <HAL_Delay>
		lcd_clear();
 8000d44:	f000 fe82 	bl	8001a4c <lcd_clear>
		ids[i] = keyPressed; // Store the key press in 'ids' array
 8000d48:	79fb      	ldrb	r3, [r7, #7]
 8000d4a:	4a22      	ldr	r2, [pc, #136]	; (8000dd4 <DeleteFinger+0xc8>)
 8000d4c:	7812      	ldrb	r2, [r2, #0]
 8000d4e:	3308      	adds	r3, #8
 8000d50:	443b      	add	r3, r7
 8000d52:	f803 2c04 	strb.w	r2, [r3, #-4]
		i++; // Increment the counter
 8000d56:	79fb      	ldrb	r3, [r7, #7]
 8000d58:	3301      	adds	r3, #1
 8000d5a:	71fb      	strb	r3, [r7, #7]
		HAL_Delay(1000); // Delay for 1 seconds
 8000d5c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d60:	f001 fa4a 	bl	80021f8 <HAL_Delay>
	while (i < 2)
 8000d64:	79fb      	ldrb	r3, [r7, #7]
 8000d66:	2b01      	cmp	r3, #1
 8000d68:	d9da      	bls.n	8000d20 <DeleteFinger+0x14>
	}

	ids[2] = '\0'; // Add a null-terminator to the end of the 'ids' string
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	71bb      	strb	r3, [r7, #6]

	id = atoi(ids); // Convert the two-character string 'ids' to an integer 'id'
 8000d6e:	1d3b      	adds	r3, r7, #4
 8000d70:	4618      	mov	r0, r3
 8000d72:	f004 fa1b 	bl	80051ac <atoi>
 8000d76:	4603      	mov	r3, r0
 8000d78:	4a17      	ldr	r2, [pc, #92]	; (8000dd8 <DeleteFinger+0xcc>)
 8000d7a:	6013      	str	r3, [r2, #0]

	// Call a function to delete the fingerprint model associated with 'id'
	AS608_DeleteModel(id);
 8000d7c:	4b16      	ldr	r3, [pc, #88]	; (8000dd8 <DeleteFinger+0xcc>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	b29b      	uxth	r3, r3
 8000d82:	4618      	mov	r0, r3
 8000d84:	f000 fb60 	bl	8001448 <AS608_DeleteModel>

	printf("Finger is deleted with id = %d", id); // Print a message indicating successful deletion
 8000d88:	4b13      	ldr	r3, [pc, #76]	; (8000dd8 <DeleteFinger+0xcc>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	4813      	ldr	r0, [pc, #76]	; (8000ddc <DeleteFinger+0xd0>)
 8000d90:	f004 fa50 	bl	8005234 <iprintf>
	lcd_send_string("DElFINGER="); // Send a message "DElFINGER=" to the LCD
 8000d94:	4812      	ldr	r0, [pc, #72]	; (8000de0 <DeleteFinger+0xd4>)
 8000d96:	f000 febf 	bl	8001b18 <lcd_send_string>
	lcd_send_string(ids); // Send the string 'ids' to the LCD
 8000d9a:	1d3b      	adds	r3, r7, #4
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f000 febb 	bl	8001b18 <lcd_send_string>
	   playTone(500,1000,20);
 8000da2:	2214      	movs	r2, #20
 8000da4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000da8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000dac:	f000 feca 	bl	8001b44 <playTone>
			  		        stopTone();
 8000db0:	f000 fef6 	bl	8001ba0 <stopTone>
	HAL_Delay(1500); // Delay for 1.5 seconds (1500 milliseconds)
 8000db4:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000db8:	f001 fa1e 	bl	80021f8 <HAL_Delay>
	lcd_clear(); // Clear the LCD display
 8000dbc:	f000 fe46 	bl	8001a4c <lcd_clear>
	keypressed = 0; // Reset a variable 'keypressed' to 0
 8000dc0:	4b08      	ldr	r3, [pc, #32]	; (8000de4 <DeleteFinger+0xd8>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	701a      	strb	r2, [r3, #0]

}
 8000dc6:	bf00      	nop
 8000dc8:	3708      	adds	r7, #8
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	08006a74 	.word	0x08006a74
 8000dd4:	200001cc 	.word	0x200001cc
 8000dd8:	20000090 	.word	0x20000090
 8000ddc:	08006a84 	.word	0x08006a84
 8000de0:	08006aa4 	.word	0x08006aa4
 8000de4:	20000251 	.word	0x20000251

08000de8 <InputFinger>:

char ids[3]; // Create an array to store 3 characters
void InputFinger(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
	HAL_Delay(1000); // Delay for 1 second
 8000dec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000df0:	f001 fa02 	bl	80021f8 <HAL_Delay>
	printf("press the first key\n"); // Prompt the user to press the first key
 8000df4:	4826      	ldr	r0, [pc, #152]	; (8000e90 <InputFinger+0xa8>)
 8000df6:	f004 fab9 	bl	800536c <puts>
	lcd_send_string("pressthefirstkey\n");
 8000dfa:	4826      	ldr	r0, [pc, #152]	; (8000e94 <InputFinger+0xac>)
 8000dfc:	f000 fe8c 	bl	8001b18 <lcd_send_string>
	HAL_Delay(2000); // Delay for 1 seconds
 8000e00:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000e04:	f001 f9f8 	bl	80021f8 <HAL_Delay>
	lcd_clear();
 8000e08:	f000 fe20 	bl	8001a4c <lcd_clear>
	ids[0] = keyPressed; // Store the key press in the first position of 'ids'
 8000e0c:	4b22      	ldr	r3, [pc, #136]	; (8000e98 <InputFinger+0xb0>)
 8000e0e:	781a      	ldrb	r2, [r3, #0]
 8000e10:	4b22      	ldr	r3, [pc, #136]	; (8000e9c <InputFinger+0xb4>)
 8000e12:	701a      	strb	r2, [r3, #0]
	printf("press the second key\n"); // Prompt the user to press the second key
 8000e14:	4822      	ldr	r0, [pc, #136]	; (8000ea0 <InputFinger+0xb8>)
 8000e16:	f004 faa9 	bl	800536c <puts>
	lcd_send_string("press2ndkey");
 8000e1a:	4822      	ldr	r0, [pc, #136]	; (8000ea4 <InputFinger+0xbc>)
 8000e1c:	f000 fe7c 	bl	8001b18 <lcd_send_string>
	HAL_Delay(1000); // Delay for 1 seconds
 8000e20:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e24:	f001 f9e8 	bl	80021f8 <HAL_Delay>
	lcd_clear();
 8000e28:	f000 fe10 	bl	8001a4c <lcd_clear>
	HAL_Delay(2000); // Delay for 2 seconds
 8000e2c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000e30:	f001 f9e2 	bl	80021f8 <HAL_Delay>
	ids[1] = keyPressed; // Store the key press in the second position of 'ids'
 8000e34:	4b18      	ldr	r3, [pc, #96]	; (8000e98 <InputFinger+0xb0>)
 8000e36:	781a      	ldrb	r2, [r3, #0]
 8000e38:	4b18      	ldr	r3, [pc, #96]	; (8000e9c <InputFinger+0xb4>)
 8000e3a:	705a      	strb	r2, [r3, #1]

	//	// Start UART reception in interrupt mode to receive 2 characters
	//	HAL_UART_Receive_IT(&huart2, (uint8_t *)&ids, 2);
	HAL_Delay(1000); // Delay for 1 second
 8000e3c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e40:	f001 f9da 	bl	80021f8 <HAL_Delay>
	id = atoi(ids); // Convert the two-character string 'ids' to an integer 'id'
 8000e44:	4815      	ldr	r0, [pc, #84]	; (8000e9c <InputFinger+0xb4>)
 8000e46:	f004 f9b1 	bl	80051ac <atoi>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	4a16      	ldr	r2, [pc, #88]	; (8000ea8 <InputFinger+0xc0>)
 8000e4e:	6013      	str	r3, [r2, #0]
	if (id >= 0 && id <= 99) {
 8000e50:	4b15      	ldr	r3, [pc, #84]	; (8000ea8 <InputFinger+0xc0>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	db0a      	blt.n	8000e6e <InputFinger+0x86>
 8000e58:	4b13      	ldr	r3, [pc, #76]	; (8000ea8 <InputFinger+0xc0>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	2b63      	cmp	r3, #99	; 0x63
 8000e5e:	dc06      	bgt.n	8000e6e <InputFinger+0x86>
		EnrollFinger(id); // Call a function (EnrollFinger) with the 'id' as a parameter
 8000e60:	4b11      	ldr	r3, [pc, #68]	; (8000ea8 <InputFinger+0xc0>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	b2db      	uxtb	r3, r3
 8000e66:	4618      	mov	r0, r3
 8000e68:	f000 f826 	bl	8000eb8 <EnrollFinger>
 8000e6c:	e00b      	b.n	8000e86 <InputFinger+0x9e>
	} else {
		printf("\nInvalid id. Please enter an id between 1 and 100.");
 8000e6e:	480f      	ldr	r0, [pc, #60]	; (8000eac <InputFinger+0xc4>)
 8000e70:	f004 f9e0 	bl	8005234 <iprintf>
		lcd_send_string("Invalid id");
 8000e74:	480e      	ldr	r0, [pc, #56]	; (8000eb0 <InputFinger+0xc8>)
 8000e76:	f000 fe4f 	bl	8001b18 <lcd_send_string>
		HAL_Delay(1000); // Delay for 1 seconds
 8000e7a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e7e:	f001 f9bb 	bl	80021f8 <HAL_Delay>
		lcd_clear();
 8000e82:	f000 fde3 	bl	8001a4c <lcd_clear>
	}
	keypressed = 0; // Reset a variable 'keypressed' to 0
 8000e86:	4b0b      	ldr	r3, [pc, #44]	; (8000eb4 <InputFinger+0xcc>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	701a      	strb	r2, [r3, #0]
}
 8000e8c:	bf00      	nop
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	08006ab0 	.word	0x08006ab0
 8000e94:	08006ac4 	.word	0x08006ac4
 8000e98:	200001cc 	.word	0x200001cc
 8000e9c:	20000254 	.word	0x20000254
 8000ea0:	08006ad8 	.word	0x08006ad8
 8000ea4:	08006af0 	.word	0x08006af0
 8000ea8:	20000090 	.word	0x20000090
 8000eac:	08006afc 	.word	0x08006afc
 8000eb0:	08006b30 	.word	0x08006b30
 8000eb4:	20000251 	.word	0x20000251

08000eb8 <EnrollFinger>:

void EnrollFinger(uint8_t id) {
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b086      	sub	sp, #24
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	71fb      	strb	r3, [r7, #7]
	// Step 1: Prompt the user to place their finger on the sensor
	printf("Place finger on the sensor\n");
 8000ec2:	484a      	ldr	r0, [pc, #296]	; (8000fec <EnrollFinger+0x134>)
 8000ec4:	f004 fa52 	bl	800536c <puts>
	lcd_send_string("Place finger");
 8000ec8:	4849      	ldr	r0, [pc, #292]	; (8000ff0 <EnrollFinger+0x138>)
 8000eca:	f000 fe25 	bl	8001b18 <lcd_send_string>
	HAL_Delay(1000); // Delay for 1 seconds
 8000ece:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ed2:	f001 f991 	bl	80021f8 <HAL_Delay>
	lcd_clear();
 8000ed6:	f000 fdb9 	bl	8001a4c <lcd_clear>

	// Step 2: Capture an image of the fingerprint
	while (AS608_GetImage() != FINGERPRINT_OK) { HAL_Delay(1000);break;}
 8000eda:	bf00      	nop
 8000edc:	f000 f9f6 	bl	80012cc <AS608_GetImage>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d00a      	beq.n	8000efc <EnrollFinger+0x44>
 8000ee6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000eea:	f001 f985 	bl	80021f8 <HAL_Delay>
 8000eee:	bf00      	nop

	// Step 3: Convert the captured image to a template
	while (AS608_Image2Tz(1) != FINGERPRINT_OK) {HAL_Delay(1000);break; }
 8000ef0:	e004      	b.n	8000efc <EnrollFinger+0x44>
 8000ef2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ef6:	f001 f97f 	bl	80021f8 <HAL_Delay>
 8000efa:	e006      	b.n	8000f0a <EnrollFinger+0x52>
 8000efc:	bf00      	nop
 8000efe:	2001      	movs	r0, #1
 8000f00:	f000 fa06 	bl	8001310 <AS608_Image2Tz>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d1f3      	bne.n	8000ef2 <EnrollFinger+0x3a>

	// Step 4: Prompt the user to remove and re-place the same finger
	printf("Remove finger and place the same finger again\n");
 8000f0a:	483a      	ldr	r0, [pc, #232]	; (8000ff4 <EnrollFinger+0x13c>)
 8000f0c:	f004 fa2e 	bl	800536c <puts>
	lcd_send_string("Remove and place");
 8000f10:	4839      	ldr	r0, [pc, #228]	; (8000ff8 <EnrollFinger+0x140>)
 8000f12:	f000 fe01 	bl	8001b18 <lcd_send_string>
	HAL_Delay(1000); // Delay for 1 seconds
 8000f16:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f1a:	f001 f96d 	bl	80021f8 <HAL_Delay>
	lcd_clear();
 8000f1e:	f000 fd95 	bl	8001a4c <lcd_clear>
	removeFingerPlaceFinger = true;
 8000f22:	4b36      	ldr	r3, [pc, #216]	; (8000ffc <EnrollFinger+0x144>)
 8000f24:	2201      	movs	r2, #1
 8000f26:	701a      	strb	r2, [r3, #0]

	// Step 5: Capture another image of the fingerprint
	while (AS608_GetImage() != FINGERPRINT_OK) { HAL_Delay(1000);break;}
 8000f28:	bf00      	nop
 8000f2a:	f000 f9cf 	bl	80012cc <AS608_GetImage>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d00a      	beq.n	8000f4a <EnrollFinger+0x92>
 8000f34:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f38:	f001 f95e 	bl	80021f8 <HAL_Delay>
 8000f3c:	bf00      	nop

	// Step 6: Convert the second captured image to a template
	while (AS608_Image2Tz(2) != FINGERPRINT_OK) {HAL_Delay(1000); break;}
 8000f3e:	e004      	b.n	8000f4a <EnrollFinger+0x92>
 8000f40:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f44:	f001 f958 	bl	80021f8 <HAL_Delay>
 8000f48:	e006      	b.n	8000f58 <EnrollFinger+0xa0>
 8000f4a:	bf00      	nop
 8000f4c:	2002      	movs	r0, #2
 8000f4e:	f000 f9df 	bl	8001310 <AS608_Image2Tz>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d1f3      	bne.n	8000f40 <EnrollFinger+0x88>

	removeFingerPlaceFinger = false;
 8000f58:	4b28      	ldr	r3, [pc, #160]	; (8000ffc <EnrollFinger+0x144>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	701a      	strb	r2, [r3, #0]

	// Step 7: Create a fingerprint model from the two templates
	if (AS608_CreateModel() == FINGERPRINT_OK) {
 8000f5e:	f000 f9ff 	bl	8001360 <AS608_CreateModel>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d12c      	bne.n	8000fc2 <EnrollFinger+0x10a>
		// Step 8: Choose the appropriate buffer ID and page ID
		uint16_t pageID = id;
 8000f68:	79fb      	ldrb	r3, [r7, #7]
 8000f6a:	82fb      	strh	r3, [r7, #22]
		char idString[10]; // Create a character array to hold the string representation of the integer
		sprintf(idString, "%d", id); // Convert the integer to a string
 8000f6c:	79fa      	ldrb	r2, [r7, #7]
 8000f6e:	f107 030c 	add.w	r3, r7, #12
 8000f72:	4923      	ldr	r1, [pc, #140]	; (8001000 <EnrollFinger+0x148>)
 8000f74:	4618      	mov	r0, r3
 8000f76:	f004 fac7 	bl	8005508 <siprintf>

		// Step 9: Store the fingerprint model in the specified buffer
		if (AS608_StoreModel( pageID) == FINGERPRINT_OK) {
 8000f7a:	8afb      	ldrh	r3, [r7, #22]
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f000 fa33 	bl	80013e8 <AS608_StoreModel>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d12c      	bne.n	8000fe2 <EnrollFinger+0x12a>
			printf("Fingerprint enrolled for ID: %d\n", id); // Print a message indicating successful fingerprint enrollment along with the 'id'
 8000f88:	79fb      	ldrb	r3, [r7, #7]
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	481d      	ldr	r0, [pc, #116]	; (8001004 <EnrollFinger+0x14c>)
 8000f8e:	f004 f951 	bl	8005234 <iprintf>
			lcd_send_string("ENROLL ID="); // Send "ENROLL ID=" to the LCD
 8000f92:	481d      	ldr	r0, [pc, #116]	; (8001008 <EnrollFinger+0x150>)
 8000f94:	f000 fdc0 	bl	8001b18 <lcd_send_string>
			lcd_send_string(idString); // Send the string representation of 'id' to the LCD
 8000f98:	f107 030c 	add.w	r3, r7, #12
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f000 fdbb 	bl	8001b18 <lcd_send_string>
			 playTone(800,1000,20);
 8000fa2:	2214      	movs	r2, #20
 8000fa4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000fa8:	f44f 7048 	mov.w	r0, #800	; 0x320
 8000fac:	f000 fdca 	bl	8001b44 <playTone>
				 	 	     stopTone();
 8000fb0:	f000 fdf6 	bl	8001ba0 <stopTone>

			HAL_Delay(1500); // Delay for 1.5 seconds
 8000fb4:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000fb8:	f001 f91e 	bl	80021f8 <HAL_Delay>
			lcd_clear(); // Clear the LCD display
 8000fbc:	f000 fd46 	bl	8001a4c <lcd_clear>
        lcd_send_string("fingernotenroled");
        playTone(800,100,20);

	 	     stopTone();
	}
}
 8000fc0:	e00f      	b.n	8000fe2 <EnrollFinger+0x12a>
        fingerprintStored = false;  // Prints unmatched
 8000fc2:	4b12      	ldr	r3, [pc, #72]	; (800100c <EnrollFinger+0x154>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	701a      	strb	r2, [r3, #0]
        lcd_clear();
 8000fc8:	f000 fd40 	bl	8001a4c <lcd_clear>
        lcd_send_string("fingernotenroled");
 8000fcc:	4810      	ldr	r0, [pc, #64]	; (8001010 <EnrollFinger+0x158>)
 8000fce:	f000 fda3 	bl	8001b18 <lcd_send_string>
        playTone(800,100,20);
 8000fd2:	2214      	movs	r2, #20
 8000fd4:	2164      	movs	r1, #100	; 0x64
 8000fd6:	f44f 7048 	mov.w	r0, #800	; 0x320
 8000fda:	f000 fdb3 	bl	8001b44 <playTone>
	 	     stopTone();
 8000fde:	f000 fddf 	bl	8001ba0 <stopTone>
}
 8000fe2:	bf00      	nop
 8000fe4:	3718      	adds	r7, #24
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	08006b3c 	.word	0x08006b3c
 8000ff0:	08006b58 	.word	0x08006b58
 8000ff4:	08006b68 	.word	0x08006b68
 8000ff8:	08006b98 	.word	0x08006b98
 8000ffc:	20000094 	.word	0x20000094
 8001000:	08006a14 	.word	0x08006a14
 8001004:	08006bac 	.word	0x08006bac
 8001008:	08006bd0 	.word	0x08006bd0
 800100c:	20000095 	.word	0x20000095
 8001010:	08006bdc 	.word	0x08006bdc

08001014 <PacketInit>:

//Static functions
static void PacketInit(uint8_t type,uint16_t length,uint8_t* data)
{
 8001014:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001016:	b085      	sub	sp, #20
 8001018:	af00      	add	r7, sp, #0
 800101a:	4603      	mov	r3, r0
 800101c:	603a      	str	r2, [r7, #0]
 800101e:	71fb      	strb	r3, [r7, #7]
 8001020:	460b      	mov	r3, r1
 8001022:	80bb      	strh	r3, [r7, #4]
	packet.start_code = FINGERPRINT_STARTCODE;
 8001024:	4b1d      	ldr	r3, [pc, #116]	; (800109c <PacketInit+0x88>)
 8001026:	f64e 7201 	movw	r2, #61185	; 0xef01
 800102a:	801a      	strh	r2, [r3, #0]
	packet.type = type;
 800102c:	4a1b      	ldr	r2, [pc, #108]	; (800109c <PacketInit+0x88>)
 800102e:	79fb      	ldrb	r3, [r7, #7]
 8001030:	7193      	strb	r3, [r2, #6]
	packet.length = length;
 8001032:	4a1a      	ldr	r2, [pc, #104]	; (800109c <PacketInit+0x88>)
 8001034:	88bb      	ldrh	r3, [r7, #4]
 8001036:	8113      	strh	r3, [r2, #8]
	for(uint8_t i = 0; i < 4; i++)
 8001038:	2300      	movs	r3, #0
 800103a:	73fb      	strb	r3, [r7, #15]
 800103c:	e007      	b.n	800104e <PacketInit+0x3a>
	{
		packet.address[i] = 0xFF;
 800103e:	7bfb      	ldrb	r3, [r7, #15]
 8001040:	4a16      	ldr	r2, [pc, #88]	; (800109c <PacketInit+0x88>)
 8001042:	4413      	add	r3, r2
 8001044:	22ff      	movs	r2, #255	; 0xff
 8001046:	709a      	strb	r2, [r3, #2]
	for(uint8_t i = 0; i < 4; i++)
 8001048:	7bfb      	ldrb	r3, [r7, #15]
 800104a:	3301      	adds	r3, #1
 800104c:	73fb      	strb	r3, [r7, #15]
 800104e:	7bfb      	ldrb	r3, [r7, #15]
 8001050:	2b03      	cmp	r3, #3
 8001052:	d9f4      	bls.n	800103e <PacketInit+0x2a>
	}
	if(length < 50)
 8001054:	88bb      	ldrh	r3, [r7, #4]
 8001056:	2b31      	cmp	r3, #49	; 0x31
 8001058:	d806      	bhi.n	8001068 <PacketInit+0x54>
	{
		memcpy(packet.data,data,length);
 800105a:	88bb      	ldrh	r3, [r7, #4]
 800105c:	461a      	mov	r2, r3
 800105e:	6839      	ldr	r1, [r7, #0]
 8001060:	480f      	ldr	r0, [pc, #60]	; (80010a0 <PacketInit+0x8c>)
 8001062:	f004 f8d1 	bl	8005208 <memcpy>
	else
	{
		memcpy(packet.data,data,64);
	}

}
 8001066:	e015      	b.n	8001094 <PacketInit+0x80>
		memcpy(packet.data,data,64);
 8001068:	4a0c      	ldr	r2, [pc, #48]	; (800109c <PacketInit+0x88>)
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	f102 000a 	add.w	r0, r2, #10
 8001070:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8001074:	4602      	mov	r2, r0
 8001076:	4619      	mov	r1, r3
 8001078:	f8d1 c000 	ldr.w	ip, [r1]
 800107c:	684e      	ldr	r6, [r1, #4]
 800107e:	688d      	ldr	r5, [r1, #8]
 8001080:	68c9      	ldr	r1, [r1, #12]
 8001082:	f8c2 c000 	str.w	ip, [r2]
 8001086:	6056      	str	r6, [r2, #4]
 8001088:	6095      	str	r5, [r2, #8]
 800108a:	60d1      	str	r1, [r2, #12]
 800108c:	3310      	adds	r3, #16
 800108e:	3010      	adds	r0, #16
 8001090:	42a3      	cmp	r3, r4
 8001092:	d1ef      	bne.n	8001074 <PacketInit+0x60>
}
 8001094:	bf00      	nop
 8001096:	3714      	adds	r7, #20
 8001098:	46bd      	mov	sp, r7
 800109a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800109c:	200001d0 	.word	0x200001d0
 80010a0:	200001da 	.word	0x200001da

080010a4 <WriteStructuredPacket>:

/**
	@brief Process a packet and send it over UART to the sensor
 */
static void WriteStructuredPacket(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b084      	sub	sp, #16
 80010a8:	af00      	add	r7, sp, #0
	uint8_t leftshiftwirelength;
	uint8_t bitwiseandwirelength;
	uint8_t leftshiftsum;
	uint8_t bitwiseandsum;

	leftshiftstartcode = packet.start_code >> 8;
 80010aa:	4b3f      	ldr	r3, [pc, #252]	; (80011a8 <WriteStructuredPacket+0x104>)
 80010ac:	881b      	ldrh	r3, [r3, #0]
 80010ae:	0a1b      	lsrs	r3, r3, #8
 80010b0:	b29b      	uxth	r3, r3
 80010b2:	b2db      	uxtb	r3, r3
 80010b4:	727b      	strb	r3, [r7, #9]
	bitwiseand = packet.start_code & 0xFF;
 80010b6:	4b3c      	ldr	r3, [pc, #240]	; (80011a8 <WriteStructuredPacket+0x104>)
 80010b8:	881b      	ldrh	r3, [r3, #0]
 80010ba:	b2db      	uxtb	r3, r3
 80010bc:	723b      	strb	r3, [r7, #8]
	HAL_UART_Transmit(&huart1,(&leftshiftstartcode),1,HAL_MAX_DELAY);
 80010be:	f107 0109 	add.w	r1, r7, #9
 80010c2:	f04f 33ff 	mov.w	r3, #4294967295
 80010c6:	2201      	movs	r2, #1
 80010c8:	4838      	ldr	r0, [pc, #224]	; (80011ac <WriteStructuredPacket+0x108>)
 80010ca:	f002 ffac 	bl	8004026 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1,(&bitwiseand),1,HAL_MAX_DELAY);
 80010ce:	f107 0108 	add.w	r1, r7, #8
 80010d2:	f04f 33ff 	mov.w	r3, #4294967295
 80010d6:	2201      	movs	r2, #1
 80010d8:	4834      	ldr	r0, [pc, #208]	; (80011ac <WriteStructuredPacket+0x108>)
 80010da:	f002 ffa4 	bl	8004026 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1,(&packet.address[0]),4,4);
 80010de:	2304      	movs	r3, #4
 80010e0:	2204      	movs	r2, #4
 80010e2:	4933      	ldr	r1, [pc, #204]	; (80011b0 <WriteStructuredPacket+0x10c>)
 80010e4:	4831      	ldr	r0, [pc, #196]	; (80011ac <WriteStructuredPacket+0x108>)
 80010e6:	f002 ff9e 	bl	8004026 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1,(&packet.type),1,4);
 80010ea:	2304      	movs	r3, #4
 80010ec:	2201      	movs	r2, #1
 80010ee:	4931      	ldr	r1, [pc, #196]	; (80011b4 <WriteStructuredPacket+0x110>)
 80010f0:	482e      	ldr	r0, [pc, #184]	; (80011ac <WriteStructuredPacket+0x108>)
 80010f2:	f002 ff98 	bl	8004026 <HAL_UART_Transmit>
	uint16_t wireLength = packet.length + 2;
 80010f6:	4b2c      	ldr	r3, [pc, #176]	; (80011a8 <WriteStructuredPacket+0x104>)
 80010f8:	891b      	ldrh	r3, [r3, #8]
 80010fa:	3302      	adds	r3, #2
 80010fc:	817b      	strh	r3, [r7, #10]
	leftshiftwirelength = wireLength >> 8;
 80010fe:	897b      	ldrh	r3, [r7, #10]
 8001100:	0a1b      	lsrs	r3, r3, #8
 8001102:	b29b      	uxth	r3, r3
 8001104:	b2db      	uxtb	r3, r3
 8001106:	71fb      	strb	r3, [r7, #7]
	bitwiseandwirelength = wireLength & 0xFF;
 8001108:	897b      	ldrh	r3, [r7, #10]
 800110a:	b2db      	uxtb	r3, r3
 800110c:	71bb      	strb	r3, [r7, #6]
	HAL_UART_Transmit(&huart1,(&leftshiftwirelength),1,HAL_MAX_DELAY);
 800110e:	1df9      	adds	r1, r7, #7
 8001110:	f04f 33ff 	mov.w	r3, #4294967295
 8001114:	2201      	movs	r2, #1
 8001116:	4825      	ldr	r0, [pc, #148]	; (80011ac <WriteStructuredPacket+0x108>)
 8001118:	f002 ff85 	bl	8004026 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1,(&bitwiseandwirelength),1,HAL_MAX_DELAY);
 800111c:	1db9      	adds	r1, r7, #6
 800111e:	f04f 33ff 	mov.w	r3, #4294967295
 8001122:	2201      	movs	r2, #1
 8001124:	4821      	ldr	r0, [pc, #132]	; (80011ac <WriteStructuredPacket+0x108>)
 8001126:	f002 ff7e 	bl	8004026 <HAL_UART_Transmit>
	uint16_t sum = wireLength + packet.type;
 800112a:	4b1f      	ldr	r3, [pc, #124]	; (80011a8 <WriteStructuredPacket+0x104>)
 800112c:	799b      	ldrb	r3, [r3, #6]
 800112e:	b29a      	uxth	r2, r3
 8001130:	897b      	ldrh	r3, [r7, #10]
 8001132:	4413      	add	r3, r2
 8001134:	81fb      	strh	r3, [r7, #14]
	for (uint8_t i = 0; i < packet.length; i++)
 8001136:	2300      	movs	r3, #0
 8001138:	737b      	strb	r3, [r7, #13]
 800113a:	e015      	b.n	8001168 <WriteStructuredPacket+0xc4>
	{
		HAL_UART_Transmit(&huart1,(&packet.data[i]),1,HAL_MAX_DELAY);
 800113c:	7b7b      	ldrb	r3, [r7, #13]
 800113e:	3308      	adds	r3, #8
 8001140:	4a19      	ldr	r2, [pc, #100]	; (80011a8 <WriteStructuredPacket+0x104>)
 8001142:	4413      	add	r3, r2
 8001144:	1c99      	adds	r1, r3, #2
 8001146:	f04f 33ff 	mov.w	r3, #4294967295
 800114a:	2201      	movs	r2, #1
 800114c:	4817      	ldr	r0, [pc, #92]	; (80011ac <WriteStructuredPacket+0x108>)
 800114e:	f002 ff6a 	bl	8004026 <HAL_UART_Transmit>
		sum += packet.data[i];
 8001152:	7b7b      	ldrb	r3, [r7, #13]
 8001154:	4a14      	ldr	r2, [pc, #80]	; (80011a8 <WriteStructuredPacket+0x104>)
 8001156:	4413      	add	r3, r2
 8001158:	7a9b      	ldrb	r3, [r3, #10]
 800115a:	b29a      	uxth	r2, r3
 800115c:	89fb      	ldrh	r3, [r7, #14]
 800115e:	4413      	add	r3, r2
 8001160:	81fb      	strh	r3, [r7, #14]
	for (uint8_t i = 0; i < packet.length; i++)
 8001162:	7b7b      	ldrb	r3, [r7, #13]
 8001164:	3301      	adds	r3, #1
 8001166:	737b      	strb	r3, [r7, #13]
 8001168:	7b7b      	ldrb	r3, [r7, #13]
 800116a:	b29a      	uxth	r2, r3
 800116c:	4b0e      	ldr	r3, [pc, #56]	; (80011a8 <WriteStructuredPacket+0x104>)
 800116e:	891b      	ldrh	r3, [r3, #8]
 8001170:	429a      	cmp	r2, r3
 8001172:	d3e3      	bcc.n	800113c <WriteStructuredPacket+0x98>
	}
	leftshiftsum = sum >> 8;
 8001174:	89fb      	ldrh	r3, [r7, #14]
 8001176:	0a1b      	lsrs	r3, r3, #8
 8001178:	b29b      	uxth	r3, r3
 800117a:	b2db      	uxtb	r3, r3
 800117c:	717b      	strb	r3, [r7, #5]
	bitwiseandsum = sum & 0xFF;
 800117e:	89fb      	ldrh	r3, [r7, #14]
 8001180:	b2db      	uxtb	r3, r3
 8001182:	713b      	strb	r3, [r7, #4]
	HAL_UART_Transmit(&huart1,(&leftshiftsum),1,HAL_MAX_DELAY);
 8001184:	1d79      	adds	r1, r7, #5
 8001186:	f04f 33ff 	mov.w	r3, #4294967295
 800118a:	2201      	movs	r2, #1
 800118c:	4807      	ldr	r0, [pc, #28]	; (80011ac <WriteStructuredPacket+0x108>)
 800118e:	f002 ff4a 	bl	8004026 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1,(&bitwiseandsum),1,HAL_MAX_DELAY);
 8001192:	1d39      	adds	r1, r7, #4
 8001194:	f04f 33ff 	mov.w	r3, #4294967295
 8001198:	2201      	movs	r2, #1
 800119a:	4804      	ldr	r0, [pc, #16]	; (80011ac <WriteStructuredPacket+0x108>)
 800119c:	f002 ff43 	bl	8004026 <HAL_UART_Transmit>
}
 80011a0:	bf00      	nop
 80011a2:	3710      	adds	r7, #16
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	200001d0 	.word	0x200001d0
 80011ac:	20000128 	.word	0x20000128
 80011b0:	200001d2 	.word	0x200001d2
 80011b4:	200001d6 	.word	0x200001d6

080011b8 <GetStructuredPacket>:
	@return <code>FINGERPRINT_OK</code> on success
	@return <code>FINGERPRINT_TIMEOUT</code> or
					<code>FINGERPRINT_BADPACKET</code> on failure
 */
static uint8_t GetStructuredPacket(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
	uint8_t nReceivedBytes = 0;
 80011be:	2300      	movs	r3, #0
 80011c0:	717b      	strb	r3, [r7, #5]
	while(1)
	{
		if(RxCplt == SET)
 80011c2:	4b3e      	ldr	r3, [pc, #248]	; (80012bc <GetStructuredPacket+0x104>)
 80011c4:	781b      	ldrb	r3, [r3, #0]
 80011c6:	2b01      	cmp	r3, #1
 80011c8:	d1fb      	bne.n	80011c2 <GetStructuredPacket+0xa>
		{
			RxCplt = RESET;
 80011ca:	4b3c      	ldr	r3, [pc, #240]	; (80012bc <GetStructuredPacket+0x104>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	701a      	strb	r2, [r3, #0]
			nReceivedBytes = RxbuffCntr;
 80011d0:	4b3b      	ldr	r3, [pc, #236]	; (80012c0 <GetStructuredPacket+0x108>)
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	717b      	strb	r3, [r7, #5]
			RxbuffCntr = 0;
 80011d6:	4b3a      	ldr	r3, [pc, #232]	; (80012c0 <GetStructuredPacket+0x108>)
 80011d8:	2200      	movs	r2, #0
 80011da:	701a      	strb	r2, [r3, #0]
			break;
 80011dc:	bf00      	nop
		}
	}
	if(rxPacketBuffer[0] == (FINGERPRINT_STARTCODE >> 8))
 80011de:	4b39      	ldr	r3, [pc, #228]	; (80012c4 <GetStructuredPacket+0x10c>)
 80011e0:	781b      	ldrb	r3, [r3, #0]
 80011e2:	2bef      	cmp	r3, #239	; 0xef
 80011e4:	d106      	bne.n	80011f4 <GetStructuredPacket+0x3c>
	{
		packet.start_code = (uint16_t)rxPacketBuffer[0] << 8;
 80011e6:	4b37      	ldr	r3, [pc, #220]	; (80012c4 <GetStructuredPacket+0x10c>)
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	b29b      	uxth	r3, r3
 80011ec:	021b      	lsls	r3, r3, #8
 80011ee:	b29a      	uxth	r2, r3
 80011f0:	4b35      	ldr	r3, [pc, #212]	; (80012c8 <GetStructuredPacket+0x110>)
 80011f2:	801a      	strh	r2, [r3, #0]
	}
	packet.start_code |= rxPacketBuffer[1];
 80011f4:	4b34      	ldr	r3, [pc, #208]	; (80012c8 <GetStructuredPacket+0x110>)
 80011f6:	881a      	ldrh	r2, [r3, #0]
 80011f8:	4b32      	ldr	r3, [pc, #200]	; (80012c4 <GetStructuredPacket+0x10c>)
 80011fa:	785b      	ldrb	r3, [r3, #1]
 80011fc:	b29b      	uxth	r3, r3
 80011fe:	4313      	orrs	r3, r2
 8001200:	b29a      	uxth	r2, r3
 8001202:	4b31      	ldr	r3, [pc, #196]	; (80012c8 <GetStructuredPacket+0x110>)
 8001204:	801a      	strh	r2, [r3, #0]
	if(packet.start_code != FINGERPRINT_STARTCODE)
 8001206:	4b30      	ldr	r3, [pc, #192]	; (80012c8 <GetStructuredPacket+0x110>)
 8001208:	881b      	ldrh	r3, [r3, #0]
 800120a:	f64e 7201 	movw	r2, #61185	; 0xef01
 800120e:	4293      	cmp	r3, r2
 8001210:	d007      	beq.n	8001222 <GetStructuredPacket+0x6a>
	{
		memset(rxPacketBuffer,0,nReceivedBytes); //clear the rx packet buffer
 8001212:	797b      	ldrb	r3, [r7, #5]
 8001214:	461a      	mov	r2, r3
 8001216:	2100      	movs	r1, #0
 8001218:	482a      	ldr	r0, [pc, #168]	; (80012c4 <GetStructuredPacket+0x10c>)
 800121a:	f004 f803 	bl	8005224 <memset>
		return FINGERPRINT_BADPACKET;
 800121e:	23fe      	movs	r3, #254	; 0xfe
 8001220:	e047      	b.n	80012b2 <GetStructuredPacket+0xfa>
	}
	for(uint8_t i = 2; i <= 5; i++)
 8001222:	2302      	movs	r3, #2
 8001224:	71fb      	strb	r3, [r7, #7]
 8001226:	e00b      	b.n	8001240 <GetStructuredPacket+0x88>
	{
		packet.address[i - 2] = rxPacketBuffer[i];
 8001228:	79fa      	ldrb	r2, [r7, #7]
 800122a:	79fb      	ldrb	r3, [r7, #7]
 800122c:	3b02      	subs	r3, #2
 800122e:	4925      	ldr	r1, [pc, #148]	; (80012c4 <GetStructuredPacket+0x10c>)
 8001230:	5c89      	ldrb	r1, [r1, r2]
 8001232:	4a25      	ldr	r2, [pc, #148]	; (80012c8 <GetStructuredPacket+0x110>)
 8001234:	4413      	add	r3, r2
 8001236:	460a      	mov	r2, r1
 8001238:	709a      	strb	r2, [r3, #2]
	for(uint8_t i = 2; i <= 5; i++)
 800123a:	79fb      	ldrb	r3, [r7, #7]
 800123c:	3301      	adds	r3, #1
 800123e:	71fb      	strb	r3, [r7, #7]
 8001240:	79fb      	ldrb	r3, [r7, #7]
 8001242:	2b05      	cmp	r3, #5
 8001244:	d9f0      	bls.n	8001228 <GetStructuredPacket+0x70>
	}
	packet.type = rxPacketBuffer[6];
 8001246:	4b1f      	ldr	r3, [pc, #124]	; (80012c4 <GetStructuredPacket+0x10c>)
 8001248:	799a      	ldrb	r2, [r3, #6]
 800124a:	4b1f      	ldr	r3, [pc, #124]	; (80012c8 <GetStructuredPacket+0x110>)
 800124c:	719a      	strb	r2, [r3, #6]
	packet.length = (uint16_t)rxPacketBuffer[7] << 8;
 800124e:	4b1d      	ldr	r3, [pc, #116]	; (80012c4 <GetStructuredPacket+0x10c>)
 8001250:	79db      	ldrb	r3, [r3, #7]
 8001252:	b29b      	uxth	r3, r3
 8001254:	021b      	lsls	r3, r3, #8
 8001256:	b29a      	uxth	r2, r3
 8001258:	4b1b      	ldr	r3, [pc, #108]	; (80012c8 <GetStructuredPacket+0x110>)
 800125a:	811a      	strh	r2, [r3, #8]
	packet.length |= rxPacketBuffer[8];
 800125c:	4b1a      	ldr	r3, [pc, #104]	; (80012c8 <GetStructuredPacket+0x110>)
 800125e:	891a      	ldrh	r2, [r3, #8]
 8001260:	4b18      	ldr	r3, [pc, #96]	; (80012c4 <GetStructuredPacket+0x10c>)
 8001262:	7a1b      	ldrb	r3, [r3, #8]
 8001264:	b29b      	uxth	r3, r3
 8001266:	4313      	orrs	r3, r2
 8001268:	b29a      	uxth	r2, r3
 800126a:	4b17      	ldr	r3, [pc, #92]	; (80012c8 <GetStructuredPacket+0x110>)
 800126c:	811a      	strh	r2, [r3, #8]
	for(uint8_t i = 9; i < nReceivedBytes; i++)
 800126e:	2309      	movs	r3, #9
 8001270:	71bb      	strb	r3, [r7, #6]
 8001272:	e019      	b.n	80012a8 <GetStructuredPacket+0xf0>
	{
		packet.data[i - 9] = rxPacketBuffer[i];
 8001274:	79ba      	ldrb	r2, [r7, #6]
 8001276:	79bb      	ldrb	r3, [r7, #6]
 8001278:	3b09      	subs	r3, #9
 800127a:	4912      	ldr	r1, [pc, #72]	; (80012c4 <GetStructuredPacket+0x10c>)
 800127c:	5c89      	ldrb	r1, [r1, r2]
 800127e:	4a12      	ldr	r2, [pc, #72]	; (80012c8 <GetStructuredPacket+0x110>)
 8001280:	4413      	add	r3, r2
 8001282:	460a      	mov	r2, r1
 8001284:	729a      	strb	r2, [r3, #10]
		if((i - 8) == packet.length)
 8001286:	79bb      	ldrb	r3, [r7, #6]
 8001288:	3b08      	subs	r3, #8
 800128a:	4a0f      	ldr	r2, [pc, #60]	; (80012c8 <GetStructuredPacket+0x110>)
 800128c:	8912      	ldrh	r2, [r2, #8]
 800128e:	4293      	cmp	r3, r2
 8001290:	d107      	bne.n	80012a2 <GetStructuredPacket+0xea>
		{
			memset(rxPacketBuffer,0,nReceivedBytes); //clear the rx packet buffer
 8001292:	797b      	ldrb	r3, [r7, #5]
 8001294:	461a      	mov	r2, r3
 8001296:	2100      	movs	r1, #0
 8001298:	480a      	ldr	r0, [pc, #40]	; (80012c4 <GetStructuredPacket+0x10c>)
 800129a:	f003 ffc3 	bl	8005224 <memset>
			return FINGERPRINT_OK;
 800129e:	2300      	movs	r3, #0
 80012a0:	e007      	b.n	80012b2 <GetStructuredPacket+0xfa>
	for(uint8_t i = 9; i < nReceivedBytes; i++)
 80012a2:	79bb      	ldrb	r3, [r7, #6]
 80012a4:	3301      	adds	r3, #1
 80012a6:	71bb      	strb	r3, [r7, #6]
 80012a8:	79ba      	ldrb	r2, [r7, #6]
 80012aa:	797b      	ldrb	r3, [r7, #5]
 80012ac:	429a      	cmp	r2, r3
 80012ae:	d3e1      	bcc.n	8001274 <GetStructuredPacket+0xbc>
		}
	}
	return FINGERPRINT_BADPACKET;
 80012b0:	23fe      	movs	r3, #254	; 0xfe
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	3708      	adds	r7, #8
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	20000250 	.word	0x20000250
 80012c0:	2000024f 	.word	0x2000024f
 80012c4:	2000021c 	.word	0x2000021c
 80012c8:	200001d0 	.word	0x200001d0

080012cc <AS608_GetImage>:
	@return <code>FINGERPRINT_NOFINGER</code> if no finger detected
	@return <code>FINGERPRINT_PACKETRECIEVEERR</code> on communication error
	@return <code>FINGERPRINT_IMAGEFAIL</code> on imaging error
 */
uint8_t AS608_GetImage(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af00      	add	r7, sp, #0
	SEND_CMD_PACKET(FINGERPRINT_GETIMAGE);
 80012d2:	2301      	movs	r3, #1
 80012d4:	713b      	strb	r3, [r7, #4]
 80012d6:	1d3b      	adds	r3, r7, #4
 80012d8:	461a      	mov	r2, r3
 80012da:	2101      	movs	r1, #1
 80012dc:	2001      	movs	r0, #1
 80012de:	f7ff fe99 	bl	8001014 <PacketInit>
 80012e2:	f7ff fedf 	bl	80010a4 <WriteStructuredPacket>
 80012e6:	f7ff ff67 	bl	80011b8 <GetStructuredPacket>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <AS608_GetImage+0x28>
 80012f0:	2301      	movs	r3, #1
 80012f2:	e007      	b.n	8001304 <AS608_GetImage+0x38>
 80012f4:	4b05      	ldr	r3, [pc, #20]	; (800130c <AS608_GetImage+0x40>)
 80012f6:	799b      	ldrb	r3, [r3, #6]
 80012f8:	2b07      	cmp	r3, #7
 80012fa:	d001      	beq.n	8001300 <AS608_GetImage+0x34>
 80012fc:	2301      	movs	r3, #1
 80012fe:	e001      	b.n	8001304 <AS608_GetImage+0x38>
 8001300:	4b02      	ldr	r3, [pc, #8]	; (800130c <AS608_GetImage+0x40>)
 8001302:	7a9b      	ldrb	r3, [r3, #10]
}
 8001304:	4618      	mov	r0, r3
 8001306:	3708      	adds	r7, #8
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	200001d0 	.word	0x200001d0

08001310 <AS608_Image2Tz>:
	fingerprint features
	@return <code>FINGERPRINT_INVALIDIMAGE</code> on failure to identify
	fingerprint features
 */
uint8_t AS608_Image2Tz(uint8_t slot)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b084      	sub	sp, #16
 8001314:	af00      	add	r7, sp, #0
 8001316:	4603      	mov	r3, r0
 8001318:	71fb      	strb	r3, [r7, #7]
	SEND_CMD_PACKET(FINGERPRINT_IMAGE2TZ,slot );
 800131a:	2302      	movs	r3, #2
 800131c:	733b      	strb	r3, [r7, #12]
 800131e:	79fb      	ldrb	r3, [r7, #7]
 8001320:	737b      	strb	r3, [r7, #13]
 8001322:	f107 030c 	add.w	r3, r7, #12
 8001326:	461a      	mov	r2, r3
 8001328:	2102      	movs	r1, #2
 800132a:	2001      	movs	r0, #1
 800132c:	f7ff fe72 	bl	8001014 <PacketInit>
 8001330:	f7ff feb8 	bl	80010a4 <WriteStructuredPacket>
 8001334:	f7ff ff40 	bl	80011b8 <GetStructuredPacket>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <AS608_Image2Tz+0x32>
 800133e:	2301      	movs	r3, #1
 8001340:	e007      	b.n	8001352 <AS608_Image2Tz+0x42>
 8001342:	4b06      	ldr	r3, [pc, #24]	; (800135c <AS608_Image2Tz+0x4c>)
 8001344:	799b      	ldrb	r3, [r3, #6]
 8001346:	2b07      	cmp	r3, #7
 8001348:	d001      	beq.n	800134e <AS608_Image2Tz+0x3e>
 800134a:	2301      	movs	r3, #1
 800134c:	e001      	b.n	8001352 <AS608_Image2Tz+0x42>
 800134e:	4b03      	ldr	r3, [pc, #12]	; (800135c <AS608_Image2Tz+0x4c>)
 8001350:	7a9b      	ldrb	r3, [r3, #10]
}
 8001352:	4618      	mov	r0, r3
 8001354:	3710      	adds	r7, #16
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	200001d0 	.word	0x200001d0

08001360 <AS608_CreateModel>:
	@return <code>FINGERPRINT_OK</code> on success
	@return <code>FINGERPRINT_PACKETRECIEVEERR</code> on communication error
	@return <code>FINGERPRINT_ENROLLMISMATCH</code> on mismatch of fingerprints
 */
uint8_t AS608_CreateModel(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
	SEND_CMD_PACKET(FINGERPRINT_REGMODEL);
 8001366:	2305      	movs	r3, #5
 8001368:	713b      	strb	r3, [r7, #4]
 800136a:	1d3b      	adds	r3, r7, #4
 800136c:	461a      	mov	r2, r3
 800136e:	2101      	movs	r1, #1
 8001370:	2001      	movs	r0, #1
 8001372:	f7ff fe4f 	bl	8001014 <PacketInit>
 8001376:	f7ff fe95 	bl	80010a4 <WriteStructuredPacket>
 800137a:	f7ff ff1d 	bl	80011b8 <GetStructuredPacket>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d001      	beq.n	8001388 <AS608_CreateModel+0x28>
 8001384:	2301      	movs	r3, #1
 8001386:	e007      	b.n	8001398 <AS608_CreateModel+0x38>
 8001388:	4b05      	ldr	r3, [pc, #20]	; (80013a0 <AS608_CreateModel+0x40>)
 800138a:	799b      	ldrb	r3, [r3, #6]
 800138c:	2b07      	cmp	r3, #7
 800138e:	d001      	beq.n	8001394 <AS608_CreateModel+0x34>
 8001390:	2301      	movs	r3, #1
 8001392:	e001      	b.n	8001398 <AS608_CreateModel+0x38>
 8001394:	4b02      	ldr	r3, [pc, #8]	; (80013a0 <AS608_CreateModel+0x40>)
 8001396:	7a9b      	ldrb	r3, [r3, #10]
}
 8001398:	4618      	mov	r0, r3
 800139a:	3708      	adds	r7, #8
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	200001d0 	.word	0x200001d0

080013a4 <AS608_EmptyDatabase>:
	@return <code>FINGERPRINT_FLASHERR</code> if the model couldn't be written
	to flash memory
	@return <code>FINGERPRINT_PACKETRECIEVEERR</code> on communication error
 */
uint8_t AS608_EmptyDatabase(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0
	SEND_CMD_PACKET(FINGERPRINT_EMPTY);
 80013aa:	230d      	movs	r3, #13
 80013ac:	713b      	strb	r3, [r7, #4]
 80013ae:	1d3b      	adds	r3, r7, #4
 80013b0:	461a      	mov	r2, r3
 80013b2:	2101      	movs	r1, #1
 80013b4:	2001      	movs	r0, #1
 80013b6:	f7ff fe2d 	bl	8001014 <PacketInit>
 80013ba:	f7ff fe73 	bl	80010a4 <WriteStructuredPacket>
 80013be:	f7ff fefb 	bl	80011b8 <GetStructuredPacket>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d001      	beq.n	80013cc <AS608_EmptyDatabase+0x28>
 80013c8:	2301      	movs	r3, #1
 80013ca:	e007      	b.n	80013dc <AS608_EmptyDatabase+0x38>
 80013cc:	4b05      	ldr	r3, [pc, #20]	; (80013e4 <AS608_EmptyDatabase+0x40>)
 80013ce:	799b      	ldrb	r3, [r3, #6]
 80013d0:	2b07      	cmp	r3, #7
 80013d2:	d001      	beq.n	80013d8 <AS608_EmptyDatabase+0x34>
 80013d4:	2301      	movs	r3, #1
 80013d6:	e001      	b.n	80013dc <AS608_EmptyDatabase+0x38>
 80013d8:	4b02      	ldr	r3, [pc, #8]	; (80013e4 <AS608_EmptyDatabase+0x40>)
 80013da:	7a9b      	ldrb	r3, [r3, #10]
}
 80013dc:	4618      	mov	r0, r3
 80013de:	3708      	adds	r7, #8
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	200001d0 	.word	0x200001d0

080013e8 <AS608_StoreModel>:
	to flash memory
	@return <code>FINGERPRINT_PACKETRECIEVEERR</code> on communication error
 */

uint8_t AS608_StoreModel(uint16_t id)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b084      	sub	sp, #16
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	4603      	mov	r3, r0
 80013f0:	80fb      	strh	r3, [r7, #6]
	SEND_CMD_PACKET(FINGERPRINT_STORE, 0x01, (uint8_t)(id >> 8), (uint8_t)(id & 0xFF));
 80013f2:	2306      	movs	r3, #6
 80013f4:	733b      	strb	r3, [r7, #12]
 80013f6:	2301      	movs	r3, #1
 80013f8:	737b      	strb	r3, [r7, #13]
 80013fa:	88fb      	ldrh	r3, [r7, #6]
 80013fc:	0a1b      	lsrs	r3, r3, #8
 80013fe:	b29b      	uxth	r3, r3
 8001400:	b2db      	uxtb	r3, r3
 8001402:	73bb      	strb	r3, [r7, #14]
 8001404:	88fb      	ldrh	r3, [r7, #6]
 8001406:	b2db      	uxtb	r3, r3
 8001408:	73fb      	strb	r3, [r7, #15]
 800140a:	f107 030c 	add.w	r3, r7, #12
 800140e:	461a      	mov	r2, r3
 8001410:	2104      	movs	r1, #4
 8001412:	2001      	movs	r0, #1
 8001414:	f7ff fdfe 	bl	8001014 <PacketInit>
 8001418:	f7ff fe44 	bl	80010a4 <WriteStructuredPacket>
 800141c:	f7ff fecc 	bl	80011b8 <GetStructuredPacket>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <AS608_StoreModel+0x42>
 8001426:	2301      	movs	r3, #1
 8001428:	e007      	b.n	800143a <AS608_StoreModel+0x52>
 800142a:	4b06      	ldr	r3, [pc, #24]	; (8001444 <AS608_StoreModel+0x5c>)
 800142c:	799b      	ldrb	r3, [r3, #6]
 800142e:	2b07      	cmp	r3, #7
 8001430:	d001      	beq.n	8001436 <AS608_StoreModel+0x4e>
 8001432:	2301      	movs	r3, #1
 8001434:	e001      	b.n	800143a <AS608_StoreModel+0x52>
 8001436:	4b03      	ldr	r3, [pc, #12]	; (8001444 <AS608_StoreModel+0x5c>)
 8001438:	7a9b      	ldrb	r3, [r3, #10]
}
 800143a:	4618      	mov	r0, r3
 800143c:	3710      	adds	r7, #16
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	200001d0 	.word	0x200001d0

08001448 <AS608_DeleteModel>:
	@return <code>FINGERPRINT_FLASHERR</code> if the model couldn't be written
	to flash memory
	@return <code>FINGERPRINT_PACKETRECIEVEERR</code> on communication error
 */
uint8_t AS608_DeleteModel(uint16_t id)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b084      	sub	sp, #16
 800144c:	af00      	add	r7, sp, #0
 800144e:	4603      	mov	r3, r0
 8001450:	80fb      	strh	r3, [r7, #6]
	SEND_CMD_PACKET(FINGERPRINT_DELETE, (uint8_t)(id >> 8), (uint8_t)(id & 0xFF), 0x00, 0x01);
 8001452:	230c      	movs	r3, #12
 8001454:	723b      	strb	r3, [r7, #8]
 8001456:	88fb      	ldrh	r3, [r7, #6]
 8001458:	0a1b      	lsrs	r3, r3, #8
 800145a:	b29b      	uxth	r3, r3
 800145c:	b2db      	uxtb	r3, r3
 800145e:	727b      	strb	r3, [r7, #9]
 8001460:	88fb      	ldrh	r3, [r7, #6]
 8001462:	b2db      	uxtb	r3, r3
 8001464:	72bb      	strb	r3, [r7, #10]
 8001466:	2300      	movs	r3, #0
 8001468:	72fb      	strb	r3, [r7, #11]
 800146a:	2301      	movs	r3, #1
 800146c:	733b      	strb	r3, [r7, #12]
 800146e:	f107 0308 	add.w	r3, r7, #8
 8001472:	461a      	mov	r2, r3
 8001474:	2105      	movs	r1, #5
 8001476:	2001      	movs	r0, #1
 8001478:	f7ff fdcc 	bl	8001014 <PacketInit>
 800147c:	f7ff fe12 	bl	80010a4 <WriteStructuredPacket>
 8001480:	f7ff fe9a 	bl	80011b8 <GetStructuredPacket>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <AS608_DeleteModel+0x46>
 800148a:	2301      	movs	r3, #1
 800148c:	e007      	b.n	800149e <AS608_DeleteModel+0x56>
 800148e:	4b06      	ldr	r3, [pc, #24]	; (80014a8 <AS608_DeleteModel+0x60>)
 8001490:	799b      	ldrb	r3, [r3, #6]
 8001492:	2b07      	cmp	r3, #7
 8001494:	d001      	beq.n	800149a <AS608_DeleteModel+0x52>
 8001496:	2301      	movs	r3, #1
 8001498:	e001      	b.n	800149e <AS608_DeleteModel+0x56>
 800149a:	4b03      	ldr	r3, [pc, #12]	; (80014a8 <AS608_DeleteModel+0x60>)
 800149c:	7a9b      	ldrb	r3, [r3, #10]

}
 800149e:	4618      	mov	r0, r3
 80014a0:	3710      	adds	r7, #16
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	200001d0 	.word	0x200001d0

080014ac <AS608_FingerFastSearch>:
	@return <code>FINGERPRINT_OK</code> on fingerprint match success
	@return <code>FINGERPRINT_NOTFOUND</code> no match made
	@return <code>FINGERPRINT_PACKETRECIEVEERR</code> on communication error
 */
uint8_t AS608_FingerFastSearch(int *ptr)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b084      	sub	sp, #16
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
	GET_CMD_PACKET(FINGERPRINT_HISPEEDSEARCH, 0x01, 0x00, 0x00, 0x00, 0xA3);
 80014b4:	4a14      	ldr	r2, [pc, #80]	; (8001508 <AS608_FingerFastSearch+0x5c>)
 80014b6:	f107 0308 	add.w	r3, r7, #8
 80014ba:	e892 0003 	ldmia.w	r2, {r0, r1}
 80014be:	6018      	str	r0, [r3, #0]
 80014c0:	3304      	adds	r3, #4
 80014c2:	8019      	strh	r1, [r3, #0]
 80014c4:	f107 0308 	add.w	r3, r7, #8
 80014c8:	461a      	mov	r2, r3
 80014ca:	2106      	movs	r1, #6
 80014cc:	2001      	movs	r0, #1
 80014ce:	f7ff fda1 	bl	8001014 <PacketInit>
 80014d2:	f7ff fde7 	bl	80010a4 <WriteStructuredPacket>
 80014d6:	f7ff fe6f 	bl	80011b8 <GetStructuredPacket>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d001      	beq.n	80014e4 <AS608_FingerFastSearch+0x38>
 80014e0:	2301      	movs	r3, #1
 80014e2:	e00c      	b.n	80014fe <AS608_FingerFastSearch+0x52>
 80014e4:	4b09      	ldr	r3, [pc, #36]	; (800150c <AS608_FingerFastSearch+0x60>)
 80014e6:	799b      	ldrb	r3, [r3, #6]
 80014e8:	2b07      	cmp	r3, #7
 80014ea:	d001      	beq.n	80014f0 <AS608_FingerFastSearch+0x44>
 80014ec:	2301      	movs	r3, #1
 80014ee:	e006      	b.n	80014fe <AS608_FingerFastSearch+0x52>
	//	if(packet.data[0]==0x00)
	//	{
	//		printf("finger found with id=%d\n",packet.data[2]);
	//
	//	}
	*ptr=packet.data[2];
 80014f0:	4b06      	ldr	r3, [pc, #24]	; (800150c <AS608_FingerFastSearch+0x60>)
 80014f2:	7b1b      	ldrb	r3, [r3, #12]
 80014f4:	461a      	mov	r2, r3
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	601a      	str	r2, [r3, #0]
	return packet.data[0];
 80014fa:	4b04      	ldr	r3, [pc, #16]	; (800150c <AS608_FingerFastSearch+0x60>)
 80014fc:	7a9b      	ldrb	r3, [r3, #10]
}
 80014fe:	4618      	mov	r0, r3
 8001500:	3710      	adds	r7, #16
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	08006bf0 	.word	0x08006bf0
 800150c:	200001d0 	.word	0x200001d0

08001510 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
	txCplt = SET;
 8001518:	4b04      	ldr	r3, [pc, #16]	; (800152c <HAL_UART_TxCpltCallback+0x1c>)
 800151a:	2201      	movs	r2, #1
 800151c:	701a      	strb	r2, [r3, #0]
}
 800151e:	bf00      	nop
 8001520:	370c      	adds	r7, #12
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr
 800152a:	bf00      	nop
 800152c:	20000000 	.word	0x20000000

08001530 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a26      	ldr	r2, [pc, #152]	; (80015d8 <HAL_UART_RxCpltCallback+0xa8>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d11c      	bne.n	800157c <HAL_UART_RxCpltCallback+0x4c>
	{
		printf("%c",Rxbuff);
 8001542:	4b26      	ldr	r3, [pc, #152]	; (80015dc <HAL_UART_RxCpltCallback+0xac>)
 8001544:	781b      	ldrb	r3, [r3, #0]
 8001546:	4618      	mov	r0, r3
 8001548:	f003 fe8c 	bl	8005264 <putchar>

		HAL_UART_Receive_IT(&huart1, (uint8_t *)&Rxbuff, sizeof(Rxbuff));//, HAL_MAX_DELAY);//(&huart1,(uint8_t *)&Rxbuff,1);
 800154c:	2201      	movs	r2, #1
 800154e:	4923      	ldr	r1, [pc, #140]	; (80015dc <HAL_UART_RxCpltCallback+0xac>)
 8001550:	4823      	ldr	r0, [pc, #140]	; (80015e0 <HAL_UART_RxCpltCallback+0xb0>)
 8001552:	f002 fe9c 	bl	800428e <HAL_UART_Receive_IT>
		rxPacketBuffer[RxbuffCntr++] = Rxbuff;
 8001556:	4b23      	ldr	r3, [pc, #140]	; (80015e4 <HAL_UART_RxCpltCallback+0xb4>)
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	1c5a      	adds	r2, r3, #1
 800155c:	b2d1      	uxtb	r1, r2
 800155e:	4a21      	ldr	r2, [pc, #132]	; (80015e4 <HAL_UART_RxCpltCallback+0xb4>)
 8001560:	7011      	strb	r1, [r2, #0]
 8001562:	461a      	mov	r2, r3
 8001564:	4b1d      	ldr	r3, [pc, #116]	; (80015dc <HAL_UART_RxCpltCallback+0xac>)
 8001566:	7819      	ldrb	r1, [r3, #0]
 8001568:	4b1f      	ldr	r3, [pc, #124]	; (80015e8 <HAL_UART_RxCpltCallback+0xb8>)
 800156a:	5499      	strb	r1, [r3, r2]
		if(RxbuffCntr >= 12)
 800156c:	4b1d      	ldr	r3, [pc, #116]	; (80015e4 <HAL_UART_RxCpltCallback+0xb4>)
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	2b0b      	cmp	r3, #11
 8001572:	d92c      	bls.n	80015ce <HAL_UART_RxCpltCallback+0x9e>
		{
			RxCplt = SET;
 8001574:	4b1d      	ldr	r3, [pc, #116]	; (80015ec <HAL_UART_RxCpltCallback+0xbc>)
 8001576:	2201      	movs	r2, #1
 8001578:	701a      	strb	r2, [r3, #0]
		else if (Rxbuff == 'D'){
			keypressed = 'D';
			//			  AS608_EmptyDatabase();
		}
	}
}
 800157a:	e028      	b.n	80015ce <HAL_UART_RxCpltCallback+0x9e>
	else if(huart->Instance==USART2)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a1b      	ldr	r2, [pc, #108]	; (80015f0 <HAL_UART_RxCpltCallback+0xc0>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d123      	bne.n	80015ce <HAL_UART_RxCpltCallback+0x9e>
		HAL_UART_Receive_IT(&huart2, (uint8_t *)&Rxbuff, sizeof(Rxbuff));
 8001586:	2201      	movs	r2, #1
 8001588:	4914      	ldr	r1, [pc, #80]	; (80015dc <HAL_UART_RxCpltCallback+0xac>)
 800158a:	481a      	ldr	r0, [pc, #104]	; (80015f4 <HAL_UART_RxCpltCallback+0xc4>)
 800158c:	f002 fe7f 	bl	800428e <HAL_UART_Receive_IT>
		if (Rxbuff == 'A')
 8001590:	4b12      	ldr	r3, [pc, #72]	; (80015dc <HAL_UART_RxCpltCallback+0xac>)
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	2b41      	cmp	r3, #65	; 0x41
 8001596:	d103      	bne.n	80015a0 <HAL_UART_RxCpltCallback+0x70>
			keypressed = 'A';
 8001598:	4b17      	ldr	r3, [pc, #92]	; (80015f8 <HAL_UART_RxCpltCallback+0xc8>)
 800159a:	2241      	movs	r2, #65	; 0x41
 800159c:	701a      	strb	r2, [r3, #0]
}
 800159e:	e016      	b.n	80015ce <HAL_UART_RxCpltCallback+0x9e>
		else if (Rxbuff == 'B'){
 80015a0:	4b0e      	ldr	r3, [pc, #56]	; (80015dc <HAL_UART_RxCpltCallback+0xac>)
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	2b42      	cmp	r3, #66	; 0x42
 80015a6:	d103      	bne.n	80015b0 <HAL_UART_RxCpltCallback+0x80>
			keypressed = 'B';
 80015a8:	4b13      	ldr	r3, [pc, #76]	; (80015f8 <HAL_UART_RxCpltCallback+0xc8>)
 80015aa:	2242      	movs	r2, #66	; 0x42
 80015ac:	701a      	strb	r2, [r3, #0]
}
 80015ae:	e00e      	b.n	80015ce <HAL_UART_RxCpltCallback+0x9e>
		else if (Rxbuff == 'C'){
 80015b0:	4b0a      	ldr	r3, [pc, #40]	; (80015dc <HAL_UART_RxCpltCallback+0xac>)
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	2b43      	cmp	r3, #67	; 0x43
 80015b6:	d103      	bne.n	80015c0 <HAL_UART_RxCpltCallback+0x90>
			keypressed = 'C';
 80015b8:	4b0f      	ldr	r3, [pc, #60]	; (80015f8 <HAL_UART_RxCpltCallback+0xc8>)
 80015ba:	2243      	movs	r2, #67	; 0x43
 80015bc:	701a      	strb	r2, [r3, #0]
}
 80015be:	e006      	b.n	80015ce <HAL_UART_RxCpltCallback+0x9e>
		else if (Rxbuff == 'D'){
 80015c0:	4b06      	ldr	r3, [pc, #24]	; (80015dc <HAL_UART_RxCpltCallback+0xac>)
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	2b44      	cmp	r3, #68	; 0x44
 80015c6:	d102      	bne.n	80015ce <HAL_UART_RxCpltCallback+0x9e>
			keypressed = 'D';
 80015c8:	4b0b      	ldr	r3, [pc, #44]	; (80015f8 <HAL_UART_RxCpltCallback+0xc8>)
 80015ca:	2244      	movs	r2, #68	; 0x44
 80015cc:	701a      	strb	r2, [r3, #0]
}
 80015ce:	bf00      	nop
 80015d0:	3708      	adds	r7, #8
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	40011000 	.word	0x40011000
 80015dc:	2000024e 	.word	0x2000024e
 80015e0:	20000128 	.word	0x20000128
 80015e4:	2000024f 	.word	0x2000024f
 80015e8:	2000021c 	.word	0x2000021c
 80015ec:	20000250 	.word	0x20000250
 80015f0:	40004400 	.word	0x40004400
 80015f4:	2000016c 	.word	0x2000016c
 80015f8:	20000251 	.word	0x20000251

080015fc <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b082      	sub	sp, #8
 8001600:	af00      	add	r7, sp, #0
 8001602:	4603      	mov	r3, r0
 8001604:	80fb      	strh	r3, [r7, #6]
	currentMillis = HAL_GetTick();
 8001606:	f000 fdeb 	bl	80021e0 <HAL_GetTick>
 800160a:	4603      	mov	r3, r0
 800160c:	4aa6      	ldr	r2, [pc, #664]	; (80018a8 <HAL_GPIO_EXTI_Callback+0x2ac>)
 800160e:	6013      	str	r3, [r2, #0]
	if (currentMillis - previousMillis > 1000) {
 8001610:	4ba5      	ldr	r3, [pc, #660]	; (80018a8 <HAL_GPIO_EXTI_Callback+0x2ac>)
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	4ba5      	ldr	r3, [pc, #660]	; (80018ac <HAL_GPIO_EXTI_Callback+0x2b0>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	1ad3      	subs	r3, r2, r3
 800161a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800161e:	f240 8182 	bls.w	8001926 <HAL_GPIO_EXTI_Callback+0x32a>
		/*Configure GPIO pins : PB6 PB7 PB8 PB9 to GPIO_INPUT*/
		GPIO_InitStructPrivate.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001622:	4ba3      	ldr	r3, [pc, #652]	; (80018b0 <HAL_GPIO_EXTI_Callback+0x2b4>)
 8001624:	f44f 7270 	mov.w	r2, #960	; 0x3c0
 8001628:	601a      	str	r2, [r3, #0]
		GPIO_InitStructPrivate.Mode = GPIO_MODE_INPUT;
 800162a:	4ba1      	ldr	r3, [pc, #644]	; (80018b0 <HAL_GPIO_EXTI_Callback+0x2b4>)
 800162c:	2200      	movs	r2, #0
 800162e:	605a      	str	r2, [r3, #4]
		GPIO_InitStructPrivate.Pull = GPIO_NOPULL;
 8001630:	4b9f      	ldr	r3, [pc, #636]	; (80018b0 <HAL_GPIO_EXTI_Callback+0x2b4>)
 8001632:	2200      	movs	r2, #0
 8001634:	609a      	str	r2, [r3, #8]
		GPIO_InitStructPrivate.Speed = GPIO_SPEED_FREQ_LOW;
 8001636:	4b9e      	ldr	r3, [pc, #632]	; (80018b0 <HAL_GPIO_EXTI_Callback+0x2b4>)
 8001638:	2200      	movs	r2, #0
 800163a:	60da      	str	r2, [r3, #12]
		HAL_GPIO_Init(GPIOB, &GPIO_InitStructPrivate);
 800163c:	499c      	ldr	r1, [pc, #624]	; (80018b0 <HAL_GPIO_EXTI_Callback+0x2b4>)
 800163e:	489d      	ldr	r0, [pc, #628]	; (80018b4 <HAL_GPIO_EXTI_Callback+0x2b8>)
 8001640:	f000 ffa2 	bl	8002588 <HAL_GPIO_Init>

		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 8001644:	2201      	movs	r2, #1
 8001646:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800164a:	489b      	ldr	r0, [pc, #620]	; (80018b8 <HAL_GPIO_EXTI_Callback+0x2bc>)
 800164c:	f001 f938 	bl	80028c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 0);
 8001650:	2200      	movs	r2, #0
 8001652:	2108      	movs	r1, #8
 8001654:	4897      	ldr	r0, [pc, #604]	; (80018b4 <HAL_GPIO_EXTI_Callback+0x2b8>)
 8001656:	f001 f933 	bl	80028c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);
 800165a:	2200      	movs	r2, #0
 800165c:	2110      	movs	r1, #16
 800165e:	4895      	ldr	r0, [pc, #596]	; (80018b4 <HAL_GPIO_EXTI_Callback+0x2b8>)
 8001660:	f001 f92e 	bl	80028c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0);
 8001664:	2200      	movs	r2, #0
 8001666:	2120      	movs	r1, #32
 8001668:	4892      	ldr	r0, [pc, #584]	; (80018b4 <HAL_GPIO_EXTI_Callback+0x2b8>)
 800166a:	f001 f929 	bl	80028c0 <HAL_GPIO_WritePin>
		if(GPIO_Pin == GPIO_PIN_6 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6))
 800166e:	88fb      	ldrh	r3, [r7, #6]
 8001670:	2b40      	cmp	r3, #64	; 0x40
 8001672:	d10a      	bne.n	800168a <HAL_GPIO_EXTI_Callback+0x8e>
 8001674:	2140      	movs	r1, #64	; 0x40
 8001676:	488f      	ldr	r0, [pc, #572]	; (80018b4 <HAL_GPIO_EXTI_Callback+0x2b8>)
 8001678:	f001 f90a 	bl	8002890 <HAL_GPIO_ReadPin>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d003      	beq.n	800168a <HAL_GPIO_EXTI_Callback+0x8e>
		{
			keyPressed = 49; //ASCII value of D
 8001682:	4b8e      	ldr	r3, [pc, #568]	; (80018bc <HAL_GPIO_EXTI_Callback+0x2c0>)
 8001684:	2231      	movs	r2, #49	; 0x31
 8001686:	701a      	strb	r2, [r3, #0]
 8001688:	e02c      	b.n	80016e4 <HAL_GPIO_EXTI_Callback+0xe8>
		}
		else if(GPIO_Pin == GPIO_PIN_7 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7))
 800168a:	88fb      	ldrh	r3, [r7, #6]
 800168c:	2b80      	cmp	r3, #128	; 0x80
 800168e:	d10a      	bne.n	80016a6 <HAL_GPIO_EXTI_Callback+0xaa>
 8001690:	2180      	movs	r1, #128	; 0x80
 8001692:	4888      	ldr	r0, [pc, #544]	; (80018b4 <HAL_GPIO_EXTI_Callback+0x2b8>)
 8001694:	f001 f8fc 	bl	8002890 <HAL_GPIO_ReadPin>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d003      	beq.n	80016a6 <HAL_GPIO_EXTI_Callback+0xaa>
		{
			keyPressed = 50; //ASCII value of C
 800169e:	4b87      	ldr	r3, [pc, #540]	; (80018bc <HAL_GPIO_EXTI_Callback+0x2c0>)
 80016a0:	2232      	movs	r2, #50	; 0x32
 80016a2:	701a      	strb	r2, [r3, #0]
 80016a4:	e01e      	b.n	80016e4 <HAL_GPIO_EXTI_Callback+0xe8>
		}
		else if(GPIO_Pin == GPIO_PIN_8 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8))
 80016a6:	88fb      	ldrh	r3, [r7, #6]
 80016a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80016ac:	d10b      	bne.n	80016c6 <HAL_GPIO_EXTI_Callback+0xca>
 80016ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016b2:	4880      	ldr	r0, [pc, #512]	; (80018b4 <HAL_GPIO_EXTI_Callback+0x2b8>)
 80016b4:	f001 f8ec 	bl	8002890 <HAL_GPIO_ReadPin>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d003      	beq.n	80016c6 <HAL_GPIO_EXTI_Callback+0xca>
		{
			keyPressed = 51; //ASCII value of B
 80016be:	4b7f      	ldr	r3, [pc, #508]	; (80018bc <HAL_GPIO_EXTI_Callback+0x2c0>)
 80016c0:	2233      	movs	r2, #51	; 0x33
 80016c2:	701a      	strb	r2, [r3, #0]
 80016c4:	e00e      	b.n	80016e4 <HAL_GPIO_EXTI_Callback+0xe8>
		}
		else if(GPIO_Pin == GPIO_PIN_9 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9))
 80016c6:	88fb      	ldrh	r3, [r7, #6]
 80016c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80016cc:	d10a      	bne.n	80016e4 <HAL_GPIO_EXTI_Callback+0xe8>
 80016ce:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016d2:	4878      	ldr	r0, [pc, #480]	; (80018b4 <HAL_GPIO_EXTI_Callback+0x2b8>)
 80016d4:	f001 f8dc 	bl	8002890 <HAL_GPIO_ReadPin>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d002      	beq.n	80016e4 <HAL_GPIO_EXTI_Callback+0xe8>
		{
			keyPressed = 65; //ASCII value of A
 80016de:	4b77      	ldr	r3, [pc, #476]	; (80018bc <HAL_GPIO_EXTI_Callback+0x2c0>)
 80016e0:	2241      	movs	r2, #65	; 0x41
 80016e2:	701a      	strb	r2, [r3, #0]
		}

		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 80016e4:	2200      	movs	r2, #0
 80016e6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016ea:	4873      	ldr	r0, [pc, #460]	; (80018b8 <HAL_GPIO_EXTI_Callback+0x2bc>)
 80016ec:	f001 f8e8 	bl	80028c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 1);
 80016f0:	2201      	movs	r2, #1
 80016f2:	2108      	movs	r1, #8
 80016f4:	486f      	ldr	r0, [pc, #444]	; (80018b4 <HAL_GPIO_EXTI_Callback+0x2b8>)
 80016f6:	f001 f8e3 	bl	80028c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);
 80016fa:	2200      	movs	r2, #0
 80016fc:	2110      	movs	r1, #16
 80016fe:	486d      	ldr	r0, [pc, #436]	; (80018b4 <HAL_GPIO_EXTI_Callback+0x2b8>)
 8001700:	f001 f8de 	bl	80028c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0);
 8001704:	2200      	movs	r2, #0
 8001706:	2120      	movs	r1, #32
 8001708:	486a      	ldr	r0, [pc, #424]	; (80018b4 <HAL_GPIO_EXTI_Callback+0x2b8>)
 800170a:	f001 f8d9 	bl	80028c0 <HAL_GPIO_WritePin>
		if(GPIO_Pin == GPIO_PIN_6 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6))
 800170e:	88fb      	ldrh	r3, [r7, #6]
 8001710:	2b40      	cmp	r3, #64	; 0x40
 8001712:	d10a      	bne.n	800172a <HAL_GPIO_EXTI_Callback+0x12e>
 8001714:	2140      	movs	r1, #64	; 0x40
 8001716:	4867      	ldr	r0, [pc, #412]	; (80018b4 <HAL_GPIO_EXTI_Callback+0x2b8>)
 8001718:	f001 f8ba 	bl	8002890 <HAL_GPIO_ReadPin>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d003      	beq.n	800172a <HAL_GPIO_EXTI_Callback+0x12e>
		{
			keyPressed = 52; //ASCII value of #
 8001722:	4b66      	ldr	r3, [pc, #408]	; (80018bc <HAL_GPIO_EXTI_Callback+0x2c0>)
 8001724:	2234      	movs	r2, #52	; 0x34
 8001726:	701a      	strb	r2, [r3, #0]
 8001728:	e02c      	b.n	8001784 <HAL_GPIO_EXTI_Callback+0x188>
		}
		else if(GPIO_Pin == GPIO_PIN_7 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7))
 800172a:	88fb      	ldrh	r3, [r7, #6]
 800172c:	2b80      	cmp	r3, #128	; 0x80
 800172e:	d10a      	bne.n	8001746 <HAL_GPIO_EXTI_Callback+0x14a>
 8001730:	2180      	movs	r1, #128	; 0x80
 8001732:	4860      	ldr	r0, [pc, #384]	; (80018b4 <HAL_GPIO_EXTI_Callback+0x2b8>)
 8001734:	f001 f8ac 	bl	8002890 <HAL_GPIO_ReadPin>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d003      	beq.n	8001746 <HAL_GPIO_EXTI_Callback+0x14a>
		{
			keyPressed = 53; //ASCII value of 9
 800173e:	4b5f      	ldr	r3, [pc, #380]	; (80018bc <HAL_GPIO_EXTI_Callback+0x2c0>)
 8001740:	2235      	movs	r2, #53	; 0x35
 8001742:	701a      	strb	r2, [r3, #0]
 8001744:	e01e      	b.n	8001784 <HAL_GPIO_EXTI_Callback+0x188>
		}
		else if(GPIO_Pin == GPIO_PIN_8 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8))
 8001746:	88fb      	ldrh	r3, [r7, #6]
 8001748:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800174c:	d10b      	bne.n	8001766 <HAL_GPIO_EXTI_Callback+0x16a>
 800174e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001752:	4858      	ldr	r0, [pc, #352]	; (80018b4 <HAL_GPIO_EXTI_Callback+0x2b8>)
 8001754:	f001 f89c 	bl	8002890 <HAL_GPIO_ReadPin>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d003      	beq.n	8001766 <HAL_GPIO_EXTI_Callback+0x16a>
		{
			keyPressed = 54; //ASCII value of 6
 800175e:	4b57      	ldr	r3, [pc, #348]	; (80018bc <HAL_GPIO_EXTI_Callback+0x2c0>)
 8001760:	2236      	movs	r2, #54	; 0x36
 8001762:	701a      	strb	r2, [r3, #0]
 8001764:	e00e      	b.n	8001784 <HAL_GPIO_EXTI_Callback+0x188>
		}
		else if(GPIO_Pin == GPIO_PIN_9 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9))
 8001766:	88fb      	ldrh	r3, [r7, #6]
 8001768:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800176c:	d10a      	bne.n	8001784 <HAL_GPIO_EXTI_Callback+0x188>
 800176e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001772:	4850      	ldr	r0, [pc, #320]	; (80018b4 <HAL_GPIO_EXTI_Callback+0x2b8>)
 8001774:	f001 f88c 	bl	8002890 <HAL_GPIO_ReadPin>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d002      	beq.n	8001784 <HAL_GPIO_EXTI_Callback+0x188>
		{
			keyPressed = 66; //ASCII value of 3
 800177e:	4b4f      	ldr	r3, [pc, #316]	; (80018bc <HAL_GPIO_EXTI_Callback+0x2c0>)
 8001780:	2242      	movs	r2, #66	; 0x42
 8001782:	701a      	strb	r2, [r3, #0]
		}

		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 8001784:	2200      	movs	r2, #0
 8001786:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800178a:	484b      	ldr	r0, [pc, #300]	; (80018b8 <HAL_GPIO_EXTI_Callback+0x2bc>)
 800178c:	f001 f898 	bl	80028c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 0);
 8001790:	2200      	movs	r2, #0
 8001792:	2108      	movs	r1, #8
 8001794:	4847      	ldr	r0, [pc, #284]	; (80018b4 <HAL_GPIO_EXTI_Callback+0x2b8>)
 8001796:	f001 f893 	bl	80028c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1);
 800179a:	2201      	movs	r2, #1
 800179c:	2110      	movs	r1, #16
 800179e:	4845      	ldr	r0, [pc, #276]	; (80018b4 <HAL_GPIO_EXTI_Callback+0x2b8>)
 80017a0:	f001 f88e 	bl	80028c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0);
 80017a4:	2200      	movs	r2, #0
 80017a6:	2120      	movs	r1, #32
 80017a8:	4842      	ldr	r0, [pc, #264]	; (80018b4 <HAL_GPIO_EXTI_Callback+0x2b8>)
 80017aa:	f001 f889 	bl	80028c0 <HAL_GPIO_WritePin>
		if(GPIO_Pin == GPIO_PIN_6 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6))
 80017ae:	88fb      	ldrh	r3, [r7, #6]
 80017b0:	2b40      	cmp	r3, #64	; 0x40
 80017b2:	d10a      	bne.n	80017ca <HAL_GPIO_EXTI_Callback+0x1ce>
 80017b4:	2140      	movs	r1, #64	; 0x40
 80017b6:	483f      	ldr	r0, [pc, #252]	; (80018b4 <HAL_GPIO_EXTI_Callback+0x2b8>)
 80017b8:	f001 f86a 	bl	8002890 <HAL_GPIO_ReadPin>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d003      	beq.n	80017ca <HAL_GPIO_EXTI_Callback+0x1ce>
		{
			keyPressed = 55; //ASCII value of 0
 80017c2:	4b3e      	ldr	r3, [pc, #248]	; (80018bc <HAL_GPIO_EXTI_Callback+0x2c0>)
 80017c4:	2237      	movs	r2, #55	; 0x37
 80017c6:	701a      	strb	r2, [r3, #0]
 80017c8:	e02c      	b.n	8001824 <HAL_GPIO_EXTI_Callback+0x228>
		}
		else if(GPIO_Pin == GPIO_PIN_7 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7))
 80017ca:	88fb      	ldrh	r3, [r7, #6]
 80017cc:	2b80      	cmp	r3, #128	; 0x80
 80017ce:	d10a      	bne.n	80017e6 <HAL_GPIO_EXTI_Callback+0x1ea>
 80017d0:	2180      	movs	r1, #128	; 0x80
 80017d2:	4838      	ldr	r0, [pc, #224]	; (80018b4 <HAL_GPIO_EXTI_Callback+0x2b8>)
 80017d4:	f001 f85c 	bl	8002890 <HAL_GPIO_ReadPin>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d003      	beq.n	80017e6 <HAL_GPIO_EXTI_Callback+0x1ea>
		{
			keyPressed = 56; //ASCII value of 8
 80017de:	4b37      	ldr	r3, [pc, #220]	; (80018bc <HAL_GPIO_EXTI_Callback+0x2c0>)
 80017e0:	2238      	movs	r2, #56	; 0x38
 80017e2:	701a      	strb	r2, [r3, #0]
 80017e4:	e01e      	b.n	8001824 <HAL_GPIO_EXTI_Callback+0x228>
		}
		else if(GPIO_Pin == GPIO_PIN_8 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8))
 80017e6:	88fb      	ldrh	r3, [r7, #6]
 80017e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80017ec:	d10b      	bne.n	8001806 <HAL_GPIO_EXTI_Callback+0x20a>
 80017ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017f2:	4830      	ldr	r0, [pc, #192]	; (80018b4 <HAL_GPIO_EXTI_Callback+0x2b8>)
 80017f4:	f001 f84c 	bl	8002890 <HAL_GPIO_ReadPin>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d003      	beq.n	8001806 <HAL_GPIO_EXTI_Callback+0x20a>
		{
			keyPressed = 57; //ASCII value of 5
 80017fe:	4b2f      	ldr	r3, [pc, #188]	; (80018bc <HAL_GPIO_EXTI_Callback+0x2c0>)
 8001800:	2239      	movs	r2, #57	; 0x39
 8001802:	701a      	strb	r2, [r3, #0]
 8001804:	e00e      	b.n	8001824 <HAL_GPIO_EXTI_Callback+0x228>
		}
		else if(GPIO_Pin == GPIO_PIN_9 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9))
 8001806:	88fb      	ldrh	r3, [r7, #6]
 8001808:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800180c:	d10a      	bne.n	8001824 <HAL_GPIO_EXTI_Callback+0x228>
 800180e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001812:	4828      	ldr	r0, [pc, #160]	; (80018b4 <HAL_GPIO_EXTI_Callback+0x2b8>)
 8001814:	f001 f83c 	bl	8002890 <HAL_GPIO_ReadPin>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d002      	beq.n	8001824 <HAL_GPIO_EXTI_Callback+0x228>
		{
			keyPressed = 67; //ASCII value of 2
 800181e:	4b27      	ldr	r3, [pc, #156]	; (80018bc <HAL_GPIO_EXTI_Callback+0x2c0>)
 8001820:	2243      	movs	r2, #67	; 0x43
 8001822:	701a      	strb	r2, [r3, #0]
		}

		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 8001824:	2200      	movs	r2, #0
 8001826:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800182a:	4823      	ldr	r0, [pc, #140]	; (80018b8 <HAL_GPIO_EXTI_Callback+0x2bc>)
 800182c:	f001 f848 	bl	80028c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 0);
 8001830:	2200      	movs	r2, #0
 8001832:	2108      	movs	r1, #8
 8001834:	481f      	ldr	r0, [pc, #124]	; (80018b4 <HAL_GPIO_EXTI_Callback+0x2b8>)
 8001836:	f001 f843 	bl	80028c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);
 800183a:	2200      	movs	r2, #0
 800183c:	2110      	movs	r1, #16
 800183e:	481d      	ldr	r0, [pc, #116]	; (80018b4 <HAL_GPIO_EXTI_Callback+0x2b8>)
 8001840:	f001 f83e 	bl	80028c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1);
 8001844:	2201      	movs	r2, #1
 8001846:	2120      	movs	r1, #32
 8001848:	481a      	ldr	r0, [pc, #104]	; (80018b4 <HAL_GPIO_EXTI_Callback+0x2b8>)
 800184a:	f001 f839 	bl	80028c0 <HAL_GPIO_WritePin>
		if(GPIO_Pin == GPIO_PIN_6 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6))
 800184e:	88fb      	ldrh	r3, [r7, #6]
 8001850:	2b40      	cmp	r3, #64	; 0x40
 8001852:	d10a      	bne.n	800186a <HAL_GPIO_EXTI_Callback+0x26e>
 8001854:	2140      	movs	r1, #64	; 0x40
 8001856:	4817      	ldr	r0, [pc, #92]	; (80018b4 <HAL_GPIO_EXTI_Callback+0x2b8>)
 8001858:	f001 f81a 	bl	8002890 <HAL_GPIO_ReadPin>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d003      	beq.n	800186a <HAL_GPIO_EXTI_Callback+0x26e>
		{
			keyPressed = 42; //ASCII value of *
 8001862:	4b16      	ldr	r3, [pc, #88]	; (80018bc <HAL_GPIO_EXTI_Callback+0x2c0>)
 8001864:	222a      	movs	r2, #42	; 0x2a
 8001866:	701a      	strb	r2, [r3, #0]
 8001868:	e039      	b.n	80018de <HAL_GPIO_EXTI_Callback+0x2e2>
		}
		else if(GPIO_Pin == GPIO_PIN_7 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7))
 800186a:	88fb      	ldrh	r3, [r7, #6]
 800186c:	2b80      	cmp	r3, #128	; 0x80
 800186e:	d10a      	bne.n	8001886 <HAL_GPIO_EXTI_Callback+0x28a>
 8001870:	2180      	movs	r1, #128	; 0x80
 8001872:	4810      	ldr	r0, [pc, #64]	; (80018b4 <HAL_GPIO_EXTI_Callback+0x2b8>)
 8001874:	f001 f80c 	bl	8002890 <HAL_GPIO_ReadPin>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d003      	beq.n	8001886 <HAL_GPIO_EXTI_Callback+0x28a>
		{
			keyPressed = 48; //ASCII value of 7
 800187e:	4b0f      	ldr	r3, [pc, #60]	; (80018bc <HAL_GPIO_EXTI_Callback+0x2c0>)
 8001880:	2230      	movs	r2, #48	; 0x30
 8001882:	701a      	strb	r2, [r3, #0]
 8001884:	e02b      	b.n	80018de <HAL_GPIO_EXTI_Callback+0x2e2>
		}
		else if(GPIO_Pin == GPIO_PIN_8 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8))
 8001886:	88fb      	ldrh	r3, [r7, #6]
 8001888:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800188c:	d118      	bne.n	80018c0 <HAL_GPIO_EXTI_Callback+0x2c4>
 800188e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001892:	4808      	ldr	r0, [pc, #32]	; (80018b4 <HAL_GPIO_EXTI_Callback+0x2b8>)
 8001894:	f000 fffc 	bl	8002890 <HAL_GPIO_ReadPin>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d010      	beq.n	80018c0 <HAL_GPIO_EXTI_Callback+0x2c4>
		{
			keyPressed = 35; //ASCII value of 4
 800189e:	4b07      	ldr	r3, [pc, #28]	; (80018bc <HAL_GPIO_EXTI_Callback+0x2c0>)
 80018a0:	2223      	movs	r2, #35	; 0x23
 80018a2:	701a      	strb	r2, [r3, #0]
 80018a4:	e01b      	b.n	80018de <HAL_GPIO_EXTI_Callback+0x2e2>
 80018a6:	bf00      	nop
 80018a8:	200001c8 	.word	0x200001c8
 80018ac:	200001c4 	.word	0x200001c4
 80018b0:	200001b0 	.word	0x200001b0
 80018b4:	40020400 	.word	0x40020400
 80018b8:	40020000 	.word	0x40020000
 80018bc:	200001cc 	.word	0x200001cc
		}
		else if(GPIO_Pin == GPIO_PIN_9 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9))
 80018c0:	88fb      	ldrh	r3, [r7, #6]
 80018c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80018c6:	d10a      	bne.n	80018de <HAL_GPIO_EXTI_Callback+0x2e2>
 80018c8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80018cc:	4818      	ldr	r0, [pc, #96]	; (8001930 <HAL_GPIO_EXTI_Callback+0x334>)
 80018ce:	f000 ffdf 	bl	8002890 <HAL_GPIO_ReadPin>
 80018d2:	4603      	mov	r3, r0
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d002      	beq.n	80018de <HAL_GPIO_EXTI_Callback+0x2e2>
		{
			keyPressed = 68; //ASCII value of 1
 80018d8:	4b16      	ldr	r3, [pc, #88]	; (8001934 <HAL_GPIO_EXTI_Callback+0x338>)
 80018da:	2244      	movs	r2, #68	; 0x44
 80018dc:	701a      	strb	r2, [r3, #0]
		}

		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 80018de:	2201      	movs	r2, #1
 80018e0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80018e4:	4814      	ldr	r0, [pc, #80]	; (8001938 <HAL_GPIO_EXTI_Callback+0x33c>)
 80018e6:	f000 ffeb 	bl	80028c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 1);
 80018ea:	2201      	movs	r2, #1
 80018ec:	2108      	movs	r1, #8
 80018ee:	4810      	ldr	r0, [pc, #64]	; (8001930 <HAL_GPIO_EXTI_Callback+0x334>)
 80018f0:	f000 ffe6 	bl	80028c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1);
 80018f4:	2201      	movs	r2, #1
 80018f6:	2110      	movs	r1, #16
 80018f8:	480d      	ldr	r0, [pc, #52]	; (8001930 <HAL_GPIO_EXTI_Callback+0x334>)
 80018fa:	f000 ffe1 	bl	80028c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1);
 80018fe:	2201      	movs	r2, #1
 8001900:	2120      	movs	r1, #32
 8001902:	480b      	ldr	r0, [pc, #44]	; (8001930 <HAL_GPIO_EXTI_Callback+0x334>)
 8001904:	f000 ffdc 	bl	80028c0 <HAL_GPIO_WritePin>
		/*Configure GPIO pins : PB6 PB7 PB8 PB9 back to EXTI*/
		GPIO_InitStructPrivate.Mode = GPIO_MODE_IT_RISING;
 8001908:	4b0c      	ldr	r3, [pc, #48]	; (800193c <HAL_GPIO_EXTI_Callback+0x340>)
 800190a:	f44f 1288 	mov.w	r2, #1114112	; 0x110000
 800190e:	605a      	str	r2, [r3, #4]
		GPIO_InitStructPrivate.Pull = GPIO_PULLDOWN;
 8001910:	4b0a      	ldr	r3, [pc, #40]	; (800193c <HAL_GPIO_EXTI_Callback+0x340>)
 8001912:	2202      	movs	r2, #2
 8001914:	609a      	str	r2, [r3, #8]
		HAL_GPIO_Init(GPIOB, &GPIO_InitStructPrivate);
 8001916:	4909      	ldr	r1, [pc, #36]	; (800193c <HAL_GPIO_EXTI_Callback+0x340>)
 8001918:	4805      	ldr	r0, [pc, #20]	; (8001930 <HAL_GPIO_EXTI_Callback+0x334>)
 800191a:	f000 fe35 	bl	8002588 <HAL_GPIO_Init>
		previousMillis = currentMillis;
 800191e:	4b08      	ldr	r3, [pc, #32]	; (8001940 <HAL_GPIO_EXTI_Callback+0x344>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a08      	ldr	r2, [pc, #32]	; (8001944 <HAL_GPIO_EXTI_Callback+0x348>)
 8001924:	6013      	str	r3, [r2, #0]
	}
}
 8001926:	bf00      	nop
 8001928:	3708      	adds	r7, #8
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	40020400 	.word	0x40020400
 8001934:	200001cc 	.word	0x200001cc
 8001938:	40020000 	.word	0x40020000
 800193c:	200001b0 	.word	0x200001b0
 8001940:	200001c8 	.word	0x200001c8
 8001944:	200001c4 	.word	0x200001c4

08001948 <send_to_lcd>:

void send_to_lcd (char data, int rs)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0
 800194e:	4603      	mov	r3, r0
 8001950:	6039      	str	r1, [r7, #0]
 8001952:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, rs);  // rs = 1 for data, rs=0 for command
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	b2db      	uxtb	r3, r3
 8001958:	461a      	mov	r2, r3
 800195a:	2101      	movs	r1, #1
 800195c:	4820      	ldr	r0, [pc, #128]	; (80019e0 <send_to_lcd+0x98>)
 800195e:	f000 ffaf 	bl	80028c0 <HAL_GPIO_WritePin>



	/* write the data to the respective pin */
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, ((data>>3)&0x01));
 8001962:	79fb      	ldrb	r3, [r7, #7]
 8001964:	08db      	lsrs	r3, r3, #3
 8001966:	b2db      	uxtb	r3, r3
 8001968:	f003 0301 	and.w	r3, r3, #1
 800196c:	b2db      	uxtb	r3, r3
 800196e:	461a      	mov	r2, r3
 8001970:	2108      	movs	r1, #8
 8001972:	481b      	ldr	r0, [pc, #108]	; (80019e0 <send_to_lcd+0x98>)
 8001974:	f000 ffa4 	bl	80028c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, ((data>>2)&0x01));
 8001978:	79fb      	ldrb	r3, [r7, #7]
 800197a:	089b      	lsrs	r3, r3, #2
 800197c:	b2db      	uxtb	r3, r3
 800197e:	f003 0301 	and.w	r3, r3, #1
 8001982:	b2db      	uxtb	r3, r3
 8001984:	461a      	mov	r2, r3
 8001986:	2104      	movs	r1, #4
 8001988:	4815      	ldr	r0, [pc, #84]	; (80019e0 <send_to_lcd+0x98>)
 800198a:	f000 ff99 	bl	80028c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, ((data>>1)&0x01));
 800198e:	79fb      	ldrb	r3, [r7, #7]
 8001990:	085b      	lsrs	r3, r3, #1
 8001992:	b2db      	uxtb	r3, r3
 8001994:	f003 0301 	and.w	r3, r3, #1
 8001998:	b2db      	uxtb	r3, r3
 800199a:	461a      	mov	r2, r3
 800199c:	2102      	movs	r1, #2
 800199e:	4810      	ldr	r0, [pc, #64]	; (80019e0 <send_to_lcd+0x98>)
 80019a0:	f000 ff8e 	bl	80028c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, ((data>>0)&0x01));
 80019a4:	79fb      	ldrb	r3, [r7, #7]
 80019a6:	f003 0301 	and.w	r3, r3, #1
 80019aa:	b2db      	uxtb	r3, r3
 80019ac:	461a      	mov	r2, r3
 80019ae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80019b2:	480b      	ldr	r0, [pc, #44]	; (80019e0 <send_to_lcd+0x98>)
 80019b4:	f000 ff84 	bl	80028c0 <HAL_GPIO_WritePin>

	/* Toggle EN PIN to send the data
	 * if the HCLK > 100 MHz, use the  20 us delay
	 * if the LCD still doesn't work, increase the delay to 50, 80 or 100..
	 */
	delay (100);
 80019b8:	2064      	movs	r0, #100	; 0x64
 80019ba:	f7fe fde3 	bl	8000584 <delay>
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, 1);
 80019be:	2201      	movs	r2, #1
 80019c0:	2120      	movs	r1, #32
 80019c2:	4807      	ldr	r0, [pc, #28]	; (80019e0 <send_to_lcd+0x98>)
 80019c4:	f000 ff7c 	bl	80028c0 <HAL_GPIO_WritePin>
	delay (100);
 80019c8:	2064      	movs	r0, #100	; 0x64
 80019ca:	f7fe fddb 	bl	8000584 <delay>
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, 0);
 80019ce:	2200      	movs	r2, #0
 80019d0:	2120      	movs	r1, #32
 80019d2:	4803      	ldr	r0, [pc, #12]	; (80019e0 <send_to_lcd+0x98>)
 80019d4:	f000 ff74 	bl	80028c0 <HAL_GPIO_WritePin>
}
 80019d8:	bf00      	nop
 80019da:	3708      	adds	r7, #8
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	40020800 	.word	0x40020800

080019e4 <lcd_send_cmd>:

void lcd_send_cmd (char cmd)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b084      	sub	sp, #16
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	4603      	mov	r3, r0
 80019ec:	71fb      	strb	r3, [r7, #7]
	char datatosend;
	/*send upper nibble first */
	datatosend = ((cmd>>4)&0x0f);
 80019ee:	79fb      	ldrb	r3, [r7, #7]
 80019f0:	091b      	lsrs	r3, r3, #4
 80019f2:	73fb      	strb	r3, [r7, #15]
	send_to_lcd(datatosend,0);  // RS must be 0 while sending command
 80019f4:	7bfb      	ldrb	r3, [r7, #15]
 80019f6:	2100      	movs	r1, #0
 80019f8:	4618      	mov	r0, r3
 80019fa:	f7ff ffa5 	bl	8001948 <send_to_lcd>

	/* send Lower Nibble */
	datatosend = ((cmd)&0x0f);
 80019fe:	79fb      	ldrb	r3, [r7, #7]
 8001a00:	f003 030f 	and.w	r3, r3, #15
 8001a04:	73fb      	strb	r3, [r7, #15]
	send_to_lcd(datatosend, 0);
 8001a06:	7bfb      	ldrb	r3, [r7, #15]
 8001a08:	2100      	movs	r1, #0
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f7ff ff9c 	bl	8001948 <send_to_lcd>
}
 8001a10:	bf00      	nop
 8001a12:	3710      	adds	r7, #16
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}

08001a18 <lcd_send_data>:

void lcd_send_data (char data)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b084      	sub	sp, #16
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	4603      	mov	r3, r0
 8001a20:	71fb      	strb	r3, [r7, #7]
	char datatosend;
	/* send higher nibble */
	datatosend = ((data>>4)&0x0f);
 8001a22:	79fb      	ldrb	r3, [r7, #7]
 8001a24:	091b      	lsrs	r3, r3, #4
 8001a26:	73fb      	strb	r3, [r7, #15]
	send_to_lcd(datatosend, 1);  // rs =1 for sending data
 8001a28:	7bfb      	ldrb	r3, [r7, #15]
 8001a2a:	2101      	movs	r1, #1
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f7ff ff8b 	bl	8001948 <send_to_lcd>
	/* send Lower nibble */
	datatosend = ((data)&0x0f);
 8001a32:	79fb      	ldrb	r3, [r7, #7]
 8001a34:	f003 030f 	and.w	r3, r3, #15
 8001a38:	73fb      	strb	r3, [r7, #15]
	send_to_lcd(datatosend, 1);
 8001a3a:	7bfb      	ldrb	r3, [r7, #15]
 8001a3c:	2101      	movs	r1, #1
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f7ff ff82 	bl	8001948 <send_to_lcd>
}
 8001a44:	bf00      	nop
 8001a46:	3710      	adds	r7, #16
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}

08001a4c <lcd_clear>:

void lcd_clear (void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	af00      	add	r7, sp, #0
	lcd_send_cmd(0x01);
 8001a50:	2001      	movs	r0, #1
 8001a52:	f7ff ffc7 	bl	80019e4 <lcd_send_cmd>
	HAL_Delay(2);
 8001a56:	2002      	movs	r0, #2
 8001a58:	f000 fbce 	bl	80021f8 <HAL_Delay>
}
 8001a5c:	bf00      	nop
 8001a5e:	bd80      	pop	{r7, pc}

08001a60 <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
 8001a68:	6039      	str	r1, [r7, #0]
	switch (row)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d003      	beq.n	8001a78 <lcd_put_cur+0x18>
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2b01      	cmp	r3, #1
 8001a74:	d005      	beq.n	8001a82 <lcd_put_cur+0x22>
 8001a76:	e009      	b.n	8001a8c <lcd_put_cur+0x2c>
	{
	case 0:
		col |= 0x80;
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a7e:	603b      	str	r3, [r7, #0]
		break;
 8001a80:	e004      	b.n	8001a8c <lcd_put_cur+0x2c>
	case 1:
		col |= 0xC0;
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001a88:	603b      	str	r3, [r7, #0]
		break;
 8001a8a:	bf00      	nop
	}
	lcd_send_cmd (col);
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	b2db      	uxtb	r3, r3
 8001a90:	4618      	mov	r0, r3
 8001a92:	f7ff ffa7 	bl	80019e4 <lcd_send_cmd>
}
 8001a96:	bf00      	nop
 8001a98:	3708      	adds	r7, #8
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}

08001a9e <lcd_init>:

void lcd_init (void)
{
 8001a9e:	b580      	push	{r7, lr}
 8001aa0:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50); // wait for >40ms
 8001aa2:	2032      	movs	r0, #50	; 0x32
 8001aa4:	f000 fba8 	bl	80021f8 <HAL_Delay>
	lcd_send_cmd (0x30); //command for 4 bit initialization.
 8001aa8:	2030      	movs	r0, #48	; 0x30
 8001aaa:	f7ff ff9b 	bl	80019e4 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8001aae:	2005      	movs	r0, #5
 8001ab0:	f000 fba2 	bl	80021f8 <HAL_Delay>
	lcd_send_cmd (0x30); //command for 4 bit initialization.
 8001ab4:	2030      	movs	r0, #48	; 0x30
 8001ab6:	f7ff ff95 	bl	80019e4 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8001aba:	2001      	movs	r0, #1
 8001abc:	f000 fb9c 	bl	80021f8 <HAL_Delay>
	lcd_send_cmd (0x30); //command for 4 bit initialization.
 8001ac0:	2030      	movs	r0, #48	; 0x30
 8001ac2:	f7ff ff8f 	bl	80019e4 <lcd_send_cmd>
	HAL_Delay(10);
 8001ac6:	200a      	movs	r0, #10
 8001ac8:	f000 fb96 	bl	80021f8 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8001acc:	2020      	movs	r0, #32
 8001ace:	f7ff ff89 	bl	80019e4 <lcd_send_cmd>
	HAL_Delay(10);
 8001ad2:	200a      	movs	r0, #10
 8001ad4:	f000 fb90 	bl	80021f8 <HAL_Delay>

	// dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8001ad8:	2028      	movs	r0, #40	; 0x28
 8001ada:	f7ff ff83 	bl	80019e4 <lcd_send_cmd>
	HAL_Delay(1);
 8001ade:	2001      	movs	r0, #1
 8001ae0:	f000 fb8a 	bl	80021f8 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8001ae4:	2008      	movs	r0, #8
 8001ae6:	f7ff ff7d 	bl	80019e4 <lcd_send_cmd>
	HAL_Delay(1);
 8001aea:	2001      	movs	r0, #1
 8001aec:	f000 fb84 	bl	80021f8 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8001af0:	2001      	movs	r0, #1
 8001af2:	f7ff ff77 	bl	80019e4 <lcd_send_cmd>
	HAL_Delay(1);
 8001af6:	2001      	movs	r0, #1
 8001af8:	f000 fb7e 	bl	80021f8 <HAL_Delay>
	HAL_Delay(1);
 8001afc:	2001      	movs	r0, #1
 8001afe:	f000 fb7b 	bl	80021f8 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8001b02:	2006      	movs	r0, #6
 8001b04:	f7ff ff6e 	bl	80019e4 <lcd_send_cmd>
	HAL_Delay(1);
 8001b08:	2001      	movs	r0, #1
 8001b0a:	f000 fb75 	bl	80021f8 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8001b0e:	200c      	movs	r0, #12
 8001b10:	f7ff ff68 	bl	80019e4 <lcd_send_cmd>
}
 8001b14:	bf00      	nop
 8001b16:	bd80      	pop	{r7, pc}

08001b18 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b082      	sub	sp, #8
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8001b20:	e006      	b.n	8001b30 <lcd_send_string+0x18>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	1c5a      	adds	r2, r3, #1
 8001b26:	607a      	str	r2, [r7, #4]
 8001b28:	781b      	ldrb	r3, [r3, #0]
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f7ff ff74 	bl	8001a18 <lcd_send_data>
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d1f4      	bne.n	8001b22 <lcd_send_string+0xa>
}
 8001b38:	bf00      	nop
 8001b3a:	bf00      	nop
 8001b3c:	3708      	adds	r7, #8
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
	...

08001b44 <playTone>:

void playTone(uint16_t frequency,uint16_t ms,uint8_t dc)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b082      	sub	sp, #8
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	80fb      	strh	r3, [r7, #6]
 8001b4e:	460b      	mov	r3, r1
 8001b50:	80bb      	strh	r3, [r7, #4]
 8001b52:	4613      	mov	r3, r2
 8001b54:	70fb      	strb	r3, [r7, #3]
	// HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_13);
	//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, SET);
	//int duration = 1000/frequency;//calculate the duration of tone
	__HAL_TIM_SET_PRESCALER(&htim2,84000000/(frequency*frequency));//set the prescaler to generate the desired frequency.
 8001b56:	88fb      	ldrh	r3, [r7, #6]
 8001b58:	88fa      	ldrh	r2, [r7, #6]
 8001b5a:	fb02 f303 	mul.w	r3, r2, r3
 8001b5e:	4a0e      	ldr	r2, [pc, #56]	; (8001b98 <playTone+0x54>)
 8001b60:	fb92 f2f3 	sdiv	r2, r2, r3
 8001b64:	4b0d      	ldr	r3, [pc, #52]	; (8001b9c <playTone+0x58>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	629a      	str	r2, [r3, #40]	; 0x28
	__HAL_TIM_SET_AUTORELOAD(&htim2,ms);//set the auto-reload value to generate the desired duration
 8001b6a:	4b0c      	ldr	r3, [pc, #48]	; (8001b9c <playTone+0x58>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	88ba      	ldrh	r2, [r7, #4]
 8001b70:	62da      	str	r2, [r3, #44]	; 0x2c
 8001b72:	88bb      	ldrh	r3, [r7, #4]
 8001b74:	4a09      	ldr	r2, [pc, #36]	; (8001b9c <playTone+0x58>)
 8001b76:	60d3      	str	r3, [r2, #12]

	HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 8001b78:	2100      	movs	r1, #0
 8001b7a:	4808      	ldr	r0, [pc, #32]	; (8001b9c <playTone+0x58>)
 8001b7c:	f001 fc2e 	bl	80033dc <HAL_TIM_PWM_Start>
	htim2.Instance->CCR1 = dc;//vary the duty cycle
 8001b80:	4b06      	ldr	r3, [pc, #24]	; (8001b9c <playTone+0x58>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	78fa      	ldrb	r2, [r7, #3]
 8001b86:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_Delay(ms);
 8001b88:	88bb      	ldrh	r3, [r7, #4]
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f000 fb34 	bl	80021f8 <HAL_Delay>
	/**** FOR STOPPING THE BUZZER********/
	//HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_13);
	// HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, RESET);
	//  HAL_TIM_PWM_Stop(&htim2,TIM_CHANNEL_1);

}
 8001b90:	bf00      	nop
 8001b92:	3708      	adds	r7, #8
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	0501bd00 	.word	0x0501bd00
 8001b9c:	20000098 	.word	0x20000098

08001ba0 <stopTone>:

void stopTone(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&htim2,TIM_CHANNEL_1);
 8001ba4:	2100      	movs	r1, #0
 8001ba6:	4802      	ldr	r0, [pc, #8]	; (8001bb0 <stopTone+0x10>)
 8001ba8:	f001 fcc8 	bl	800353c <HAL_TIM_PWM_Stop>

}
 8001bac:	bf00      	nop
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	20000098 	.word	0x20000098

08001bb4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bb8:	b672      	cpsid	i
}
 8001bba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001bbc:	e7fe      	b.n	8001bbc <Error_Handler+0x8>
	...

08001bc0 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8001bc8:	4a07      	ldr	r2, [pc, #28]	; (8001be8 <RetargetInit+0x28>)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8001bce:	4b07      	ldr	r3, [pc, #28]	; (8001bec <RetargetInit+0x2c>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	6898      	ldr	r0, [r3, #8]
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	2202      	movs	r2, #2
 8001bd8:	2100      	movs	r1, #0
 8001bda:	f003 fbcf 	bl	800537c <setvbuf>
}
 8001bde:	bf00      	nop
 8001be0:	3708      	adds	r7, #8
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	20000258 	.word	0x20000258
 8001bec:	20000010 	.word	0x20000010

08001bf0 <_isatty>:

int _isatty(int fd) {
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b082      	sub	sp, #8
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	db04      	blt.n	8001c08 <_isatty+0x18>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2b02      	cmp	r3, #2
 8001c02:	dc01      	bgt.n	8001c08 <_isatty+0x18>
    return 1;
 8001c04:	2301      	movs	r3, #1
 8001c06:	e005      	b.n	8001c14 <_isatty+0x24>

  errno = EBADF;
 8001c08:	f003 fad4 	bl	80051b4 <__errno>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2209      	movs	r2, #9
 8001c10:	601a      	str	r2, [r3, #0]
  return 0;
 8001c12:	2300      	movs	r3, #0
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	3708      	adds	r7, #8
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}

08001c1c <_write>:

int _write(int fd, char* ptr, int len) {
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b086      	sub	sp, #24
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	60f8      	str	r0, [r7, #12]
 8001c24:	60b9      	str	r1, [r7, #8]
 8001c26:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	2b01      	cmp	r3, #1
 8001c2c:	d002      	beq.n	8001c34 <_write+0x18>
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	2b02      	cmp	r3, #2
 8001c32:	d111      	bne.n	8001c58 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8001c34:	4b0e      	ldr	r3, [pc, #56]	; (8001c70 <_write+0x54>)
 8001c36:	6818      	ldr	r0, [r3, #0]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	b29a      	uxth	r2, r3
 8001c3c:	f04f 33ff 	mov.w	r3, #4294967295
 8001c40:	68b9      	ldr	r1, [r7, #8]
 8001c42:	f002 f9f0 	bl	8004026 <HAL_UART_Transmit>
 8001c46:	4603      	mov	r3, r0
 8001c48:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8001c4a:	7dfb      	ldrb	r3, [r7, #23]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d101      	bne.n	8001c54 <_write+0x38>
      return len;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	e008      	b.n	8001c66 <_write+0x4a>
    else
      return EIO;
 8001c54:	2305      	movs	r3, #5
 8001c56:	e006      	b.n	8001c66 <_write+0x4a>
  }
  errno = EBADF;
 8001c58:	f003 faac 	bl	80051b4 <__errno>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2209      	movs	r2, #9
 8001c60:	601a      	str	r2, [r3, #0]
  return -1;
 8001c62:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	3718      	adds	r7, #24
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	20000258 	.word	0x20000258

08001c74 <_close>:

int _close(int fd) {
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b082      	sub	sp, #8
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	db04      	blt.n	8001c8c <_close+0x18>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2b02      	cmp	r3, #2
 8001c86:	dc01      	bgt.n	8001c8c <_close+0x18>
    return 0;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	e006      	b.n	8001c9a <_close+0x26>

  errno = EBADF;
 8001c8c:	f003 fa92 	bl	80051b4 <__errno>
 8001c90:	4603      	mov	r3, r0
 8001c92:	2209      	movs	r2, #9
 8001c94:	601a      	str	r2, [r3, #0]
  return -1;
 8001c96:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3708      	adds	r7, #8
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}

08001ca2 <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8001ca2:	b580      	push	{r7, lr}
 8001ca4:	b084      	sub	sp, #16
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	60f8      	str	r0, [r7, #12]
 8001caa:	60b9      	str	r1, [r7, #8]
 8001cac:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8001cae:	f003 fa81 	bl	80051b4 <__errno>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	2209      	movs	r2, #9
 8001cb6:	601a      	str	r2, [r3, #0]
  return -1;
 8001cb8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	3710      	adds	r7, #16
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}

08001cc4 <_read>:

int _read(int fd, char* ptr, int len) {
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b086      	sub	sp, #24
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	60f8      	str	r0, [r7, #12]
 8001ccc:	60b9      	str	r1, [r7, #8]
 8001cce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d110      	bne.n	8001cf8 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8001cd6:	4b0e      	ldr	r3, [pc, #56]	; (8001d10 <_read+0x4c>)
 8001cd8:	6818      	ldr	r0, [r3, #0]
 8001cda:	f04f 33ff 	mov.w	r3, #4294967295
 8001cde:	2201      	movs	r2, #1
 8001ce0:	68b9      	ldr	r1, [r7, #8]
 8001ce2:	f002 fa32 	bl	800414a <HAL_UART_Receive>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8001cea:	7dfb      	ldrb	r3, [r7, #23]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d101      	bne.n	8001cf4 <_read+0x30>
      return 1;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	e008      	b.n	8001d06 <_read+0x42>
    else
      return EIO;
 8001cf4:	2305      	movs	r3, #5
 8001cf6:	e006      	b.n	8001d06 <_read+0x42>
  }
  errno = EBADF;
 8001cf8:	f003 fa5c 	bl	80051b4 <__errno>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2209      	movs	r2, #9
 8001d00:	601a      	str	r2, [r3, #0]
  return -1;
 8001d02:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	3718      	adds	r7, #24
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	20000258 	.word	0x20000258

08001d14 <_fstat>:

int _fstat(int fd, struct stat* st) {
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b082      	sub	sp, #8
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
 8001d1c:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	db08      	blt.n	8001d36 <_fstat+0x22>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2b02      	cmp	r3, #2
 8001d28:	dc05      	bgt.n	8001d36 <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d30:	605a      	str	r2, [r3, #4]
    return 0;
 8001d32:	2300      	movs	r3, #0
 8001d34:	e005      	b.n	8001d42 <_fstat+0x2e>
  }

  errno = EBADF;
 8001d36:	f003 fa3d 	bl	80051b4 <__errno>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	2209      	movs	r2, #9
 8001d3e:	601a      	str	r2, [r3, #0]
  return 0;
 8001d40:	2300      	movs	r3, #0
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	3708      	adds	r7, #8
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
	...

08001d4c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b083      	sub	sp, #12
 8001d50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d52:	2300      	movs	r3, #0
 8001d54:	607b      	str	r3, [r7, #4]
 8001d56:	4b10      	ldr	r3, [pc, #64]	; (8001d98 <HAL_MspInit+0x4c>)
 8001d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d5a:	4a0f      	ldr	r2, [pc, #60]	; (8001d98 <HAL_MspInit+0x4c>)
 8001d5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d60:	6453      	str	r3, [r2, #68]	; 0x44
 8001d62:	4b0d      	ldr	r3, [pc, #52]	; (8001d98 <HAL_MspInit+0x4c>)
 8001d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d6a:	607b      	str	r3, [r7, #4]
 8001d6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d6e:	2300      	movs	r3, #0
 8001d70:	603b      	str	r3, [r7, #0]
 8001d72:	4b09      	ldr	r3, [pc, #36]	; (8001d98 <HAL_MspInit+0x4c>)
 8001d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d76:	4a08      	ldr	r2, [pc, #32]	; (8001d98 <HAL_MspInit+0x4c>)
 8001d78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d7c:	6413      	str	r3, [r2, #64]	; 0x40
 8001d7e:	4b06      	ldr	r3, [pc, #24]	; (8001d98 <HAL_MspInit+0x4c>)
 8001d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d86:	603b      	str	r3, [r7, #0]
 8001d88:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d8a:	bf00      	nop
 8001d8c:	370c      	adds	r7, #12
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr
 8001d96:	bf00      	nop
 8001d98:	40023800 	.word	0x40023800

08001d9c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b085      	sub	sp, #20
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001dac:	d10e      	bne.n	8001dcc <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001dae:	2300      	movs	r3, #0
 8001db0:	60fb      	str	r3, [r7, #12]
 8001db2:	4b13      	ldr	r3, [pc, #76]	; (8001e00 <HAL_TIM_Base_MspInit+0x64>)
 8001db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db6:	4a12      	ldr	r2, [pc, #72]	; (8001e00 <HAL_TIM_Base_MspInit+0x64>)
 8001db8:	f043 0301 	orr.w	r3, r3, #1
 8001dbc:	6413      	str	r3, [r2, #64]	; 0x40
 8001dbe:	4b10      	ldr	r3, [pc, #64]	; (8001e00 <HAL_TIM_Base_MspInit+0x64>)
 8001dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc2:	f003 0301 	and.w	r3, r3, #1
 8001dc6:	60fb      	str	r3, [r7, #12]
 8001dc8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001dca:	e012      	b.n	8001df2 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM3)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a0c      	ldr	r2, [pc, #48]	; (8001e04 <HAL_TIM_Base_MspInit+0x68>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d10d      	bne.n	8001df2 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	60bb      	str	r3, [r7, #8]
 8001dda:	4b09      	ldr	r3, [pc, #36]	; (8001e00 <HAL_TIM_Base_MspInit+0x64>)
 8001ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dde:	4a08      	ldr	r2, [pc, #32]	; (8001e00 <HAL_TIM_Base_MspInit+0x64>)
 8001de0:	f043 0302 	orr.w	r3, r3, #2
 8001de4:	6413      	str	r3, [r2, #64]	; 0x40
 8001de6:	4b06      	ldr	r3, [pc, #24]	; (8001e00 <HAL_TIM_Base_MspInit+0x64>)
 8001de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dea:	f003 0302 	and.w	r3, r3, #2
 8001dee:	60bb      	str	r3, [r7, #8]
 8001df0:	68bb      	ldr	r3, [r7, #8]
}
 8001df2:	bf00      	nop
 8001df4:	3714      	adds	r7, #20
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr
 8001dfe:	bf00      	nop
 8001e00:	40023800 	.word	0x40023800
 8001e04:	40000400 	.word	0x40000400

08001e08 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b088      	sub	sp, #32
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e10:	f107 030c 	add.w	r3, r7, #12
 8001e14:	2200      	movs	r2, #0
 8001e16:	601a      	str	r2, [r3, #0]
 8001e18:	605a      	str	r2, [r3, #4]
 8001e1a:	609a      	str	r2, [r3, #8]
 8001e1c:	60da      	str	r2, [r3, #12]
 8001e1e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e28:	d11d      	bne.n	8001e66 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	60bb      	str	r3, [r7, #8]
 8001e2e:	4b10      	ldr	r3, [pc, #64]	; (8001e70 <HAL_TIM_MspPostInit+0x68>)
 8001e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e32:	4a0f      	ldr	r2, [pc, #60]	; (8001e70 <HAL_TIM_MspPostInit+0x68>)
 8001e34:	f043 0301 	orr.w	r3, r3, #1
 8001e38:	6313      	str	r3, [r2, #48]	; 0x30
 8001e3a:	4b0d      	ldr	r3, [pc, #52]	; (8001e70 <HAL_TIM_MspPostInit+0x68>)
 8001e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3e:	f003 0301 	and.w	r3, r3, #1
 8001e42:	60bb      	str	r3, [r7, #8]
 8001e44:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001e46:	2301      	movs	r3, #1
 8001e48:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e4a:	2302      	movs	r3, #2
 8001e4c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e52:	2300      	movs	r3, #0
 8001e54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001e56:	2301      	movs	r3, #1
 8001e58:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e5a:	f107 030c 	add.w	r3, r7, #12
 8001e5e:	4619      	mov	r1, r3
 8001e60:	4804      	ldr	r0, [pc, #16]	; (8001e74 <HAL_TIM_MspPostInit+0x6c>)
 8001e62:	f000 fb91 	bl	8002588 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001e66:	bf00      	nop
 8001e68:	3720      	adds	r7, #32
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	40023800 	.word	0x40023800
 8001e74:	40020000 	.word	0x40020000

08001e78 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b08c      	sub	sp, #48	; 0x30
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e80:	f107 031c 	add.w	r3, r7, #28
 8001e84:	2200      	movs	r2, #0
 8001e86:	601a      	str	r2, [r3, #0]
 8001e88:	605a      	str	r2, [r3, #4]
 8001e8a:	609a      	str	r2, [r3, #8]
 8001e8c:	60da      	str	r2, [r3, #12]
 8001e8e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a3a      	ldr	r2, [pc, #232]	; (8001f80 <HAL_UART_MspInit+0x108>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d135      	bne.n	8001f06 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	61bb      	str	r3, [r7, #24]
 8001e9e:	4b39      	ldr	r3, [pc, #228]	; (8001f84 <HAL_UART_MspInit+0x10c>)
 8001ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ea2:	4a38      	ldr	r2, [pc, #224]	; (8001f84 <HAL_UART_MspInit+0x10c>)
 8001ea4:	f043 0310 	orr.w	r3, r3, #16
 8001ea8:	6453      	str	r3, [r2, #68]	; 0x44
 8001eaa:	4b36      	ldr	r3, [pc, #216]	; (8001f84 <HAL_UART_MspInit+0x10c>)
 8001eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eae:	f003 0310 	and.w	r3, r3, #16
 8001eb2:	61bb      	str	r3, [r7, #24]
 8001eb4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	617b      	str	r3, [r7, #20]
 8001eba:	4b32      	ldr	r3, [pc, #200]	; (8001f84 <HAL_UART_MspInit+0x10c>)
 8001ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ebe:	4a31      	ldr	r2, [pc, #196]	; (8001f84 <HAL_UART_MspInit+0x10c>)
 8001ec0:	f043 0301 	orr.w	r3, r3, #1
 8001ec4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ec6:	4b2f      	ldr	r3, [pc, #188]	; (8001f84 <HAL_UART_MspInit+0x10c>)
 8001ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eca:	f003 0301 	and.w	r3, r3, #1
 8001ece:	617b      	str	r3, [r7, #20]
 8001ed0:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001ed2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001ed6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ed8:	2302      	movs	r3, #2
 8001eda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001edc:	2300      	movs	r3, #0
 8001ede:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ee0:	2303      	movs	r3, #3
 8001ee2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001ee4:	2307      	movs	r3, #7
 8001ee6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ee8:	f107 031c 	add.w	r3, r7, #28
 8001eec:	4619      	mov	r1, r3
 8001eee:	4826      	ldr	r0, [pc, #152]	; (8001f88 <HAL_UART_MspInit+0x110>)
 8001ef0:	f000 fb4a 	bl	8002588 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	2100      	movs	r1, #0
 8001ef8:	2025      	movs	r0, #37	; 0x25
 8001efa:	f000 fa7c 	bl	80023f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001efe:	2025      	movs	r0, #37	; 0x25
 8001f00:	f000 fa95 	bl	800242e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001f04:	e038      	b.n	8001f78 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a20      	ldr	r2, [pc, #128]	; (8001f8c <HAL_UART_MspInit+0x114>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d133      	bne.n	8001f78 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f10:	2300      	movs	r3, #0
 8001f12:	613b      	str	r3, [r7, #16]
 8001f14:	4b1b      	ldr	r3, [pc, #108]	; (8001f84 <HAL_UART_MspInit+0x10c>)
 8001f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f18:	4a1a      	ldr	r2, [pc, #104]	; (8001f84 <HAL_UART_MspInit+0x10c>)
 8001f1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f1e:	6413      	str	r3, [r2, #64]	; 0x40
 8001f20:	4b18      	ldr	r3, [pc, #96]	; (8001f84 <HAL_UART_MspInit+0x10c>)
 8001f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f28:	613b      	str	r3, [r7, #16]
 8001f2a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	60fb      	str	r3, [r7, #12]
 8001f30:	4b14      	ldr	r3, [pc, #80]	; (8001f84 <HAL_UART_MspInit+0x10c>)
 8001f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f34:	4a13      	ldr	r2, [pc, #76]	; (8001f84 <HAL_UART_MspInit+0x10c>)
 8001f36:	f043 0301 	orr.w	r3, r3, #1
 8001f3a:	6313      	str	r3, [r2, #48]	; 0x30
 8001f3c:	4b11      	ldr	r3, [pc, #68]	; (8001f84 <HAL_UART_MspInit+0x10c>)
 8001f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f40:	f003 0301 	and.w	r3, r3, #1
 8001f44:	60fb      	str	r3, [r7, #12]
 8001f46:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001f48:	230c      	movs	r3, #12
 8001f4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f4c:	2302      	movs	r3, #2
 8001f4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f50:	2300      	movs	r3, #0
 8001f52:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f54:	2303      	movs	r3, #3
 8001f56:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f58:	2307      	movs	r3, #7
 8001f5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f5c:	f107 031c 	add.w	r3, r7, #28
 8001f60:	4619      	mov	r1, r3
 8001f62:	4809      	ldr	r0, [pc, #36]	; (8001f88 <HAL_UART_MspInit+0x110>)
 8001f64:	f000 fb10 	bl	8002588 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001f68:	2200      	movs	r2, #0
 8001f6a:	2100      	movs	r1, #0
 8001f6c:	2026      	movs	r0, #38	; 0x26
 8001f6e:	f000 fa42 	bl	80023f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001f72:	2026      	movs	r0, #38	; 0x26
 8001f74:	f000 fa5b 	bl	800242e <HAL_NVIC_EnableIRQ>
}
 8001f78:	bf00      	nop
 8001f7a:	3730      	adds	r7, #48	; 0x30
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	40011000 	.word	0x40011000
 8001f84:	40023800 	.word	0x40023800
 8001f88:	40020000 	.word	0x40020000
 8001f8c:	40004400 	.word	0x40004400

08001f90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f90:	b480      	push	{r7}
 8001f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f94:	e7fe      	b.n	8001f94 <NMI_Handler+0x4>

08001f96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f96:	b480      	push	{r7}
 8001f98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f9a:	e7fe      	b.n	8001f9a <HardFault_Handler+0x4>

08001f9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fa0:	e7fe      	b.n	8001fa0 <MemManage_Handler+0x4>

08001fa2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fa2:	b480      	push	{r7}
 8001fa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fa6:	e7fe      	b.n	8001fa6 <BusFault_Handler+0x4>

08001fa8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fac:	e7fe      	b.n	8001fac <UsageFault_Handler+0x4>

08001fae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fae:	b480      	push	{r7}
 8001fb0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fb2:	bf00      	nop
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr

08001fbc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fc0:	bf00      	nop
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr

08001fca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fca:	b480      	push	{r7}
 8001fcc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fce:	bf00      	nop
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr

08001fd8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fdc:	f000 f8ec 	bl	80021b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fe0:	bf00      	nop
 8001fe2:	bd80      	pop	{r7, pc}

08001fe4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001fe8:	2040      	movs	r0, #64	; 0x40
 8001fea:	f000 fc83 	bl	80028f4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001fee:	2080      	movs	r0, #128	; 0x80
 8001ff0:	f000 fc80 	bl	80028f4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001ff4:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001ff8:	f000 fc7c 	bl	80028f4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8001ffc:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002000:	f000 fc78 	bl	80028f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002004:	bf00      	nop
 8002006:	bd80      	pop	{r7, pc}

08002008 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800200c:	4802      	ldr	r0, [pc, #8]	; (8002018 <USART1_IRQHandler+0x10>)
 800200e:	f002 f96f 	bl	80042f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002012:	bf00      	nop
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	20000128 	.word	0x20000128

0800201c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002020:	4802      	ldr	r0, [pc, #8]	; (800202c <USART2_IRQHandler+0x10>)
 8002022:	f002 f965 	bl	80042f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002026:	bf00      	nop
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	2000016c 	.word	0x2000016c

08002030 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b086      	sub	sp, #24
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002038:	4a14      	ldr	r2, [pc, #80]	; (800208c <_sbrk+0x5c>)
 800203a:	4b15      	ldr	r3, [pc, #84]	; (8002090 <_sbrk+0x60>)
 800203c:	1ad3      	subs	r3, r2, r3
 800203e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002044:	4b13      	ldr	r3, [pc, #76]	; (8002094 <_sbrk+0x64>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d102      	bne.n	8002052 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800204c:	4b11      	ldr	r3, [pc, #68]	; (8002094 <_sbrk+0x64>)
 800204e:	4a12      	ldr	r2, [pc, #72]	; (8002098 <_sbrk+0x68>)
 8002050:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002052:	4b10      	ldr	r3, [pc, #64]	; (8002094 <_sbrk+0x64>)
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	4413      	add	r3, r2
 800205a:	693a      	ldr	r2, [r7, #16]
 800205c:	429a      	cmp	r2, r3
 800205e:	d207      	bcs.n	8002070 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002060:	f003 f8a8 	bl	80051b4 <__errno>
 8002064:	4603      	mov	r3, r0
 8002066:	220c      	movs	r2, #12
 8002068:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800206a:	f04f 33ff 	mov.w	r3, #4294967295
 800206e:	e009      	b.n	8002084 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002070:	4b08      	ldr	r3, [pc, #32]	; (8002094 <_sbrk+0x64>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002076:	4b07      	ldr	r3, [pc, #28]	; (8002094 <_sbrk+0x64>)
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	4413      	add	r3, r2
 800207e:	4a05      	ldr	r2, [pc, #20]	; (8002094 <_sbrk+0x64>)
 8002080:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002082:	68fb      	ldr	r3, [r7, #12]
}
 8002084:	4618      	mov	r0, r3
 8002086:	3718      	adds	r7, #24
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}
 800208c:	20018000 	.word	0x20018000
 8002090:	00000400 	.word	0x00000400
 8002094:	2000025c 	.word	0x2000025c
 8002098:	20000278 	.word	0x20000278

0800209c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800209c:	b480      	push	{r7}
 800209e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80020a0:	4b06      	ldr	r3, [pc, #24]	; (80020bc <SystemInit+0x20>)
 80020a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020a6:	4a05      	ldr	r2, [pc, #20]	; (80020bc <SystemInit+0x20>)
 80020a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80020ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020b0:	bf00      	nop
 80020b2:	46bd      	mov	sp, r7
 80020b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b8:	4770      	bx	lr
 80020ba:	bf00      	nop
 80020bc:	e000ed00 	.word	0xe000ed00

080020c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80020c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80020f8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80020c4:	480d      	ldr	r0, [pc, #52]	; (80020fc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80020c6:	490e      	ldr	r1, [pc, #56]	; (8002100 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80020c8:	4a0e      	ldr	r2, [pc, #56]	; (8002104 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80020ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020cc:	e002      	b.n	80020d4 <LoopCopyDataInit>

080020ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020d2:	3304      	adds	r3, #4

080020d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020d8:	d3f9      	bcc.n	80020ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020da:	4a0b      	ldr	r2, [pc, #44]	; (8002108 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80020dc:	4c0b      	ldr	r4, [pc, #44]	; (800210c <LoopFillZerobss+0x26>)
  movs r3, #0
 80020de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020e0:	e001      	b.n	80020e6 <LoopFillZerobss>

080020e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020e4:	3204      	adds	r2, #4

080020e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020e8:	d3fb      	bcc.n	80020e2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80020ea:	f7ff ffd7 	bl	800209c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80020ee:	f003 f867 	bl	80051c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80020f2:	f7fe fa61 	bl	80005b8 <main>
  bx  lr    
 80020f6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80020f8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80020fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002100:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8002104:	08006dbc 	.word	0x08006dbc
  ldr r2, =_sbss
 8002108:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 800210c:	20000274 	.word	0x20000274

08002110 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002110:	e7fe      	b.n	8002110 <ADC_IRQHandler>
	...

08002114 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002118:	4b0e      	ldr	r3, [pc, #56]	; (8002154 <HAL_Init+0x40>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a0d      	ldr	r2, [pc, #52]	; (8002154 <HAL_Init+0x40>)
 800211e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002122:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002124:	4b0b      	ldr	r3, [pc, #44]	; (8002154 <HAL_Init+0x40>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a0a      	ldr	r2, [pc, #40]	; (8002154 <HAL_Init+0x40>)
 800212a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800212e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002130:	4b08      	ldr	r3, [pc, #32]	; (8002154 <HAL_Init+0x40>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a07      	ldr	r2, [pc, #28]	; (8002154 <HAL_Init+0x40>)
 8002136:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800213a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800213c:	2003      	movs	r0, #3
 800213e:	f000 f94f 	bl	80023e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002142:	200f      	movs	r0, #15
 8002144:	f000 f808 	bl	8002158 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002148:	f7ff fe00 	bl	8001d4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800214c:	2300      	movs	r3, #0
}
 800214e:	4618      	mov	r0, r3
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	40023c00 	.word	0x40023c00

08002158 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b082      	sub	sp, #8
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002160:	4b12      	ldr	r3, [pc, #72]	; (80021ac <HAL_InitTick+0x54>)
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	4b12      	ldr	r3, [pc, #72]	; (80021b0 <HAL_InitTick+0x58>)
 8002166:	781b      	ldrb	r3, [r3, #0]
 8002168:	4619      	mov	r1, r3
 800216a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800216e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002172:	fbb2 f3f3 	udiv	r3, r2, r3
 8002176:	4618      	mov	r0, r3
 8002178:	f000 f967 	bl	800244a <HAL_SYSTICK_Config>
 800217c:	4603      	mov	r3, r0
 800217e:	2b00      	cmp	r3, #0
 8002180:	d001      	beq.n	8002186 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	e00e      	b.n	80021a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2b0f      	cmp	r3, #15
 800218a:	d80a      	bhi.n	80021a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800218c:	2200      	movs	r2, #0
 800218e:	6879      	ldr	r1, [r7, #4]
 8002190:	f04f 30ff 	mov.w	r0, #4294967295
 8002194:	f000 f92f 	bl	80023f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002198:	4a06      	ldr	r2, [pc, #24]	; (80021b4 <HAL_InitTick+0x5c>)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800219e:	2300      	movs	r3, #0
 80021a0:	e000      	b.n	80021a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	3708      	adds	r7, #8
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}
 80021ac:	20000004 	.word	0x20000004
 80021b0:	2000000c 	.word	0x2000000c
 80021b4:	20000008 	.word	0x20000008

080021b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021b8:	b480      	push	{r7}
 80021ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021bc:	4b06      	ldr	r3, [pc, #24]	; (80021d8 <HAL_IncTick+0x20>)
 80021be:	781b      	ldrb	r3, [r3, #0]
 80021c0:	461a      	mov	r2, r3
 80021c2:	4b06      	ldr	r3, [pc, #24]	; (80021dc <HAL_IncTick+0x24>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4413      	add	r3, r2
 80021c8:	4a04      	ldr	r2, [pc, #16]	; (80021dc <HAL_IncTick+0x24>)
 80021ca:	6013      	str	r3, [r2, #0]
}
 80021cc:	bf00      	nop
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr
 80021d6:	bf00      	nop
 80021d8:	2000000c 	.word	0x2000000c
 80021dc:	20000260 	.word	0x20000260

080021e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021e0:	b480      	push	{r7}
 80021e2:	af00      	add	r7, sp, #0
  return uwTick;
 80021e4:	4b03      	ldr	r3, [pc, #12]	; (80021f4 <HAL_GetTick+0x14>)
 80021e6:	681b      	ldr	r3, [r3, #0]
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr
 80021f2:	bf00      	nop
 80021f4:	20000260 	.word	0x20000260

080021f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b084      	sub	sp, #16
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002200:	f7ff ffee 	bl	80021e0 <HAL_GetTick>
 8002204:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002210:	d005      	beq.n	800221e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002212:	4b0a      	ldr	r3, [pc, #40]	; (800223c <HAL_Delay+0x44>)
 8002214:	781b      	ldrb	r3, [r3, #0]
 8002216:	461a      	mov	r2, r3
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	4413      	add	r3, r2
 800221c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800221e:	bf00      	nop
 8002220:	f7ff ffde 	bl	80021e0 <HAL_GetTick>
 8002224:	4602      	mov	r2, r0
 8002226:	68bb      	ldr	r3, [r7, #8]
 8002228:	1ad3      	subs	r3, r2, r3
 800222a:	68fa      	ldr	r2, [r7, #12]
 800222c:	429a      	cmp	r2, r3
 800222e:	d8f7      	bhi.n	8002220 <HAL_Delay+0x28>
  {
  }
}
 8002230:	bf00      	nop
 8002232:	bf00      	nop
 8002234:	3710      	adds	r7, #16
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}
 800223a:	bf00      	nop
 800223c:	2000000c 	.word	0x2000000c

08002240 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002240:	b480      	push	{r7}
 8002242:	b085      	sub	sp, #20
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	f003 0307 	and.w	r3, r3, #7
 800224e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002250:	4b0c      	ldr	r3, [pc, #48]	; (8002284 <__NVIC_SetPriorityGrouping+0x44>)
 8002252:	68db      	ldr	r3, [r3, #12]
 8002254:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002256:	68ba      	ldr	r2, [r7, #8]
 8002258:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800225c:	4013      	ands	r3, r2
 800225e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002268:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800226c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002270:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002272:	4a04      	ldr	r2, [pc, #16]	; (8002284 <__NVIC_SetPriorityGrouping+0x44>)
 8002274:	68bb      	ldr	r3, [r7, #8]
 8002276:	60d3      	str	r3, [r2, #12]
}
 8002278:	bf00      	nop
 800227a:	3714      	adds	r7, #20
 800227c:	46bd      	mov	sp, r7
 800227e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002282:	4770      	bx	lr
 8002284:	e000ed00 	.word	0xe000ed00

08002288 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002288:	b480      	push	{r7}
 800228a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800228c:	4b04      	ldr	r3, [pc, #16]	; (80022a0 <__NVIC_GetPriorityGrouping+0x18>)
 800228e:	68db      	ldr	r3, [r3, #12]
 8002290:	0a1b      	lsrs	r3, r3, #8
 8002292:	f003 0307 	and.w	r3, r3, #7
}
 8002296:	4618      	mov	r0, r3
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr
 80022a0:	e000ed00 	.word	0xe000ed00

080022a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b083      	sub	sp, #12
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	4603      	mov	r3, r0
 80022ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	db0b      	blt.n	80022ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022b6:	79fb      	ldrb	r3, [r7, #7]
 80022b8:	f003 021f 	and.w	r2, r3, #31
 80022bc:	4907      	ldr	r1, [pc, #28]	; (80022dc <__NVIC_EnableIRQ+0x38>)
 80022be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022c2:	095b      	lsrs	r3, r3, #5
 80022c4:	2001      	movs	r0, #1
 80022c6:	fa00 f202 	lsl.w	r2, r0, r2
 80022ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80022ce:	bf00      	nop
 80022d0:	370c      	adds	r7, #12
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr
 80022da:	bf00      	nop
 80022dc:	e000e100 	.word	0xe000e100

080022e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b083      	sub	sp, #12
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	4603      	mov	r3, r0
 80022e8:	6039      	str	r1, [r7, #0]
 80022ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	db0a      	blt.n	800230a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	b2da      	uxtb	r2, r3
 80022f8:	490c      	ldr	r1, [pc, #48]	; (800232c <__NVIC_SetPriority+0x4c>)
 80022fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022fe:	0112      	lsls	r2, r2, #4
 8002300:	b2d2      	uxtb	r2, r2
 8002302:	440b      	add	r3, r1
 8002304:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002308:	e00a      	b.n	8002320 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	b2da      	uxtb	r2, r3
 800230e:	4908      	ldr	r1, [pc, #32]	; (8002330 <__NVIC_SetPriority+0x50>)
 8002310:	79fb      	ldrb	r3, [r7, #7]
 8002312:	f003 030f 	and.w	r3, r3, #15
 8002316:	3b04      	subs	r3, #4
 8002318:	0112      	lsls	r2, r2, #4
 800231a:	b2d2      	uxtb	r2, r2
 800231c:	440b      	add	r3, r1
 800231e:	761a      	strb	r2, [r3, #24]
}
 8002320:	bf00      	nop
 8002322:	370c      	adds	r7, #12
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr
 800232c:	e000e100 	.word	0xe000e100
 8002330:	e000ed00 	.word	0xe000ed00

08002334 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002334:	b480      	push	{r7}
 8002336:	b089      	sub	sp, #36	; 0x24
 8002338:	af00      	add	r7, sp, #0
 800233a:	60f8      	str	r0, [r7, #12]
 800233c:	60b9      	str	r1, [r7, #8]
 800233e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	f003 0307 	and.w	r3, r3, #7
 8002346:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002348:	69fb      	ldr	r3, [r7, #28]
 800234a:	f1c3 0307 	rsb	r3, r3, #7
 800234e:	2b04      	cmp	r3, #4
 8002350:	bf28      	it	cs
 8002352:	2304      	movcs	r3, #4
 8002354:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002356:	69fb      	ldr	r3, [r7, #28]
 8002358:	3304      	adds	r3, #4
 800235a:	2b06      	cmp	r3, #6
 800235c:	d902      	bls.n	8002364 <NVIC_EncodePriority+0x30>
 800235e:	69fb      	ldr	r3, [r7, #28]
 8002360:	3b03      	subs	r3, #3
 8002362:	e000      	b.n	8002366 <NVIC_EncodePriority+0x32>
 8002364:	2300      	movs	r3, #0
 8002366:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002368:	f04f 32ff 	mov.w	r2, #4294967295
 800236c:	69bb      	ldr	r3, [r7, #24]
 800236e:	fa02 f303 	lsl.w	r3, r2, r3
 8002372:	43da      	mvns	r2, r3
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	401a      	ands	r2, r3
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800237c:	f04f 31ff 	mov.w	r1, #4294967295
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	fa01 f303 	lsl.w	r3, r1, r3
 8002386:	43d9      	mvns	r1, r3
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800238c:	4313      	orrs	r3, r2
         );
}
 800238e:	4618      	mov	r0, r3
 8002390:	3724      	adds	r7, #36	; 0x24
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr
	...

0800239c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b082      	sub	sp, #8
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	3b01      	subs	r3, #1
 80023a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023ac:	d301      	bcc.n	80023b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023ae:	2301      	movs	r3, #1
 80023b0:	e00f      	b.n	80023d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023b2:	4a0a      	ldr	r2, [pc, #40]	; (80023dc <SysTick_Config+0x40>)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	3b01      	subs	r3, #1
 80023b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023ba:	210f      	movs	r1, #15
 80023bc:	f04f 30ff 	mov.w	r0, #4294967295
 80023c0:	f7ff ff8e 	bl	80022e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023c4:	4b05      	ldr	r3, [pc, #20]	; (80023dc <SysTick_Config+0x40>)
 80023c6:	2200      	movs	r2, #0
 80023c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023ca:	4b04      	ldr	r3, [pc, #16]	; (80023dc <SysTick_Config+0x40>)
 80023cc:	2207      	movs	r2, #7
 80023ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023d0:	2300      	movs	r3, #0
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3708      	adds	r7, #8
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	e000e010 	.word	0xe000e010

080023e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b082      	sub	sp, #8
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023e8:	6878      	ldr	r0, [r7, #4]
 80023ea:	f7ff ff29 	bl	8002240 <__NVIC_SetPriorityGrouping>
}
 80023ee:	bf00      	nop
 80023f0:	3708      	adds	r7, #8
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}

080023f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023f6:	b580      	push	{r7, lr}
 80023f8:	b086      	sub	sp, #24
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	4603      	mov	r3, r0
 80023fe:	60b9      	str	r1, [r7, #8]
 8002400:	607a      	str	r2, [r7, #4]
 8002402:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002404:	2300      	movs	r3, #0
 8002406:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002408:	f7ff ff3e 	bl	8002288 <__NVIC_GetPriorityGrouping>
 800240c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800240e:	687a      	ldr	r2, [r7, #4]
 8002410:	68b9      	ldr	r1, [r7, #8]
 8002412:	6978      	ldr	r0, [r7, #20]
 8002414:	f7ff ff8e 	bl	8002334 <NVIC_EncodePriority>
 8002418:	4602      	mov	r2, r0
 800241a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800241e:	4611      	mov	r1, r2
 8002420:	4618      	mov	r0, r3
 8002422:	f7ff ff5d 	bl	80022e0 <__NVIC_SetPriority>
}
 8002426:	bf00      	nop
 8002428:	3718      	adds	r7, #24
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}

0800242e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800242e:	b580      	push	{r7, lr}
 8002430:	b082      	sub	sp, #8
 8002432:	af00      	add	r7, sp, #0
 8002434:	4603      	mov	r3, r0
 8002436:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002438:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800243c:	4618      	mov	r0, r3
 800243e:	f7ff ff31 	bl	80022a4 <__NVIC_EnableIRQ>
}
 8002442:	bf00      	nop
 8002444:	3708      	adds	r7, #8
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}

0800244a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800244a:	b580      	push	{r7, lr}
 800244c:	b082      	sub	sp, #8
 800244e:	af00      	add	r7, sp, #0
 8002450:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002452:	6878      	ldr	r0, [r7, #4]
 8002454:	f7ff ffa2 	bl	800239c <SysTick_Config>
 8002458:	4603      	mov	r3, r0
}
 800245a:	4618      	mov	r0, r3
 800245c:	3708      	adds	r7, #8
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}

08002462 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002462:	b580      	push	{r7, lr}
 8002464:	b084      	sub	sp, #16
 8002466:	af00      	add	r7, sp, #0
 8002468:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800246e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002470:	f7ff feb6 	bl	80021e0 <HAL_GetTick>
 8002474:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800247c:	b2db      	uxtb	r3, r3
 800247e:	2b02      	cmp	r3, #2
 8002480:	d008      	beq.n	8002494 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2280      	movs	r2, #128	; 0x80
 8002486:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2200      	movs	r2, #0
 800248c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	e052      	b.n	800253a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f022 0216 	bic.w	r2, r2, #22
 80024a2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	695a      	ldr	r2, [r3, #20]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80024b2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d103      	bne.n	80024c4 <HAL_DMA_Abort+0x62>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d007      	beq.n	80024d4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f022 0208 	bic.w	r2, r2, #8
 80024d2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	681a      	ldr	r2, [r3, #0]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f022 0201 	bic.w	r2, r2, #1
 80024e2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024e4:	e013      	b.n	800250e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80024e6:	f7ff fe7b 	bl	80021e0 <HAL_GetTick>
 80024ea:	4602      	mov	r2, r0
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	1ad3      	subs	r3, r2, r3
 80024f0:	2b05      	cmp	r3, #5
 80024f2:	d90c      	bls.n	800250e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2220      	movs	r2, #32
 80024f8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2203      	movs	r2, #3
 80024fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2200      	movs	r2, #0
 8002506:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800250a:	2303      	movs	r3, #3
 800250c:	e015      	b.n	800253a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f003 0301 	and.w	r3, r3, #1
 8002518:	2b00      	cmp	r3, #0
 800251a:	d1e4      	bne.n	80024e6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002520:	223f      	movs	r2, #63	; 0x3f
 8002522:	409a      	lsls	r2, r3
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2201      	movs	r2, #1
 800252c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2200      	movs	r2, #0
 8002534:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002538:	2300      	movs	r3, #0
}
 800253a:	4618      	mov	r0, r3
 800253c:	3710      	adds	r7, #16
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}

08002542 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002542:	b480      	push	{r7}
 8002544:	b083      	sub	sp, #12
 8002546:	af00      	add	r7, sp, #0
 8002548:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002550:	b2db      	uxtb	r3, r3
 8002552:	2b02      	cmp	r3, #2
 8002554:	d004      	beq.n	8002560 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2280      	movs	r2, #128	; 0x80
 800255a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800255c:	2301      	movs	r3, #1
 800255e:	e00c      	b.n	800257a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2205      	movs	r2, #5
 8002564:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	681a      	ldr	r2, [r3, #0]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f022 0201 	bic.w	r2, r2, #1
 8002576:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002578:	2300      	movs	r3, #0
}
 800257a:	4618      	mov	r0, r3
 800257c:	370c      	adds	r7, #12
 800257e:	46bd      	mov	sp, r7
 8002580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002584:	4770      	bx	lr
	...

08002588 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002588:	b480      	push	{r7}
 800258a:	b089      	sub	sp, #36	; 0x24
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
 8002590:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002592:	2300      	movs	r3, #0
 8002594:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002596:	2300      	movs	r3, #0
 8002598:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800259a:	2300      	movs	r3, #0
 800259c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800259e:	2300      	movs	r3, #0
 80025a0:	61fb      	str	r3, [r7, #28]
 80025a2:	e159      	b.n	8002858 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80025a4:	2201      	movs	r2, #1
 80025a6:	69fb      	ldr	r3, [r7, #28]
 80025a8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	697a      	ldr	r2, [r7, #20]
 80025b4:	4013      	ands	r3, r2
 80025b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80025b8:	693a      	ldr	r2, [r7, #16]
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	429a      	cmp	r2, r3
 80025be:	f040 8148 	bne.w	8002852 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	f003 0303 	and.w	r3, r3, #3
 80025ca:	2b01      	cmp	r3, #1
 80025cc:	d005      	beq.n	80025da <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025d6:	2b02      	cmp	r3, #2
 80025d8:	d130      	bne.n	800263c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80025e0:	69fb      	ldr	r3, [r7, #28]
 80025e2:	005b      	lsls	r3, r3, #1
 80025e4:	2203      	movs	r2, #3
 80025e6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ea:	43db      	mvns	r3, r3
 80025ec:	69ba      	ldr	r2, [r7, #24]
 80025ee:	4013      	ands	r3, r2
 80025f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	68da      	ldr	r2, [r3, #12]
 80025f6:	69fb      	ldr	r3, [r7, #28]
 80025f8:	005b      	lsls	r3, r3, #1
 80025fa:	fa02 f303 	lsl.w	r3, r2, r3
 80025fe:	69ba      	ldr	r2, [r7, #24]
 8002600:	4313      	orrs	r3, r2
 8002602:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	69ba      	ldr	r2, [r7, #24]
 8002608:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002610:	2201      	movs	r2, #1
 8002612:	69fb      	ldr	r3, [r7, #28]
 8002614:	fa02 f303 	lsl.w	r3, r2, r3
 8002618:	43db      	mvns	r3, r3
 800261a:	69ba      	ldr	r2, [r7, #24]
 800261c:	4013      	ands	r3, r2
 800261e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	091b      	lsrs	r3, r3, #4
 8002626:	f003 0201 	and.w	r2, r3, #1
 800262a:	69fb      	ldr	r3, [r7, #28]
 800262c:	fa02 f303 	lsl.w	r3, r2, r3
 8002630:	69ba      	ldr	r2, [r7, #24]
 8002632:	4313      	orrs	r3, r2
 8002634:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	69ba      	ldr	r2, [r7, #24]
 800263a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	f003 0303 	and.w	r3, r3, #3
 8002644:	2b03      	cmp	r3, #3
 8002646:	d017      	beq.n	8002678 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	68db      	ldr	r3, [r3, #12]
 800264c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800264e:	69fb      	ldr	r3, [r7, #28]
 8002650:	005b      	lsls	r3, r3, #1
 8002652:	2203      	movs	r2, #3
 8002654:	fa02 f303 	lsl.w	r3, r2, r3
 8002658:	43db      	mvns	r3, r3
 800265a:	69ba      	ldr	r2, [r7, #24]
 800265c:	4013      	ands	r3, r2
 800265e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	689a      	ldr	r2, [r3, #8]
 8002664:	69fb      	ldr	r3, [r7, #28]
 8002666:	005b      	lsls	r3, r3, #1
 8002668:	fa02 f303 	lsl.w	r3, r2, r3
 800266c:	69ba      	ldr	r2, [r7, #24]
 800266e:	4313      	orrs	r3, r2
 8002670:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	69ba      	ldr	r2, [r7, #24]
 8002676:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	f003 0303 	and.w	r3, r3, #3
 8002680:	2b02      	cmp	r3, #2
 8002682:	d123      	bne.n	80026cc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002684:	69fb      	ldr	r3, [r7, #28]
 8002686:	08da      	lsrs	r2, r3, #3
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	3208      	adds	r2, #8
 800268c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002690:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002692:	69fb      	ldr	r3, [r7, #28]
 8002694:	f003 0307 	and.w	r3, r3, #7
 8002698:	009b      	lsls	r3, r3, #2
 800269a:	220f      	movs	r2, #15
 800269c:	fa02 f303 	lsl.w	r3, r2, r3
 80026a0:	43db      	mvns	r3, r3
 80026a2:	69ba      	ldr	r2, [r7, #24]
 80026a4:	4013      	ands	r3, r2
 80026a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	691a      	ldr	r2, [r3, #16]
 80026ac:	69fb      	ldr	r3, [r7, #28]
 80026ae:	f003 0307 	and.w	r3, r3, #7
 80026b2:	009b      	lsls	r3, r3, #2
 80026b4:	fa02 f303 	lsl.w	r3, r2, r3
 80026b8:	69ba      	ldr	r2, [r7, #24]
 80026ba:	4313      	orrs	r3, r2
 80026bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80026be:	69fb      	ldr	r3, [r7, #28]
 80026c0:	08da      	lsrs	r2, r3, #3
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	3208      	adds	r2, #8
 80026c6:	69b9      	ldr	r1, [r7, #24]
 80026c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80026d2:	69fb      	ldr	r3, [r7, #28]
 80026d4:	005b      	lsls	r3, r3, #1
 80026d6:	2203      	movs	r2, #3
 80026d8:	fa02 f303 	lsl.w	r3, r2, r3
 80026dc:	43db      	mvns	r3, r3
 80026de:	69ba      	ldr	r2, [r7, #24]
 80026e0:	4013      	ands	r3, r2
 80026e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	f003 0203 	and.w	r2, r3, #3
 80026ec:	69fb      	ldr	r3, [r7, #28]
 80026ee:	005b      	lsls	r3, r3, #1
 80026f0:	fa02 f303 	lsl.w	r3, r2, r3
 80026f4:	69ba      	ldr	r2, [r7, #24]
 80026f6:	4313      	orrs	r3, r2
 80026f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	69ba      	ldr	r2, [r7, #24]
 80026fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002708:	2b00      	cmp	r3, #0
 800270a:	f000 80a2 	beq.w	8002852 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800270e:	2300      	movs	r3, #0
 8002710:	60fb      	str	r3, [r7, #12]
 8002712:	4b57      	ldr	r3, [pc, #348]	; (8002870 <HAL_GPIO_Init+0x2e8>)
 8002714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002716:	4a56      	ldr	r2, [pc, #344]	; (8002870 <HAL_GPIO_Init+0x2e8>)
 8002718:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800271c:	6453      	str	r3, [r2, #68]	; 0x44
 800271e:	4b54      	ldr	r3, [pc, #336]	; (8002870 <HAL_GPIO_Init+0x2e8>)
 8002720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002722:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002726:	60fb      	str	r3, [r7, #12]
 8002728:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800272a:	4a52      	ldr	r2, [pc, #328]	; (8002874 <HAL_GPIO_Init+0x2ec>)
 800272c:	69fb      	ldr	r3, [r7, #28]
 800272e:	089b      	lsrs	r3, r3, #2
 8002730:	3302      	adds	r3, #2
 8002732:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002736:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002738:	69fb      	ldr	r3, [r7, #28]
 800273a:	f003 0303 	and.w	r3, r3, #3
 800273e:	009b      	lsls	r3, r3, #2
 8002740:	220f      	movs	r2, #15
 8002742:	fa02 f303 	lsl.w	r3, r2, r3
 8002746:	43db      	mvns	r3, r3
 8002748:	69ba      	ldr	r2, [r7, #24]
 800274a:	4013      	ands	r3, r2
 800274c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	4a49      	ldr	r2, [pc, #292]	; (8002878 <HAL_GPIO_Init+0x2f0>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d019      	beq.n	800278a <HAL_GPIO_Init+0x202>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	4a48      	ldr	r2, [pc, #288]	; (800287c <HAL_GPIO_Init+0x2f4>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d013      	beq.n	8002786 <HAL_GPIO_Init+0x1fe>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	4a47      	ldr	r2, [pc, #284]	; (8002880 <HAL_GPIO_Init+0x2f8>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d00d      	beq.n	8002782 <HAL_GPIO_Init+0x1fa>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	4a46      	ldr	r2, [pc, #280]	; (8002884 <HAL_GPIO_Init+0x2fc>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d007      	beq.n	800277e <HAL_GPIO_Init+0x1f6>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	4a45      	ldr	r2, [pc, #276]	; (8002888 <HAL_GPIO_Init+0x300>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d101      	bne.n	800277a <HAL_GPIO_Init+0x1f2>
 8002776:	2304      	movs	r3, #4
 8002778:	e008      	b.n	800278c <HAL_GPIO_Init+0x204>
 800277a:	2307      	movs	r3, #7
 800277c:	e006      	b.n	800278c <HAL_GPIO_Init+0x204>
 800277e:	2303      	movs	r3, #3
 8002780:	e004      	b.n	800278c <HAL_GPIO_Init+0x204>
 8002782:	2302      	movs	r3, #2
 8002784:	e002      	b.n	800278c <HAL_GPIO_Init+0x204>
 8002786:	2301      	movs	r3, #1
 8002788:	e000      	b.n	800278c <HAL_GPIO_Init+0x204>
 800278a:	2300      	movs	r3, #0
 800278c:	69fa      	ldr	r2, [r7, #28]
 800278e:	f002 0203 	and.w	r2, r2, #3
 8002792:	0092      	lsls	r2, r2, #2
 8002794:	4093      	lsls	r3, r2
 8002796:	69ba      	ldr	r2, [r7, #24]
 8002798:	4313      	orrs	r3, r2
 800279a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800279c:	4935      	ldr	r1, [pc, #212]	; (8002874 <HAL_GPIO_Init+0x2ec>)
 800279e:	69fb      	ldr	r3, [r7, #28]
 80027a0:	089b      	lsrs	r3, r3, #2
 80027a2:	3302      	adds	r3, #2
 80027a4:	69ba      	ldr	r2, [r7, #24]
 80027a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80027aa:	4b38      	ldr	r3, [pc, #224]	; (800288c <HAL_GPIO_Init+0x304>)
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	43db      	mvns	r3, r3
 80027b4:	69ba      	ldr	r2, [r7, #24]
 80027b6:	4013      	ands	r3, r2
 80027b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d003      	beq.n	80027ce <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80027c6:	69ba      	ldr	r2, [r7, #24]
 80027c8:	693b      	ldr	r3, [r7, #16]
 80027ca:	4313      	orrs	r3, r2
 80027cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80027ce:	4a2f      	ldr	r2, [pc, #188]	; (800288c <HAL_GPIO_Init+0x304>)
 80027d0:	69bb      	ldr	r3, [r7, #24]
 80027d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80027d4:	4b2d      	ldr	r3, [pc, #180]	; (800288c <HAL_GPIO_Init+0x304>)
 80027d6:	68db      	ldr	r3, [r3, #12]
 80027d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	43db      	mvns	r3, r3
 80027de:	69ba      	ldr	r2, [r7, #24]
 80027e0:	4013      	ands	r3, r2
 80027e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d003      	beq.n	80027f8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80027f0:	69ba      	ldr	r2, [r7, #24]
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	4313      	orrs	r3, r2
 80027f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80027f8:	4a24      	ldr	r2, [pc, #144]	; (800288c <HAL_GPIO_Init+0x304>)
 80027fa:	69bb      	ldr	r3, [r7, #24]
 80027fc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80027fe:	4b23      	ldr	r3, [pc, #140]	; (800288c <HAL_GPIO_Init+0x304>)
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	43db      	mvns	r3, r3
 8002808:	69ba      	ldr	r2, [r7, #24]
 800280a:	4013      	ands	r3, r2
 800280c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002816:	2b00      	cmp	r3, #0
 8002818:	d003      	beq.n	8002822 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800281a:	69ba      	ldr	r2, [r7, #24]
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	4313      	orrs	r3, r2
 8002820:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002822:	4a1a      	ldr	r2, [pc, #104]	; (800288c <HAL_GPIO_Init+0x304>)
 8002824:	69bb      	ldr	r3, [r7, #24]
 8002826:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002828:	4b18      	ldr	r3, [pc, #96]	; (800288c <HAL_GPIO_Init+0x304>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	43db      	mvns	r3, r3
 8002832:	69ba      	ldr	r2, [r7, #24]
 8002834:	4013      	ands	r3, r2
 8002836:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002840:	2b00      	cmp	r3, #0
 8002842:	d003      	beq.n	800284c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002844:	69ba      	ldr	r2, [r7, #24]
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	4313      	orrs	r3, r2
 800284a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800284c:	4a0f      	ldr	r2, [pc, #60]	; (800288c <HAL_GPIO_Init+0x304>)
 800284e:	69bb      	ldr	r3, [r7, #24]
 8002850:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002852:	69fb      	ldr	r3, [r7, #28]
 8002854:	3301      	adds	r3, #1
 8002856:	61fb      	str	r3, [r7, #28]
 8002858:	69fb      	ldr	r3, [r7, #28]
 800285a:	2b0f      	cmp	r3, #15
 800285c:	f67f aea2 	bls.w	80025a4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002860:	bf00      	nop
 8002862:	bf00      	nop
 8002864:	3724      	adds	r7, #36	; 0x24
 8002866:	46bd      	mov	sp, r7
 8002868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286c:	4770      	bx	lr
 800286e:	bf00      	nop
 8002870:	40023800 	.word	0x40023800
 8002874:	40013800 	.word	0x40013800
 8002878:	40020000 	.word	0x40020000
 800287c:	40020400 	.word	0x40020400
 8002880:	40020800 	.word	0x40020800
 8002884:	40020c00 	.word	0x40020c00
 8002888:	40021000 	.word	0x40021000
 800288c:	40013c00 	.word	0x40013c00

08002890 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002890:	b480      	push	{r7}
 8002892:	b085      	sub	sp, #20
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
 8002898:	460b      	mov	r3, r1
 800289a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	691a      	ldr	r2, [r3, #16]
 80028a0:	887b      	ldrh	r3, [r7, #2]
 80028a2:	4013      	ands	r3, r2
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d002      	beq.n	80028ae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80028a8:	2301      	movs	r3, #1
 80028aa:	73fb      	strb	r3, [r7, #15]
 80028ac:	e001      	b.n	80028b2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80028ae:	2300      	movs	r3, #0
 80028b0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80028b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	3714      	adds	r7, #20
 80028b8:	46bd      	mov	sp, r7
 80028ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028be:	4770      	bx	lr

080028c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b083      	sub	sp, #12
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
 80028c8:	460b      	mov	r3, r1
 80028ca:	807b      	strh	r3, [r7, #2]
 80028cc:	4613      	mov	r3, r2
 80028ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028d0:	787b      	ldrb	r3, [r7, #1]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d003      	beq.n	80028de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028d6:	887a      	ldrh	r2, [r7, #2]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80028dc:	e003      	b.n	80028e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80028de:	887b      	ldrh	r3, [r7, #2]
 80028e0:	041a      	lsls	r2, r3, #16
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	619a      	str	r2, [r3, #24]
}
 80028e6:	bf00      	nop
 80028e8:	370c      	adds	r7, #12
 80028ea:	46bd      	mov	sp, r7
 80028ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f0:	4770      	bx	lr
	...

080028f4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b082      	sub	sp, #8
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	4603      	mov	r3, r0
 80028fc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80028fe:	4b08      	ldr	r3, [pc, #32]	; (8002920 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002900:	695a      	ldr	r2, [r3, #20]
 8002902:	88fb      	ldrh	r3, [r7, #6]
 8002904:	4013      	ands	r3, r2
 8002906:	2b00      	cmp	r3, #0
 8002908:	d006      	beq.n	8002918 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800290a:	4a05      	ldr	r2, [pc, #20]	; (8002920 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800290c:	88fb      	ldrh	r3, [r7, #6]
 800290e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002910:	88fb      	ldrh	r3, [r7, #6]
 8002912:	4618      	mov	r0, r3
 8002914:	f7fe fe72 	bl	80015fc <HAL_GPIO_EXTI_Callback>
  }
}
 8002918:	bf00      	nop
 800291a:	3708      	adds	r7, #8
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}
 8002920:	40013c00 	.word	0x40013c00

08002924 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b086      	sub	sp, #24
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d101      	bne.n	8002936 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e267      	b.n	8002e06 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 0301 	and.w	r3, r3, #1
 800293e:	2b00      	cmp	r3, #0
 8002940:	d075      	beq.n	8002a2e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002942:	4b88      	ldr	r3, [pc, #544]	; (8002b64 <HAL_RCC_OscConfig+0x240>)
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	f003 030c 	and.w	r3, r3, #12
 800294a:	2b04      	cmp	r3, #4
 800294c:	d00c      	beq.n	8002968 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800294e:	4b85      	ldr	r3, [pc, #532]	; (8002b64 <HAL_RCC_OscConfig+0x240>)
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002956:	2b08      	cmp	r3, #8
 8002958:	d112      	bne.n	8002980 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800295a:	4b82      	ldr	r3, [pc, #520]	; (8002b64 <HAL_RCC_OscConfig+0x240>)
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002962:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002966:	d10b      	bne.n	8002980 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002968:	4b7e      	ldr	r3, [pc, #504]	; (8002b64 <HAL_RCC_OscConfig+0x240>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002970:	2b00      	cmp	r3, #0
 8002972:	d05b      	beq.n	8002a2c <HAL_RCC_OscConfig+0x108>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d157      	bne.n	8002a2c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800297c:	2301      	movs	r3, #1
 800297e:	e242      	b.n	8002e06 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002988:	d106      	bne.n	8002998 <HAL_RCC_OscConfig+0x74>
 800298a:	4b76      	ldr	r3, [pc, #472]	; (8002b64 <HAL_RCC_OscConfig+0x240>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a75      	ldr	r2, [pc, #468]	; (8002b64 <HAL_RCC_OscConfig+0x240>)
 8002990:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002994:	6013      	str	r3, [r2, #0]
 8002996:	e01d      	b.n	80029d4 <HAL_RCC_OscConfig+0xb0>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029a0:	d10c      	bne.n	80029bc <HAL_RCC_OscConfig+0x98>
 80029a2:	4b70      	ldr	r3, [pc, #448]	; (8002b64 <HAL_RCC_OscConfig+0x240>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a6f      	ldr	r2, [pc, #444]	; (8002b64 <HAL_RCC_OscConfig+0x240>)
 80029a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029ac:	6013      	str	r3, [r2, #0]
 80029ae:	4b6d      	ldr	r3, [pc, #436]	; (8002b64 <HAL_RCC_OscConfig+0x240>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a6c      	ldr	r2, [pc, #432]	; (8002b64 <HAL_RCC_OscConfig+0x240>)
 80029b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029b8:	6013      	str	r3, [r2, #0]
 80029ba:	e00b      	b.n	80029d4 <HAL_RCC_OscConfig+0xb0>
 80029bc:	4b69      	ldr	r3, [pc, #420]	; (8002b64 <HAL_RCC_OscConfig+0x240>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a68      	ldr	r2, [pc, #416]	; (8002b64 <HAL_RCC_OscConfig+0x240>)
 80029c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029c6:	6013      	str	r3, [r2, #0]
 80029c8:	4b66      	ldr	r3, [pc, #408]	; (8002b64 <HAL_RCC_OscConfig+0x240>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a65      	ldr	r2, [pc, #404]	; (8002b64 <HAL_RCC_OscConfig+0x240>)
 80029ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d013      	beq.n	8002a04 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029dc:	f7ff fc00 	bl	80021e0 <HAL_GetTick>
 80029e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029e2:	e008      	b.n	80029f6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029e4:	f7ff fbfc 	bl	80021e0 <HAL_GetTick>
 80029e8:	4602      	mov	r2, r0
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	1ad3      	subs	r3, r2, r3
 80029ee:	2b64      	cmp	r3, #100	; 0x64
 80029f0:	d901      	bls.n	80029f6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80029f2:	2303      	movs	r3, #3
 80029f4:	e207      	b.n	8002e06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029f6:	4b5b      	ldr	r3, [pc, #364]	; (8002b64 <HAL_RCC_OscConfig+0x240>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d0f0      	beq.n	80029e4 <HAL_RCC_OscConfig+0xc0>
 8002a02:	e014      	b.n	8002a2e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a04:	f7ff fbec 	bl	80021e0 <HAL_GetTick>
 8002a08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a0a:	e008      	b.n	8002a1e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a0c:	f7ff fbe8 	bl	80021e0 <HAL_GetTick>
 8002a10:	4602      	mov	r2, r0
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	1ad3      	subs	r3, r2, r3
 8002a16:	2b64      	cmp	r3, #100	; 0x64
 8002a18:	d901      	bls.n	8002a1e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002a1a:	2303      	movs	r3, #3
 8002a1c:	e1f3      	b.n	8002e06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a1e:	4b51      	ldr	r3, [pc, #324]	; (8002b64 <HAL_RCC_OscConfig+0x240>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d1f0      	bne.n	8002a0c <HAL_RCC_OscConfig+0xe8>
 8002a2a:	e000      	b.n	8002a2e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f003 0302 	and.w	r3, r3, #2
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d063      	beq.n	8002b02 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a3a:	4b4a      	ldr	r3, [pc, #296]	; (8002b64 <HAL_RCC_OscConfig+0x240>)
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	f003 030c 	and.w	r3, r3, #12
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d00b      	beq.n	8002a5e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a46:	4b47      	ldr	r3, [pc, #284]	; (8002b64 <HAL_RCC_OscConfig+0x240>)
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a4e:	2b08      	cmp	r3, #8
 8002a50:	d11c      	bne.n	8002a8c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a52:	4b44      	ldr	r3, [pc, #272]	; (8002b64 <HAL_RCC_OscConfig+0x240>)
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d116      	bne.n	8002a8c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a5e:	4b41      	ldr	r3, [pc, #260]	; (8002b64 <HAL_RCC_OscConfig+0x240>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 0302 	and.w	r3, r3, #2
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d005      	beq.n	8002a76 <HAL_RCC_OscConfig+0x152>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	68db      	ldr	r3, [r3, #12]
 8002a6e:	2b01      	cmp	r3, #1
 8002a70:	d001      	beq.n	8002a76 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	e1c7      	b.n	8002e06 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a76:	4b3b      	ldr	r3, [pc, #236]	; (8002b64 <HAL_RCC_OscConfig+0x240>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	691b      	ldr	r3, [r3, #16]
 8002a82:	00db      	lsls	r3, r3, #3
 8002a84:	4937      	ldr	r1, [pc, #220]	; (8002b64 <HAL_RCC_OscConfig+0x240>)
 8002a86:	4313      	orrs	r3, r2
 8002a88:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a8a:	e03a      	b.n	8002b02 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	68db      	ldr	r3, [r3, #12]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d020      	beq.n	8002ad6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a94:	4b34      	ldr	r3, [pc, #208]	; (8002b68 <HAL_RCC_OscConfig+0x244>)
 8002a96:	2201      	movs	r2, #1
 8002a98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a9a:	f7ff fba1 	bl	80021e0 <HAL_GetTick>
 8002a9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002aa0:	e008      	b.n	8002ab4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002aa2:	f7ff fb9d 	bl	80021e0 <HAL_GetTick>
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	693b      	ldr	r3, [r7, #16]
 8002aaa:	1ad3      	subs	r3, r2, r3
 8002aac:	2b02      	cmp	r3, #2
 8002aae:	d901      	bls.n	8002ab4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002ab0:	2303      	movs	r3, #3
 8002ab2:	e1a8      	b.n	8002e06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ab4:	4b2b      	ldr	r3, [pc, #172]	; (8002b64 <HAL_RCC_OscConfig+0x240>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f003 0302 	and.w	r3, r3, #2
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d0f0      	beq.n	8002aa2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ac0:	4b28      	ldr	r3, [pc, #160]	; (8002b64 <HAL_RCC_OscConfig+0x240>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	691b      	ldr	r3, [r3, #16]
 8002acc:	00db      	lsls	r3, r3, #3
 8002ace:	4925      	ldr	r1, [pc, #148]	; (8002b64 <HAL_RCC_OscConfig+0x240>)
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	600b      	str	r3, [r1, #0]
 8002ad4:	e015      	b.n	8002b02 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ad6:	4b24      	ldr	r3, [pc, #144]	; (8002b68 <HAL_RCC_OscConfig+0x244>)
 8002ad8:	2200      	movs	r2, #0
 8002ada:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002adc:	f7ff fb80 	bl	80021e0 <HAL_GetTick>
 8002ae0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ae2:	e008      	b.n	8002af6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ae4:	f7ff fb7c 	bl	80021e0 <HAL_GetTick>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	1ad3      	subs	r3, r2, r3
 8002aee:	2b02      	cmp	r3, #2
 8002af0:	d901      	bls.n	8002af6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002af2:	2303      	movs	r3, #3
 8002af4:	e187      	b.n	8002e06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002af6:	4b1b      	ldr	r3, [pc, #108]	; (8002b64 <HAL_RCC_OscConfig+0x240>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 0302 	and.w	r3, r3, #2
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d1f0      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f003 0308 	and.w	r3, r3, #8
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d036      	beq.n	8002b7c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	695b      	ldr	r3, [r3, #20]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d016      	beq.n	8002b44 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b16:	4b15      	ldr	r3, [pc, #84]	; (8002b6c <HAL_RCC_OscConfig+0x248>)
 8002b18:	2201      	movs	r2, #1
 8002b1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b1c:	f7ff fb60 	bl	80021e0 <HAL_GetTick>
 8002b20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b22:	e008      	b.n	8002b36 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b24:	f7ff fb5c 	bl	80021e0 <HAL_GetTick>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	1ad3      	subs	r3, r2, r3
 8002b2e:	2b02      	cmp	r3, #2
 8002b30:	d901      	bls.n	8002b36 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002b32:	2303      	movs	r3, #3
 8002b34:	e167      	b.n	8002e06 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b36:	4b0b      	ldr	r3, [pc, #44]	; (8002b64 <HAL_RCC_OscConfig+0x240>)
 8002b38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b3a:	f003 0302 	and.w	r3, r3, #2
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d0f0      	beq.n	8002b24 <HAL_RCC_OscConfig+0x200>
 8002b42:	e01b      	b.n	8002b7c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b44:	4b09      	ldr	r3, [pc, #36]	; (8002b6c <HAL_RCC_OscConfig+0x248>)
 8002b46:	2200      	movs	r2, #0
 8002b48:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b4a:	f7ff fb49 	bl	80021e0 <HAL_GetTick>
 8002b4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b50:	e00e      	b.n	8002b70 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b52:	f7ff fb45 	bl	80021e0 <HAL_GetTick>
 8002b56:	4602      	mov	r2, r0
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	1ad3      	subs	r3, r2, r3
 8002b5c:	2b02      	cmp	r3, #2
 8002b5e:	d907      	bls.n	8002b70 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002b60:	2303      	movs	r3, #3
 8002b62:	e150      	b.n	8002e06 <HAL_RCC_OscConfig+0x4e2>
 8002b64:	40023800 	.word	0x40023800
 8002b68:	42470000 	.word	0x42470000
 8002b6c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b70:	4b88      	ldr	r3, [pc, #544]	; (8002d94 <HAL_RCC_OscConfig+0x470>)
 8002b72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b74:	f003 0302 	and.w	r3, r3, #2
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d1ea      	bne.n	8002b52 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f003 0304 	and.w	r3, r3, #4
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	f000 8097 	beq.w	8002cb8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b8e:	4b81      	ldr	r3, [pc, #516]	; (8002d94 <HAL_RCC_OscConfig+0x470>)
 8002b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d10f      	bne.n	8002bba <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	60bb      	str	r3, [r7, #8]
 8002b9e:	4b7d      	ldr	r3, [pc, #500]	; (8002d94 <HAL_RCC_OscConfig+0x470>)
 8002ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba2:	4a7c      	ldr	r2, [pc, #496]	; (8002d94 <HAL_RCC_OscConfig+0x470>)
 8002ba4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ba8:	6413      	str	r3, [r2, #64]	; 0x40
 8002baa:	4b7a      	ldr	r3, [pc, #488]	; (8002d94 <HAL_RCC_OscConfig+0x470>)
 8002bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bb2:	60bb      	str	r3, [r7, #8]
 8002bb4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bba:	4b77      	ldr	r3, [pc, #476]	; (8002d98 <HAL_RCC_OscConfig+0x474>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d118      	bne.n	8002bf8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002bc6:	4b74      	ldr	r3, [pc, #464]	; (8002d98 <HAL_RCC_OscConfig+0x474>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a73      	ldr	r2, [pc, #460]	; (8002d98 <HAL_RCC_OscConfig+0x474>)
 8002bcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bd0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bd2:	f7ff fb05 	bl	80021e0 <HAL_GetTick>
 8002bd6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bd8:	e008      	b.n	8002bec <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bda:	f7ff fb01 	bl	80021e0 <HAL_GetTick>
 8002bde:	4602      	mov	r2, r0
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	1ad3      	subs	r3, r2, r3
 8002be4:	2b02      	cmp	r3, #2
 8002be6:	d901      	bls.n	8002bec <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002be8:	2303      	movs	r3, #3
 8002bea:	e10c      	b.n	8002e06 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bec:	4b6a      	ldr	r3, [pc, #424]	; (8002d98 <HAL_RCC_OscConfig+0x474>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d0f0      	beq.n	8002bda <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d106      	bne.n	8002c0e <HAL_RCC_OscConfig+0x2ea>
 8002c00:	4b64      	ldr	r3, [pc, #400]	; (8002d94 <HAL_RCC_OscConfig+0x470>)
 8002c02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c04:	4a63      	ldr	r2, [pc, #396]	; (8002d94 <HAL_RCC_OscConfig+0x470>)
 8002c06:	f043 0301 	orr.w	r3, r3, #1
 8002c0a:	6713      	str	r3, [r2, #112]	; 0x70
 8002c0c:	e01c      	b.n	8002c48 <HAL_RCC_OscConfig+0x324>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	2b05      	cmp	r3, #5
 8002c14:	d10c      	bne.n	8002c30 <HAL_RCC_OscConfig+0x30c>
 8002c16:	4b5f      	ldr	r3, [pc, #380]	; (8002d94 <HAL_RCC_OscConfig+0x470>)
 8002c18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c1a:	4a5e      	ldr	r2, [pc, #376]	; (8002d94 <HAL_RCC_OscConfig+0x470>)
 8002c1c:	f043 0304 	orr.w	r3, r3, #4
 8002c20:	6713      	str	r3, [r2, #112]	; 0x70
 8002c22:	4b5c      	ldr	r3, [pc, #368]	; (8002d94 <HAL_RCC_OscConfig+0x470>)
 8002c24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c26:	4a5b      	ldr	r2, [pc, #364]	; (8002d94 <HAL_RCC_OscConfig+0x470>)
 8002c28:	f043 0301 	orr.w	r3, r3, #1
 8002c2c:	6713      	str	r3, [r2, #112]	; 0x70
 8002c2e:	e00b      	b.n	8002c48 <HAL_RCC_OscConfig+0x324>
 8002c30:	4b58      	ldr	r3, [pc, #352]	; (8002d94 <HAL_RCC_OscConfig+0x470>)
 8002c32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c34:	4a57      	ldr	r2, [pc, #348]	; (8002d94 <HAL_RCC_OscConfig+0x470>)
 8002c36:	f023 0301 	bic.w	r3, r3, #1
 8002c3a:	6713      	str	r3, [r2, #112]	; 0x70
 8002c3c:	4b55      	ldr	r3, [pc, #340]	; (8002d94 <HAL_RCC_OscConfig+0x470>)
 8002c3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c40:	4a54      	ldr	r2, [pc, #336]	; (8002d94 <HAL_RCC_OscConfig+0x470>)
 8002c42:	f023 0304 	bic.w	r3, r3, #4
 8002c46:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d015      	beq.n	8002c7c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c50:	f7ff fac6 	bl	80021e0 <HAL_GetTick>
 8002c54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c56:	e00a      	b.n	8002c6e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c58:	f7ff fac2 	bl	80021e0 <HAL_GetTick>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	1ad3      	subs	r3, r2, r3
 8002c62:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d901      	bls.n	8002c6e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002c6a:	2303      	movs	r3, #3
 8002c6c:	e0cb      	b.n	8002e06 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c6e:	4b49      	ldr	r3, [pc, #292]	; (8002d94 <HAL_RCC_OscConfig+0x470>)
 8002c70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c72:	f003 0302 	and.w	r3, r3, #2
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d0ee      	beq.n	8002c58 <HAL_RCC_OscConfig+0x334>
 8002c7a:	e014      	b.n	8002ca6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c7c:	f7ff fab0 	bl	80021e0 <HAL_GetTick>
 8002c80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c82:	e00a      	b.n	8002c9a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c84:	f7ff faac 	bl	80021e0 <HAL_GetTick>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	1ad3      	subs	r3, r2, r3
 8002c8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d901      	bls.n	8002c9a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002c96:	2303      	movs	r3, #3
 8002c98:	e0b5      	b.n	8002e06 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c9a:	4b3e      	ldr	r3, [pc, #248]	; (8002d94 <HAL_RCC_OscConfig+0x470>)
 8002c9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c9e:	f003 0302 	and.w	r3, r3, #2
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d1ee      	bne.n	8002c84 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ca6:	7dfb      	ldrb	r3, [r7, #23]
 8002ca8:	2b01      	cmp	r3, #1
 8002caa:	d105      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cac:	4b39      	ldr	r3, [pc, #228]	; (8002d94 <HAL_RCC_OscConfig+0x470>)
 8002cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb0:	4a38      	ldr	r2, [pc, #224]	; (8002d94 <HAL_RCC_OscConfig+0x470>)
 8002cb2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002cb6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	699b      	ldr	r3, [r3, #24]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	f000 80a1 	beq.w	8002e04 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002cc2:	4b34      	ldr	r3, [pc, #208]	; (8002d94 <HAL_RCC_OscConfig+0x470>)
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	f003 030c 	and.w	r3, r3, #12
 8002cca:	2b08      	cmp	r3, #8
 8002ccc:	d05c      	beq.n	8002d88 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	699b      	ldr	r3, [r3, #24]
 8002cd2:	2b02      	cmp	r3, #2
 8002cd4:	d141      	bne.n	8002d5a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cd6:	4b31      	ldr	r3, [pc, #196]	; (8002d9c <HAL_RCC_OscConfig+0x478>)
 8002cd8:	2200      	movs	r2, #0
 8002cda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cdc:	f7ff fa80 	bl	80021e0 <HAL_GetTick>
 8002ce0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ce2:	e008      	b.n	8002cf6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ce4:	f7ff fa7c 	bl	80021e0 <HAL_GetTick>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	1ad3      	subs	r3, r2, r3
 8002cee:	2b02      	cmp	r3, #2
 8002cf0:	d901      	bls.n	8002cf6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002cf2:	2303      	movs	r3, #3
 8002cf4:	e087      	b.n	8002e06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cf6:	4b27      	ldr	r3, [pc, #156]	; (8002d94 <HAL_RCC_OscConfig+0x470>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d1f0      	bne.n	8002ce4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	69da      	ldr	r2, [r3, #28]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6a1b      	ldr	r3, [r3, #32]
 8002d0a:	431a      	orrs	r2, r3
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d10:	019b      	lsls	r3, r3, #6
 8002d12:	431a      	orrs	r2, r3
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d18:	085b      	lsrs	r3, r3, #1
 8002d1a:	3b01      	subs	r3, #1
 8002d1c:	041b      	lsls	r3, r3, #16
 8002d1e:	431a      	orrs	r2, r3
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d24:	061b      	lsls	r3, r3, #24
 8002d26:	491b      	ldr	r1, [pc, #108]	; (8002d94 <HAL_RCC_OscConfig+0x470>)
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d2c:	4b1b      	ldr	r3, [pc, #108]	; (8002d9c <HAL_RCC_OscConfig+0x478>)
 8002d2e:	2201      	movs	r2, #1
 8002d30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d32:	f7ff fa55 	bl	80021e0 <HAL_GetTick>
 8002d36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d38:	e008      	b.n	8002d4c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d3a:	f7ff fa51 	bl	80021e0 <HAL_GetTick>
 8002d3e:	4602      	mov	r2, r0
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	1ad3      	subs	r3, r2, r3
 8002d44:	2b02      	cmp	r3, #2
 8002d46:	d901      	bls.n	8002d4c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002d48:	2303      	movs	r3, #3
 8002d4a:	e05c      	b.n	8002e06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d4c:	4b11      	ldr	r3, [pc, #68]	; (8002d94 <HAL_RCC_OscConfig+0x470>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d0f0      	beq.n	8002d3a <HAL_RCC_OscConfig+0x416>
 8002d58:	e054      	b.n	8002e04 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d5a:	4b10      	ldr	r3, [pc, #64]	; (8002d9c <HAL_RCC_OscConfig+0x478>)
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d60:	f7ff fa3e 	bl	80021e0 <HAL_GetTick>
 8002d64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d66:	e008      	b.n	8002d7a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d68:	f7ff fa3a 	bl	80021e0 <HAL_GetTick>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	1ad3      	subs	r3, r2, r3
 8002d72:	2b02      	cmp	r3, #2
 8002d74:	d901      	bls.n	8002d7a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002d76:	2303      	movs	r3, #3
 8002d78:	e045      	b.n	8002e06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d7a:	4b06      	ldr	r3, [pc, #24]	; (8002d94 <HAL_RCC_OscConfig+0x470>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d1f0      	bne.n	8002d68 <HAL_RCC_OscConfig+0x444>
 8002d86:	e03d      	b.n	8002e04 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	699b      	ldr	r3, [r3, #24]
 8002d8c:	2b01      	cmp	r3, #1
 8002d8e:	d107      	bne.n	8002da0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002d90:	2301      	movs	r3, #1
 8002d92:	e038      	b.n	8002e06 <HAL_RCC_OscConfig+0x4e2>
 8002d94:	40023800 	.word	0x40023800
 8002d98:	40007000 	.word	0x40007000
 8002d9c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002da0:	4b1b      	ldr	r3, [pc, #108]	; (8002e10 <HAL_RCC_OscConfig+0x4ec>)
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	699b      	ldr	r3, [r3, #24]
 8002daa:	2b01      	cmp	r3, #1
 8002dac:	d028      	beq.n	8002e00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002db8:	429a      	cmp	r2, r3
 8002dba:	d121      	bne.n	8002e00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dc6:	429a      	cmp	r2, r3
 8002dc8:	d11a      	bne.n	8002e00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002dca:	68fa      	ldr	r2, [r7, #12]
 8002dcc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	687a      	ldr	r2, [r7, #4]
 8002dd4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002dd6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d111      	bne.n	8002e00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002de6:	085b      	lsrs	r3, r3, #1
 8002de8:	3b01      	subs	r3, #1
 8002dea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002dec:	429a      	cmp	r2, r3
 8002dee:	d107      	bne.n	8002e00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dfa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	d001      	beq.n	8002e04 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002e00:	2301      	movs	r3, #1
 8002e02:	e000      	b.n	8002e06 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002e04:	2300      	movs	r3, #0
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	3718      	adds	r7, #24
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}
 8002e0e:	bf00      	nop
 8002e10:	40023800 	.word	0x40023800

08002e14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b084      	sub	sp, #16
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
 8002e1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d101      	bne.n	8002e28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	e0cc      	b.n	8002fc2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e28:	4b68      	ldr	r3, [pc, #416]	; (8002fcc <HAL_RCC_ClockConfig+0x1b8>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f003 0307 	and.w	r3, r3, #7
 8002e30:	683a      	ldr	r2, [r7, #0]
 8002e32:	429a      	cmp	r2, r3
 8002e34:	d90c      	bls.n	8002e50 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e36:	4b65      	ldr	r3, [pc, #404]	; (8002fcc <HAL_RCC_ClockConfig+0x1b8>)
 8002e38:	683a      	ldr	r2, [r7, #0]
 8002e3a:	b2d2      	uxtb	r2, r2
 8002e3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e3e:	4b63      	ldr	r3, [pc, #396]	; (8002fcc <HAL_RCC_ClockConfig+0x1b8>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f003 0307 	and.w	r3, r3, #7
 8002e46:	683a      	ldr	r2, [r7, #0]
 8002e48:	429a      	cmp	r2, r3
 8002e4a:	d001      	beq.n	8002e50 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	e0b8      	b.n	8002fc2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f003 0302 	and.w	r3, r3, #2
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d020      	beq.n	8002e9e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f003 0304 	and.w	r3, r3, #4
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d005      	beq.n	8002e74 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e68:	4b59      	ldr	r3, [pc, #356]	; (8002fd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	4a58      	ldr	r2, [pc, #352]	; (8002fd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e6e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002e72:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f003 0308 	and.w	r3, r3, #8
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d005      	beq.n	8002e8c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e80:	4b53      	ldr	r3, [pc, #332]	; (8002fd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	4a52      	ldr	r2, [pc, #328]	; (8002fd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e86:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002e8a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e8c:	4b50      	ldr	r3, [pc, #320]	; (8002fd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	689b      	ldr	r3, [r3, #8]
 8002e98:	494d      	ldr	r1, [pc, #308]	; (8002fd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f003 0301 	and.w	r3, r3, #1
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d044      	beq.n	8002f34 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	2b01      	cmp	r3, #1
 8002eb0:	d107      	bne.n	8002ec2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eb2:	4b47      	ldr	r3, [pc, #284]	; (8002fd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d119      	bne.n	8002ef2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e07f      	b.n	8002fc2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	2b02      	cmp	r3, #2
 8002ec8:	d003      	beq.n	8002ed2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ece:	2b03      	cmp	r3, #3
 8002ed0:	d107      	bne.n	8002ee2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ed2:	4b3f      	ldr	r3, [pc, #252]	; (8002fd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d109      	bne.n	8002ef2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e06f      	b.n	8002fc2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ee2:	4b3b      	ldr	r3, [pc, #236]	; (8002fd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 0302 	and.w	r3, r3, #2
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d101      	bne.n	8002ef2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e067      	b.n	8002fc2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ef2:	4b37      	ldr	r3, [pc, #220]	; (8002fd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	f023 0203 	bic.w	r2, r3, #3
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	4934      	ldr	r1, [pc, #208]	; (8002fd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f00:	4313      	orrs	r3, r2
 8002f02:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f04:	f7ff f96c 	bl	80021e0 <HAL_GetTick>
 8002f08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f0a:	e00a      	b.n	8002f22 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f0c:	f7ff f968 	bl	80021e0 <HAL_GetTick>
 8002f10:	4602      	mov	r2, r0
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	1ad3      	subs	r3, r2, r3
 8002f16:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d901      	bls.n	8002f22 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f1e:	2303      	movs	r3, #3
 8002f20:	e04f      	b.n	8002fc2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f22:	4b2b      	ldr	r3, [pc, #172]	; (8002fd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	f003 020c 	and.w	r2, r3, #12
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	009b      	lsls	r3, r3, #2
 8002f30:	429a      	cmp	r2, r3
 8002f32:	d1eb      	bne.n	8002f0c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f34:	4b25      	ldr	r3, [pc, #148]	; (8002fcc <HAL_RCC_ClockConfig+0x1b8>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f003 0307 	and.w	r3, r3, #7
 8002f3c:	683a      	ldr	r2, [r7, #0]
 8002f3e:	429a      	cmp	r2, r3
 8002f40:	d20c      	bcs.n	8002f5c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f42:	4b22      	ldr	r3, [pc, #136]	; (8002fcc <HAL_RCC_ClockConfig+0x1b8>)
 8002f44:	683a      	ldr	r2, [r7, #0]
 8002f46:	b2d2      	uxtb	r2, r2
 8002f48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f4a:	4b20      	ldr	r3, [pc, #128]	; (8002fcc <HAL_RCC_ClockConfig+0x1b8>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f003 0307 	and.w	r3, r3, #7
 8002f52:	683a      	ldr	r2, [r7, #0]
 8002f54:	429a      	cmp	r2, r3
 8002f56:	d001      	beq.n	8002f5c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	e032      	b.n	8002fc2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f003 0304 	and.w	r3, r3, #4
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d008      	beq.n	8002f7a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f68:	4b19      	ldr	r3, [pc, #100]	; (8002fd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	68db      	ldr	r3, [r3, #12]
 8002f74:	4916      	ldr	r1, [pc, #88]	; (8002fd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f76:	4313      	orrs	r3, r2
 8002f78:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 0308 	and.w	r3, r3, #8
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d009      	beq.n	8002f9a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f86:	4b12      	ldr	r3, [pc, #72]	; (8002fd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f88:	689b      	ldr	r3, [r3, #8]
 8002f8a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	691b      	ldr	r3, [r3, #16]
 8002f92:	00db      	lsls	r3, r3, #3
 8002f94:	490e      	ldr	r1, [pc, #56]	; (8002fd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f96:	4313      	orrs	r3, r2
 8002f98:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002f9a:	f000 f821 	bl	8002fe0 <HAL_RCC_GetSysClockFreq>
 8002f9e:	4602      	mov	r2, r0
 8002fa0:	4b0b      	ldr	r3, [pc, #44]	; (8002fd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	091b      	lsrs	r3, r3, #4
 8002fa6:	f003 030f 	and.w	r3, r3, #15
 8002faa:	490a      	ldr	r1, [pc, #40]	; (8002fd4 <HAL_RCC_ClockConfig+0x1c0>)
 8002fac:	5ccb      	ldrb	r3, [r1, r3]
 8002fae:	fa22 f303 	lsr.w	r3, r2, r3
 8002fb2:	4a09      	ldr	r2, [pc, #36]	; (8002fd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002fb4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002fb6:	4b09      	ldr	r3, [pc, #36]	; (8002fdc <HAL_RCC_ClockConfig+0x1c8>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f7ff f8cc 	bl	8002158 <HAL_InitTick>

  return HAL_OK;
 8002fc0:	2300      	movs	r3, #0
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	3710      	adds	r7, #16
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}
 8002fca:	bf00      	nop
 8002fcc:	40023c00 	.word	0x40023c00
 8002fd0:	40023800 	.word	0x40023800
 8002fd4:	08006bf8 	.word	0x08006bf8
 8002fd8:	20000004 	.word	0x20000004
 8002fdc:	20000008 	.word	0x20000008

08002fe0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fe0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002fe4:	b090      	sub	sp, #64	; 0x40
 8002fe6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	637b      	str	r3, [r7, #52]	; 0x34
 8002fec:	2300      	movs	r3, #0
 8002fee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ff8:	4b59      	ldr	r3, [pc, #356]	; (8003160 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ffa:	689b      	ldr	r3, [r3, #8]
 8002ffc:	f003 030c 	and.w	r3, r3, #12
 8003000:	2b08      	cmp	r3, #8
 8003002:	d00d      	beq.n	8003020 <HAL_RCC_GetSysClockFreq+0x40>
 8003004:	2b08      	cmp	r3, #8
 8003006:	f200 80a1 	bhi.w	800314c <HAL_RCC_GetSysClockFreq+0x16c>
 800300a:	2b00      	cmp	r3, #0
 800300c:	d002      	beq.n	8003014 <HAL_RCC_GetSysClockFreq+0x34>
 800300e:	2b04      	cmp	r3, #4
 8003010:	d003      	beq.n	800301a <HAL_RCC_GetSysClockFreq+0x3a>
 8003012:	e09b      	b.n	800314c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003014:	4b53      	ldr	r3, [pc, #332]	; (8003164 <HAL_RCC_GetSysClockFreq+0x184>)
 8003016:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003018:	e09b      	b.n	8003152 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800301a:	4b53      	ldr	r3, [pc, #332]	; (8003168 <HAL_RCC_GetSysClockFreq+0x188>)
 800301c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800301e:	e098      	b.n	8003152 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003020:	4b4f      	ldr	r3, [pc, #316]	; (8003160 <HAL_RCC_GetSysClockFreq+0x180>)
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003028:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800302a:	4b4d      	ldr	r3, [pc, #308]	; (8003160 <HAL_RCC_GetSysClockFreq+0x180>)
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003032:	2b00      	cmp	r3, #0
 8003034:	d028      	beq.n	8003088 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003036:	4b4a      	ldr	r3, [pc, #296]	; (8003160 <HAL_RCC_GetSysClockFreq+0x180>)
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	099b      	lsrs	r3, r3, #6
 800303c:	2200      	movs	r2, #0
 800303e:	623b      	str	r3, [r7, #32]
 8003040:	627a      	str	r2, [r7, #36]	; 0x24
 8003042:	6a3b      	ldr	r3, [r7, #32]
 8003044:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003048:	2100      	movs	r1, #0
 800304a:	4b47      	ldr	r3, [pc, #284]	; (8003168 <HAL_RCC_GetSysClockFreq+0x188>)
 800304c:	fb03 f201 	mul.w	r2, r3, r1
 8003050:	2300      	movs	r3, #0
 8003052:	fb00 f303 	mul.w	r3, r0, r3
 8003056:	4413      	add	r3, r2
 8003058:	4a43      	ldr	r2, [pc, #268]	; (8003168 <HAL_RCC_GetSysClockFreq+0x188>)
 800305a:	fba0 1202 	umull	r1, r2, r0, r2
 800305e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003060:	460a      	mov	r2, r1
 8003062:	62ba      	str	r2, [r7, #40]	; 0x28
 8003064:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003066:	4413      	add	r3, r2
 8003068:	62fb      	str	r3, [r7, #44]	; 0x2c
 800306a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800306c:	2200      	movs	r2, #0
 800306e:	61bb      	str	r3, [r7, #24]
 8003070:	61fa      	str	r2, [r7, #28]
 8003072:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003076:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800307a:	f7fd f901 	bl	8000280 <__aeabi_uldivmod>
 800307e:	4602      	mov	r2, r0
 8003080:	460b      	mov	r3, r1
 8003082:	4613      	mov	r3, r2
 8003084:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003086:	e053      	b.n	8003130 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003088:	4b35      	ldr	r3, [pc, #212]	; (8003160 <HAL_RCC_GetSysClockFreq+0x180>)
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	099b      	lsrs	r3, r3, #6
 800308e:	2200      	movs	r2, #0
 8003090:	613b      	str	r3, [r7, #16]
 8003092:	617a      	str	r2, [r7, #20]
 8003094:	693b      	ldr	r3, [r7, #16]
 8003096:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800309a:	f04f 0b00 	mov.w	fp, #0
 800309e:	4652      	mov	r2, sl
 80030a0:	465b      	mov	r3, fp
 80030a2:	f04f 0000 	mov.w	r0, #0
 80030a6:	f04f 0100 	mov.w	r1, #0
 80030aa:	0159      	lsls	r1, r3, #5
 80030ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030b0:	0150      	lsls	r0, r2, #5
 80030b2:	4602      	mov	r2, r0
 80030b4:	460b      	mov	r3, r1
 80030b6:	ebb2 080a 	subs.w	r8, r2, sl
 80030ba:	eb63 090b 	sbc.w	r9, r3, fp
 80030be:	f04f 0200 	mov.w	r2, #0
 80030c2:	f04f 0300 	mov.w	r3, #0
 80030c6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80030ca:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80030ce:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80030d2:	ebb2 0408 	subs.w	r4, r2, r8
 80030d6:	eb63 0509 	sbc.w	r5, r3, r9
 80030da:	f04f 0200 	mov.w	r2, #0
 80030de:	f04f 0300 	mov.w	r3, #0
 80030e2:	00eb      	lsls	r3, r5, #3
 80030e4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80030e8:	00e2      	lsls	r2, r4, #3
 80030ea:	4614      	mov	r4, r2
 80030ec:	461d      	mov	r5, r3
 80030ee:	eb14 030a 	adds.w	r3, r4, sl
 80030f2:	603b      	str	r3, [r7, #0]
 80030f4:	eb45 030b 	adc.w	r3, r5, fp
 80030f8:	607b      	str	r3, [r7, #4]
 80030fa:	f04f 0200 	mov.w	r2, #0
 80030fe:	f04f 0300 	mov.w	r3, #0
 8003102:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003106:	4629      	mov	r1, r5
 8003108:	028b      	lsls	r3, r1, #10
 800310a:	4621      	mov	r1, r4
 800310c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003110:	4621      	mov	r1, r4
 8003112:	028a      	lsls	r2, r1, #10
 8003114:	4610      	mov	r0, r2
 8003116:	4619      	mov	r1, r3
 8003118:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800311a:	2200      	movs	r2, #0
 800311c:	60bb      	str	r3, [r7, #8]
 800311e:	60fa      	str	r2, [r7, #12]
 8003120:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003124:	f7fd f8ac 	bl	8000280 <__aeabi_uldivmod>
 8003128:	4602      	mov	r2, r0
 800312a:	460b      	mov	r3, r1
 800312c:	4613      	mov	r3, r2
 800312e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003130:	4b0b      	ldr	r3, [pc, #44]	; (8003160 <HAL_RCC_GetSysClockFreq+0x180>)
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	0c1b      	lsrs	r3, r3, #16
 8003136:	f003 0303 	and.w	r3, r3, #3
 800313a:	3301      	adds	r3, #1
 800313c:	005b      	lsls	r3, r3, #1
 800313e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003140:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003144:	fbb2 f3f3 	udiv	r3, r2, r3
 8003148:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800314a:	e002      	b.n	8003152 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800314c:	4b05      	ldr	r3, [pc, #20]	; (8003164 <HAL_RCC_GetSysClockFreq+0x184>)
 800314e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003150:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003154:	4618      	mov	r0, r3
 8003156:	3740      	adds	r7, #64	; 0x40
 8003158:	46bd      	mov	sp, r7
 800315a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800315e:	bf00      	nop
 8003160:	40023800 	.word	0x40023800
 8003164:	00f42400 	.word	0x00f42400
 8003168:	017d7840 	.word	0x017d7840

0800316c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800316c:	b480      	push	{r7}
 800316e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003170:	4b03      	ldr	r3, [pc, #12]	; (8003180 <HAL_RCC_GetHCLKFreq+0x14>)
 8003172:	681b      	ldr	r3, [r3, #0]
}
 8003174:	4618      	mov	r0, r3
 8003176:	46bd      	mov	sp, r7
 8003178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317c:	4770      	bx	lr
 800317e:	bf00      	nop
 8003180:	20000004 	.word	0x20000004

08003184 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003188:	f7ff fff0 	bl	800316c <HAL_RCC_GetHCLKFreq>
 800318c:	4602      	mov	r2, r0
 800318e:	4b05      	ldr	r3, [pc, #20]	; (80031a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003190:	689b      	ldr	r3, [r3, #8]
 8003192:	0a9b      	lsrs	r3, r3, #10
 8003194:	f003 0307 	and.w	r3, r3, #7
 8003198:	4903      	ldr	r1, [pc, #12]	; (80031a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800319a:	5ccb      	ldrb	r3, [r1, r3]
 800319c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031a0:	4618      	mov	r0, r3
 80031a2:	bd80      	pop	{r7, pc}
 80031a4:	40023800 	.word	0x40023800
 80031a8:	08006c08 	.word	0x08006c08

080031ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80031b0:	f7ff ffdc 	bl	800316c <HAL_RCC_GetHCLKFreq>
 80031b4:	4602      	mov	r2, r0
 80031b6:	4b05      	ldr	r3, [pc, #20]	; (80031cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	0b5b      	lsrs	r3, r3, #13
 80031bc:	f003 0307 	and.w	r3, r3, #7
 80031c0:	4903      	ldr	r1, [pc, #12]	; (80031d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80031c2:	5ccb      	ldrb	r3, [r1, r3]
 80031c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	bd80      	pop	{r7, pc}
 80031cc:	40023800 	.word	0x40023800
 80031d0:	08006c08 	.word	0x08006c08

080031d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b082      	sub	sp, #8
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d101      	bne.n	80031e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	e041      	b.n	800326a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031ec:	b2db      	uxtb	r3, r3
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d106      	bne.n	8003200 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2200      	movs	r2, #0
 80031f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	f7fe fdce 	bl	8001d9c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2202      	movs	r2, #2
 8003204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681a      	ldr	r2, [r3, #0]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	3304      	adds	r3, #4
 8003210:	4619      	mov	r1, r3
 8003212:	4610      	mov	r0, r2
 8003214:	f000 fb80 	bl	8003918 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2201      	movs	r2, #1
 800321c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2201      	movs	r2, #1
 8003224:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2201      	movs	r2, #1
 800322c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2201      	movs	r2, #1
 8003234:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2201      	movs	r2, #1
 800323c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2201      	movs	r2, #1
 8003244:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2201      	movs	r2, #1
 800324c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2201      	movs	r2, #1
 8003254:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2201      	movs	r2, #1
 800325c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2201      	movs	r2, #1
 8003264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003268:	2300      	movs	r3, #0
}
 800326a:	4618      	mov	r0, r3
 800326c:	3708      	adds	r7, #8
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}
	...

08003274 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003274:	b480      	push	{r7}
 8003276:	b085      	sub	sp, #20
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003282:	b2db      	uxtb	r3, r3
 8003284:	2b01      	cmp	r3, #1
 8003286:	d001      	beq.n	800328c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	e03c      	b.n	8003306 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2202      	movs	r2, #2
 8003290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a1e      	ldr	r2, [pc, #120]	; (8003314 <HAL_TIM_Base_Start+0xa0>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d018      	beq.n	80032d0 <HAL_TIM_Base_Start+0x5c>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032a6:	d013      	beq.n	80032d0 <HAL_TIM_Base_Start+0x5c>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a1a      	ldr	r2, [pc, #104]	; (8003318 <HAL_TIM_Base_Start+0xa4>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d00e      	beq.n	80032d0 <HAL_TIM_Base_Start+0x5c>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a19      	ldr	r2, [pc, #100]	; (800331c <HAL_TIM_Base_Start+0xa8>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d009      	beq.n	80032d0 <HAL_TIM_Base_Start+0x5c>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a17      	ldr	r2, [pc, #92]	; (8003320 <HAL_TIM_Base_Start+0xac>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d004      	beq.n	80032d0 <HAL_TIM_Base_Start+0x5c>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a16      	ldr	r2, [pc, #88]	; (8003324 <HAL_TIM_Base_Start+0xb0>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d111      	bne.n	80032f4 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	f003 0307 	and.w	r3, r3, #7
 80032da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	2b06      	cmp	r3, #6
 80032e0:	d010      	beq.n	8003304 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	681a      	ldr	r2, [r3, #0]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f042 0201 	orr.w	r2, r2, #1
 80032f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032f2:	e007      	b.n	8003304 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f042 0201 	orr.w	r2, r2, #1
 8003302:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003304:	2300      	movs	r3, #0
}
 8003306:	4618      	mov	r0, r3
 8003308:	3714      	adds	r7, #20
 800330a:	46bd      	mov	sp, r7
 800330c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003310:	4770      	bx	lr
 8003312:	bf00      	nop
 8003314:	40010000 	.word	0x40010000
 8003318:	40000400 	.word	0x40000400
 800331c:	40000800 	.word	0x40000800
 8003320:	40000c00 	.word	0x40000c00
 8003324:	40014000 	.word	0x40014000

08003328 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b082      	sub	sp, #8
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d101      	bne.n	800333a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	e041      	b.n	80033be <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003340:	b2db      	uxtb	r3, r3
 8003342:	2b00      	cmp	r3, #0
 8003344:	d106      	bne.n	8003354 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2200      	movs	r2, #0
 800334a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	f000 f839 	bl	80033c6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2202      	movs	r2, #2
 8003358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681a      	ldr	r2, [r3, #0]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	3304      	adds	r3, #4
 8003364:	4619      	mov	r1, r3
 8003366:	4610      	mov	r0, r2
 8003368:	f000 fad6 	bl	8003918 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2201      	movs	r2, #1
 8003370:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2201      	movs	r2, #1
 8003378:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2201      	movs	r2, #1
 8003380:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2201      	movs	r2, #1
 8003388:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2201      	movs	r2, #1
 8003390:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2201      	movs	r2, #1
 8003398:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2201      	movs	r2, #1
 80033a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2201      	movs	r2, #1
 80033a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2201      	movs	r2, #1
 80033b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2201      	movs	r2, #1
 80033b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80033bc:	2300      	movs	r3, #0
}
 80033be:	4618      	mov	r0, r3
 80033c0:	3708      	adds	r7, #8
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}

080033c6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80033c6:	b480      	push	{r7}
 80033c8:	b083      	sub	sp, #12
 80033ca:	af00      	add	r7, sp, #0
 80033cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80033ce:	bf00      	nop
 80033d0:	370c      	adds	r7, #12
 80033d2:	46bd      	mov	sp, r7
 80033d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d8:	4770      	bx	lr
	...

080033dc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b084      	sub	sp, #16
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
 80033e4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d109      	bne.n	8003400 <HAL_TIM_PWM_Start+0x24>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80033f2:	b2db      	uxtb	r3, r3
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	bf14      	ite	ne
 80033f8:	2301      	movne	r3, #1
 80033fa:	2300      	moveq	r3, #0
 80033fc:	b2db      	uxtb	r3, r3
 80033fe:	e022      	b.n	8003446 <HAL_TIM_PWM_Start+0x6a>
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	2b04      	cmp	r3, #4
 8003404:	d109      	bne.n	800341a <HAL_TIM_PWM_Start+0x3e>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800340c:	b2db      	uxtb	r3, r3
 800340e:	2b01      	cmp	r3, #1
 8003410:	bf14      	ite	ne
 8003412:	2301      	movne	r3, #1
 8003414:	2300      	moveq	r3, #0
 8003416:	b2db      	uxtb	r3, r3
 8003418:	e015      	b.n	8003446 <HAL_TIM_PWM_Start+0x6a>
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	2b08      	cmp	r3, #8
 800341e:	d109      	bne.n	8003434 <HAL_TIM_PWM_Start+0x58>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003426:	b2db      	uxtb	r3, r3
 8003428:	2b01      	cmp	r3, #1
 800342a:	bf14      	ite	ne
 800342c:	2301      	movne	r3, #1
 800342e:	2300      	moveq	r3, #0
 8003430:	b2db      	uxtb	r3, r3
 8003432:	e008      	b.n	8003446 <HAL_TIM_PWM_Start+0x6a>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800343a:	b2db      	uxtb	r3, r3
 800343c:	2b01      	cmp	r3, #1
 800343e:	bf14      	ite	ne
 8003440:	2301      	movne	r3, #1
 8003442:	2300      	moveq	r3, #0
 8003444:	b2db      	uxtb	r3, r3
 8003446:	2b00      	cmp	r3, #0
 8003448:	d001      	beq.n	800344e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	e068      	b.n	8003520 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d104      	bne.n	800345e <HAL_TIM_PWM_Start+0x82>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2202      	movs	r2, #2
 8003458:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800345c:	e013      	b.n	8003486 <HAL_TIM_PWM_Start+0xaa>
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	2b04      	cmp	r3, #4
 8003462:	d104      	bne.n	800346e <HAL_TIM_PWM_Start+0x92>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2202      	movs	r2, #2
 8003468:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800346c:	e00b      	b.n	8003486 <HAL_TIM_PWM_Start+0xaa>
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	2b08      	cmp	r3, #8
 8003472:	d104      	bne.n	800347e <HAL_TIM_PWM_Start+0xa2>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2202      	movs	r2, #2
 8003478:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800347c:	e003      	b.n	8003486 <HAL_TIM_PWM_Start+0xaa>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2202      	movs	r2, #2
 8003482:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	2201      	movs	r2, #1
 800348c:	6839      	ldr	r1, [r7, #0]
 800348e:	4618      	mov	r0, r3
 8003490:	f000 fce8 	bl	8003e64 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a23      	ldr	r2, [pc, #140]	; (8003528 <HAL_TIM_PWM_Start+0x14c>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d107      	bne.n	80034ae <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80034ac:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a1d      	ldr	r2, [pc, #116]	; (8003528 <HAL_TIM_PWM_Start+0x14c>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d018      	beq.n	80034ea <HAL_TIM_PWM_Start+0x10e>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034c0:	d013      	beq.n	80034ea <HAL_TIM_PWM_Start+0x10e>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a19      	ldr	r2, [pc, #100]	; (800352c <HAL_TIM_PWM_Start+0x150>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d00e      	beq.n	80034ea <HAL_TIM_PWM_Start+0x10e>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a17      	ldr	r2, [pc, #92]	; (8003530 <HAL_TIM_PWM_Start+0x154>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d009      	beq.n	80034ea <HAL_TIM_PWM_Start+0x10e>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a16      	ldr	r2, [pc, #88]	; (8003534 <HAL_TIM_PWM_Start+0x158>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d004      	beq.n	80034ea <HAL_TIM_PWM_Start+0x10e>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a14      	ldr	r2, [pc, #80]	; (8003538 <HAL_TIM_PWM_Start+0x15c>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d111      	bne.n	800350e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	f003 0307 	and.w	r3, r3, #7
 80034f4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	2b06      	cmp	r3, #6
 80034fa:	d010      	beq.n	800351e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	681a      	ldr	r2, [r3, #0]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f042 0201 	orr.w	r2, r2, #1
 800350a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800350c:	e007      	b.n	800351e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	681a      	ldr	r2, [r3, #0]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f042 0201 	orr.w	r2, r2, #1
 800351c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800351e:	2300      	movs	r3, #0
}
 8003520:	4618      	mov	r0, r3
 8003522:	3710      	adds	r7, #16
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}
 8003528:	40010000 	.word	0x40010000
 800352c:	40000400 	.word	0x40000400
 8003530:	40000800 	.word	0x40000800
 8003534:	40000c00 	.word	0x40000c00
 8003538:	40014000 	.word	0x40014000

0800353c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b082      	sub	sp, #8
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
 8003544:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	2200      	movs	r2, #0
 800354c:	6839      	ldr	r1, [r7, #0]
 800354e:	4618      	mov	r0, r3
 8003550:	f000 fc88 	bl	8003e64 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a29      	ldr	r2, [pc, #164]	; (8003600 <HAL_TIM_PWM_Stop+0xc4>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d117      	bne.n	800358e <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	6a1a      	ldr	r2, [r3, #32]
 8003564:	f241 1311 	movw	r3, #4369	; 0x1111
 8003568:	4013      	ands	r3, r2
 800356a:	2b00      	cmp	r3, #0
 800356c:	d10f      	bne.n	800358e <HAL_TIM_PWM_Stop+0x52>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	6a1a      	ldr	r2, [r3, #32]
 8003574:	f240 4344 	movw	r3, #1092	; 0x444
 8003578:	4013      	ands	r3, r2
 800357a:	2b00      	cmp	r3, #0
 800357c:	d107      	bne.n	800358e <HAL_TIM_PWM_Stop+0x52>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800358c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	6a1a      	ldr	r2, [r3, #32]
 8003594:	f241 1311 	movw	r3, #4369	; 0x1111
 8003598:	4013      	ands	r3, r2
 800359a:	2b00      	cmp	r3, #0
 800359c:	d10f      	bne.n	80035be <HAL_TIM_PWM_Stop+0x82>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	6a1a      	ldr	r2, [r3, #32]
 80035a4:	f240 4344 	movw	r3, #1092	; 0x444
 80035a8:	4013      	ands	r3, r2
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d107      	bne.n	80035be <HAL_TIM_PWM_Stop+0x82>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	681a      	ldr	r2, [r3, #0]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f022 0201 	bic.w	r2, r2, #1
 80035bc:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d104      	bne.n	80035ce <HAL_TIM_PWM_Stop+0x92>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2201      	movs	r2, #1
 80035c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80035cc:	e013      	b.n	80035f6 <HAL_TIM_PWM_Stop+0xba>
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	2b04      	cmp	r3, #4
 80035d2:	d104      	bne.n	80035de <HAL_TIM_PWM_Stop+0xa2>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2201      	movs	r2, #1
 80035d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80035dc:	e00b      	b.n	80035f6 <HAL_TIM_PWM_Stop+0xba>
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	2b08      	cmp	r3, #8
 80035e2:	d104      	bne.n	80035ee <HAL_TIM_PWM_Stop+0xb2>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2201      	movs	r2, #1
 80035e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80035ec:	e003      	b.n	80035f6 <HAL_TIM_PWM_Stop+0xba>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2201      	movs	r2, #1
 80035f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 80035f6:	2300      	movs	r3, #0
}
 80035f8:	4618      	mov	r0, r3
 80035fa:	3708      	adds	r7, #8
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bd80      	pop	{r7, pc}
 8003600:	40010000 	.word	0x40010000

08003604 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b086      	sub	sp, #24
 8003608:	af00      	add	r7, sp, #0
 800360a:	60f8      	str	r0, [r7, #12]
 800360c:	60b9      	str	r1, [r7, #8]
 800360e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003610:	2300      	movs	r3, #0
 8003612:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800361a:	2b01      	cmp	r3, #1
 800361c:	d101      	bne.n	8003622 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800361e:	2302      	movs	r3, #2
 8003620:	e0ae      	b.n	8003780 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	2201      	movs	r2, #1
 8003626:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2b0c      	cmp	r3, #12
 800362e:	f200 809f 	bhi.w	8003770 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003632:	a201      	add	r2, pc, #4	; (adr r2, 8003638 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003638:	0800366d 	.word	0x0800366d
 800363c:	08003771 	.word	0x08003771
 8003640:	08003771 	.word	0x08003771
 8003644:	08003771 	.word	0x08003771
 8003648:	080036ad 	.word	0x080036ad
 800364c:	08003771 	.word	0x08003771
 8003650:	08003771 	.word	0x08003771
 8003654:	08003771 	.word	0x08003771
 8003658:	080036ef 	.word	0x080036ef
 800365c:	08003771 	.word	0x08003771
 8003660:	08003771 	.word	0x08003771
 8003664:	08003771 	.word	0x08003771
 8003668:	0800372f 	.word	0x0800372f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	68b9      	ldr	r1, [r7, #8]
 8003672:	4618      	mov	r0, r3
 8003674:	f000 f9d0 	bl	8003a18 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	699a      	ldr	r2, [r3, #24]
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f042 0208 	orr.w	r2, r2, #8
 8003686:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	699a      	ldr	r2, [r3, #24]
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f022 0204 	bic.w	r2, r2, #4
 8003696:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	6999      	ldr	r1, [r3, #24]
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	691a      	ldr	r2, [r3, #16]
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	430a      	orrs	r2, r1
 80036a8:	619a      	str	r2, [r3, #24]
      break;
 80036aa:	e064      	b.n	8003776 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	68b9      	ldr	r1, [r7, #8]
 80036b2:	4618      	mov	r0, r3
 80036b4:	f000 fa16 	bl	8003ae4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	699a      	ldr	r2, [r3, #24]
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80036c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	699a      	ldr	r2, [r3, #24]
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	6999      	ldr	r1, [r3, #24]
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	691b      	ldr	r3, [r3, #16]
 80036e2:	021a      	lsls	r2, r3, #8
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	430a      	orrs	r2, r1
 80036ea:	619a      	str	r2, [r3, #24]
      break;
 80036ec:	e043      	b.n	8003776 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	68b9      	ldr	r1, [r7, #8]
 80036f4:	4618      	mov	r0, r3
 80036f6:	f000 fa61 	bl	8003bbc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	69da      	ldr	r2, [r3, #28]
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f042 0208 	orr.w	r2, r2, #8
 8003708:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	69da      	ldr	r2, [r3, #28]
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f022 0204 	bic.w	r2, r2, #4
 8003718:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	69d9      	ldr	r1, [r3, #28]
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	691a      	ldr	r2, [r3, #16]
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	430a      	orrs	r2, r1
 800372a:	61da      	str	r2, [r3, #28]
      break;
 800372c:	e023      	b.n	8003776 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	68b9      	ldr	r1, [r7, #8]
 8003734:	4618      	mov	r0, r3
 8003736:	f000 faab 	bl	8003c90 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	69da      	ldr	r2, [r3, #28]
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003748:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	69da      	ldr	r2, [r3, #28]
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003758:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	69d9      	ldr	r1, [r3, #28]
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	691b      	ldr	r3, [r3, #16]
 8003764:	021a      	lsls	r2, r3, #8
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	430a      	orrs	r2, r1
 800376c:	61da      	str	r2, [r3, #28]
      break;
 800376e:	e002      	b.n	8003776 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003770:	2301      	movs	r3, #1
 8003772:	75fb      	strb	r3, [r7, #23]
      break;
 8003774:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	2200      	movs	r2, #0
 800377a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800377e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003780:	4618      	mov	r0, r3
 8003782:	3718      	adds	r7, #24
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}

08003788 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b084      	sub	sp, #16
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
 8003790:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003792:	2300      	movs	r3, #0
 8003794:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800379c:	2b01      	cmp	r3, #1
 800379e:	d101      	bne.n	80037a4 <HAL_TIM_ConfigClockSource+0x1c>
 80037a0:	2302      	movs	r3, #2
 80037a2:	e0b4      	b.n	800390e <HAL_TIM_ConfigClockSource+0x186>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2201      	movs	r2, #1
 80037a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2202      	movs	r2, #2
 80037b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80037c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80037ca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	68ba      	ldr	r2, [r7, #8]
 80037d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037dc:	d03e      	beq.n	800385c <HAL_TIM_ConfigClockSource+0xd4>
 80037de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037e2:	f200 8087 	bhi.w	80038f4 <HAL_TIM_ConfigClockSource+0x16c>
 80037e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037ea:	f000 8086 	beq.w	80038fa <HAL_TIM_ConfigClockSource+0x172>
 80037ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037f2:	d87f      	bhi.n	80038f4 <HAL_TIM_ConfigClockSource+0x16c>
 80037f4:	2b70      	cmp	r3, #112	; 0x70
 80037f6:	d01a      	beq.n	800382e <HAL_TIM_ConfigClockSource+0xa6>
 80037f8:	2b70      	cmp	r3, #112	; 0x70
 80037fa:	d87b      	bhi.n	80038f4 <HAL_TIM_ConfigClockSource+0x16c>
 80037fc:	2b60      	cmp	r3, #96	; 0x60
 80037fe:	d050      	beq.n	80038a2 <HAL_TIM_ConfigClockSource+0x11a>
 8003800:	2b60      	cmp	r3, #96	; 0x60
 8003802:	d877      	bhi.n	80038f4 <HAL_TIM_ConfigClockSource+0x16c>
 8003804:	2b50      	cmp	r3, #80	; 0x50
 8003806:	d03c      	beq.n	8003882 <HAL_TIM_ConfigClockSource+0xfa>
 8003808:	2b50      	cmp	r3, #80	; 0x50
 800380a:	d873      	bhi.n	80038f4 <HAL_TIM_ConfigClockSource+0x16c>
 800380c:	2b40      	cmp	r3, #64	; 0x40
 800380e:	d058      	beq.n	80038c2 <HAL_TIM_ConfigClockSource+0x13a>
 8003810:	2b40      	cmp	r3, #64	; 0x40
 8003812:	d86f      	bhi.n	80038f4 <HAL_TIM_ConfigClockSource+0x16c>
 8003814:	2b30      	cmp	r3, #48	; 0x30
 8003816:	d064      	beq.n	80038e2 <HAL_TIM_ConfigClockSource+0x15a>
 8003818:	2b30      	cmp	r3, #48	; 0x30
 800381a:	d86b      	bhi.n	80038f4 <HAL_TIM_ConfigClockSource+0x16c>
 800381c:	2b20      	cmp	r3, #32
 800381e:	d060      	beq.n	80038e2 <HAL_TIM_ConfigClockSource+0x15a>
 8003820:	2b20      	cmp	r3, #32
 8003822:	d867      	bhi.n	80038f4 <HAL_TIM_ConfigClockSource+0x16c>
 8003824:	2b00      	cmp	r3, #0
 8003826:	d05c      	beq.n	80038e2 <HAL_TIM_ConfigClockSource+0x15a>
 8003828:	2b10      	cmp	r3, #16
 800382a:	d05a      	beq.n	80038e2 <HAL_TIM_ConfigClockSource+0x15a>
 800382c:	e062      	b.n	80038f4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6818      	ldr	r0, [r3, #0]
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	6899      	ldr	r1, [r3, #8]
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	685a      	ldr	r2, [r3, #4]
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	68db      	ldr	r3, [r3, #12]
 800383e:	f000 faf1 	bl	8003e24 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003850:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	68ba      	ldr	r2, [r7, #8]
 8003858:	609a      	str	r2, [r3, #8]
      break;
 800385a:	e04f      	b.n	80038fc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6818      	ldr	r0, [r3, #0]
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	6899      	ldr	r1, [r3, #8]
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	685a      	ldr	r2, [r3, #4]
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	68db      	ldr	r3, [r3, #12]
 800386c:	f000 fada 	bl	8003e24 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	689a      	ldr	r2, [r3, #8]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800387e:	609a      	str	r2, [r3, #8]
      break;
 8003880:	e03c      	b.n	80038fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6818      	ldr	r0, [r3, #0]
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	6859      	ldr	r1, [r3, #4]
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	68db      	ldr	r3, [r3, #12]
 800388e:	461a      	mov	r2, r3
 8003890:	f000 fa4e 	bl	8003d30 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	2150      	movs	r1, #80	; 0x50
 800389a:	4618      	mov	r0, r3
 800389c:	f000 faa7 	bl	8003dee <TIM_ITRx_SetConfig>
      break;
 80038a0:	e02c      	b.n	80038fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6818      	ldr	r0, [r3, #0]
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	6859      	ldr	r1, [r3, #4]
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	68db      	ldr	r3, [r3, #12]
 80038ae:	461a      	mov	r2, r3
 80038b0:	f000 fa6d 	bl	8003d8e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	2160      	movs	r1, #96	; 0x60
 80038ba:	4618      	mov	r0, r3
 80038bc:	f000 fa97 	bl	8003dee <TIM_ITRx_SetConfig>
      break;
 80038c0:	e01c      	b.n	80038fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6818      	ldr	r0, [r3, #0]
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	6859      	ldr	r1, [r3, #4]
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	68db      	ldr	r3, [r3, #12]
 80038ce:	461a      	mov	r2, r3
 80038d0:	f000 fa2e 	bl	8003d30 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	2140      	movs	r1, #64	; 0x40
 80038da:	4618      	mov	r0, r3
 80038dc:	f000 fa87 	bl	8003dee <TIM_ITRx_SetConfig>
      break;
 80038e0:	e00c      	b.n	80038fc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681a      	ldr	r2, [r3, #0]
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4619      	mov	r1, r3
 80038ec:	4610      	mov	r0, r2
 80038ee:	f000 fa7e 	bl	8003dee <TIM_ITRx_SetConfig>
      break;
 80038f2:	e003      	b.n	80038fc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	73fb      	strb	r3, [r7, #15]
      break;
 80038f8:	e000      	b.n	80038fc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80038fa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2201      	movs	r2, #1
 8003900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2200      	movs	r2, #0
 8003908:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800390c:	7bfb      	ldrb	r3, [r7, #15]
}
 800390e:	4618      	mov	r0, r3
 8003910:	3710      	adds	r7, #16
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}
	...

08003918 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003918:	b480      	push	{r7}
 800391a:	b085      	sub	sp, #20
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
 8003920:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	4a34      	ldr	r2, [pc, #208]	; (80039fc <TIM_Base_SetConfig+0xe4>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d00f      	beq.n	8003950 <TIM_Base_SetConfig+0x38>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003936:	d00b      	beq.n	8003950 <TIM_Base_SetConfig+0x38>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	4a31      	ldr	r2, [pc, #196]	; (8003a00 <TIM_Base_SetConfig+0xe8>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d007      	beq.n	8003950 <TIM_Base_SetConfig+0x38>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	4a30      	ldr	r2, [pc, #192]	; (8003a04 <TIM_Base_SetConfig+0xec>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d003      	beq.n	8003950 <TIM_Base_SetConfig+0x38>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	4a2f      	ldr	r2, [pc, #188]	; (8003a08 <TIM_Base_SetConfig+0xf0>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d108      	bne.n	8003962 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003956:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	68fa      	ldr	r2, [r7, #12]
 800395e:	4313      	orrs	r3, r2
 8003960:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	4a25      	ldr	r2, [pc, #148]	; (80039fc <TIM_Base_SetConfig+0xe4>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d01b      	beq.n	80039a2 <TIM_Base_SetConfig+0x8a>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003970:	d017      	beq.n	80039a2 <TIM_Base_SetConfig+0x8a>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	4a22      	ldr	r2, [pc, #136]	; (8003a00 <TIM_Base_SetConfig+0xe8>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d013      	beq.n	80039a2 <TIM_Base_SetConfig+0x8a>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	4a21      	ldr	r2, [pc, #132]	; (8003a04 <TIM_Base_SetConfig+0xec>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d00f      	beq.n	80039a2 <TIM_Base_SetConfig+0x8a>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	4a20      	ldr	r2, [pc, #128]	; (8003a08 <TIM_Base_SetConfig+0xf0>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d00b      	beq.n	80039a2 <TIM_Base_SetConfig+0x8a>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	4a1f      	ldr	r2, [pc, #124]	; (8003a0c <TIM_Base_SetConfig+0xf4>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d007      	beq.n	80039a2 <TIM_Base_SetConfig+0x8a>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	4a1e      	ldr	r2, [pc, #120]	; (8003a10 <TIM_Base_SetConfig+0xf8>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d003      	beq.n	80039a2 <TIM_Base_SetConfig+0x8a>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	4a1d      	ldr	r2, [pc, #116]	; (8003a14 <TIM_Base_SetConfig+0xfc>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d108      	bne.n	80039b4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	68db      	ldr	r3, [r3, #12]
 80039ae:	68fa      	ldr	r2, [r7, #12]
 80039b0:	4313      	orrs	r3, r2
 80039b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	695b      	ldr	r3, [r3, #20]
 80039be:	4313      	orrs	r3, r2
 80039c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	68fa      	ldr	r2, [r7, #12]
 80039c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	689a      	ldr	r2, [r3, #8]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	681a      	ldr	r2, [r3, #0]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	4a08      	ldr	r2, [pc, #32]	; (80039fc <TIM_Base_SetConfig+0xe4>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d103      	bne.n	80039e8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	691a      	ldr	r2, [r3, #16]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2201      	movs	r2, #1
 80039ec:	615a      	str	r2, [r3, #20]
}
 80039ee:	bf00      	nop
 80039f0:	3714      	adds	r7, #20
 80039f2:	46bd      	mov	sp, r7
 80039f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f8:	4770      	bx	lr
 80039fa:	bf00      	nop
 80039fc:	40010000 	.word	0x40010000
 8003a00:	40000400 	.word	0x40000400
 8003a04:	40000800 	.word	0x40000800
 8003a08:	40000c00 	.word	0x40000c00
 8003a0c:	40014000 	.word	0x40014000
 8003a10:	40014400 	.word	0x40014400
 8003a14:	40014800 	.word	0x40014800

08003a18 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b087      	sub	sp, #28
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
 8003a20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6a1b      	ldr	r3, [r3, #32]
 8003a26:	f023 0201 	bic.w	r2, r3, #1
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6a1b      	ldr	r3, [r3, #32]
 8003a32:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	699b      	ldr	r3, [r3, #24]
 8003a3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	f023 0303 	bic.w	r3, r3, #3
 8003a4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	68fa      	ldr	r2, [r7, #12]
 8003a56:	4313      	orrs	r3, r2
 8003a58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	f023 0302 	bic.w	r3, r3, #2
 8003a60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	689b      	ldr	r3, [r3, #8]
 8003a66:	697a      	ldr	r2, [r7, #20]
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	4a1c      	ldr	r2, [pc, #112]	; (8003ae0 <TIM_OC1_SetConfig+0xc8>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d10c      	bne.n	8003a8e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	f023 0308 	bic.w	r3, r3, #8
 8003a7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	68db      	ldr	r3, [r3, #12]
 8003a80:	697a      	ldr	r2, [r7, #20]
 8003a82:	4313      	orrs	r3, r2
 8003a84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	f023 0304 	bic.w	r3, r3, #4
 8003a8c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	4a13      	ldr	r2, [pc, #76]	; (8003ae0 <TIM_OC1_SetConfig+0xc8>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d111      	bne.n	8003aba <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003aa4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	695b      	ldr	r3, [r3, #20]
 8003aaa:	693a      	ldr	r2, [r7, #16]
 8003aac:	4313      	orrs	r3, r2
 8003aae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	699b      	ldr	r3, [r3, #24]
 8003ab4:	693a      	ldr	r2, [r7, #16]
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	693a      	ldr	r2, [r7, #16]
 8003abe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	68fa      	ldr	r2, [r7, #12]
 8003ac4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	685a      	ldr	r2, [r3, #4]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	697a      	ldr	r2, [r7, #20]
 8003ad2:	621a      	str	r2, [r3, #32]
}
 8003ad4:	bf00      	nop
 8003ad6:	371c      	adds	r7, #28
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ade:	4770      	bx	lr
 8003ae0:	40010000 	.word	0x40010000

08003ae4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b087      	sub	sp, #28
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
 8003aec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6a1b      	ldr	r3, [r3, #32]
 8003af2:	f023 0210 	bic.w	r2, r3, #16
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6a1b      	ldr	r3, [r3, #32]
 8003afe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	699b      	ldr	r3, [r3, #24]
 8003b0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	021b      	lsls	r3, r3, #8
 8003b22:	68fa      	ldr	r2, [r7, #12]
 8003b24:	4313      	orrs	r3, r2
 8003b26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003b28:	697b      	ldr	r3, [r7, #20]
 8003b2a:	f023 0320 	bic.w	r3, r3, #32
 8003b2e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	011b      	lsls	r3, r3, #4
 8003b36:	697a      	ldr	r2, [r7, #20]
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	4a1e      	ldr	r2, [pc, #120]	; (8003bb8 <TIM_OC2_SetConfig+0xd4>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d10d      	bne.n	8003b60 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	68db      	ldr	r3, [r3, #12]
 8003b50:	011b      	lsls	r3, r3, #4
 8003b52:	697a      	ldr	r2, [r7, #20]
 8003b54:	4313      	orrs	r3, r2
 8003b56:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b5e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	4a15      	ldr	r2, [pc, #84]	; (8003bb8 <TIM_OC2_SetConfig+0xd4>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d113      	bne.n	8003b90 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003b6e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003b70:	693b      	ldr	r3, [r7, #16]
 8003b72:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003b76:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	695b      	ldr	r3, [r3, #20]
 8003b7c:	009b      	lsls	r3, r3, #2
 8003b7e:	693a      	ldr	r2, [r7, #16]
 8003b80:	4313      	orrs	r3, r2
 8003b82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	699b      	ldr	r3, [r3, #24]
 8003b88:	009b      	lsls	r3, r3, #2
 8003b8a:	693a      	ldr	r2, [r7, #16]
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	693a      	ldr	r2, [r7, #16]
 8003b94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	68fa      	ldr	r2, [r7, #12]
 8003b9a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	685a      	ldr	r2, [r3, #4]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	697a      	ldr	r2, [r7, #20]
 8003ba8:	621a      	str	r2, [r3, #32]
}
 8003baa:	bf00      	nop
 8003bac:	371c      	adds	r7, #28
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb4:	4770      	bx	lr
 8003bb6:	bf00      	nop
 8003bb8:	40010000 	.word	0x40010000

08003bbc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b087      	sub	sp, #28
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
 8003bc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6a1b      	ldr	r3, [r3, #32]
 8003bca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6a1b      	ldr	r3, [r3, #32]
 8003bd6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	69db      	ldr	r3, [r3, #28]
 8003be2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	f023 0303 	bic.w	r3, r3, #3
 8003bf2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	68fa      	ldr	r2, [r7, #12]
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003c04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	689b      	ldr	r3, [r3, #8]
 8003c0a:	021b      	lsls	r3, r3, #8
 8003c0c:	697a      	ldr	r2, [r7, #20]
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	4a1d      	ldr	r2, [pc, #116]	; (8003c8c <TIM_OC3_SetConfig+0xd0>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d10d      	bne.n	8003c36 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003c20:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	68db      	ldr	r3, [r3, #12]
 8003c26:	021b      	lsls	r3, r3, #8
 8003c28:	697a      	ldr	r2, [r7, #20]
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003c2e:	697b      	ldr	r3, [r7, #20]
 8003c30:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003c34:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	4a14      	ldr	r2, [pc, #80]	; (8003c8c <TIM_OC3_SetConfig+0xd0>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d113      	bne.n	8003c66 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003c44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003c4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	695b      	ldr	r3, [r3, #20]
 8003c52:	011b      	lsls	r3, r3, #4
 8003c54:	693a      	ldr	r2, [r7, #16]
 8003c56:	4313      	orrs	r3, r2
 8003c58:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	699b      	ldr	r3, [r3, #24]
 8003c5e:	011b      	lsls	r3, r3, #4
 8003c60:	693a      	ldr	r2, [r7, #16]
 8003c62:	4313      	orrs	r3, r2
 8003c64:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	693a      	ldr	r2, [r7, #16]
 8003c6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	68fa      	ldr	r2, [r7, #12]
 8003c70:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	685a      	ldr	r2, [r3, #4]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	697a      	ldr	r2, [r7, #20]
 8003c7e:	621a      	str	r2, [r3, #32]
}
 8003c80:	bf00      	nop
 8003c82:	371c      	adds	r7, #28
 8003c84:	46bd      	mov	sp, r7
 8003c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8a:	4770      	bx	lr
 8003c8c:	40010000 	.word	0x40010000

08003c90 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b087      	sub	sp, #28
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
 8003c98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6a1b      	ldr	r3, [r3, #32]
 8003c9e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6a1b      	ldr	r3, [r3, #32]
 8003caa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	69db      	ldr	r3, [r3, #28]
 8003cb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003cbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cc6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	021b      	lsls	r3, r3, #8
 8003cce:	68fa      	ldr	r2, [r7, #12]
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003cd4:	693b      	ldr	r3, [r7, #16]
 8003cd6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003cda:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	031b      	lsls	r3, r3, #12
 8003ce2:	693a      	ldr	r2, [r7, #16]
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	4a10      	ldr	r2, [pc, #64]	; (8003d2c <TIM_OC4_SetConfig+0x9c>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d109      	bne.n	8003d04 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003cf0:	697b      	ldr	r3, [r7, #20]
 8003cf2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003cf6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	695b      	ldr	r3, [r3, #20]
 8003cfc:	019b      	lsls	r3, r3, #6
 8003cfe:	697a      	ldr	r2, [r7, #20]
 8003d00:	4313      	orrs	r3, r2
 8003d02:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	697a      	ldr	r2, [r7, #20]
 8003d08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	68fa      	ldr	r2, [r7, #12]
 8003d0e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	685a      	ldr	r2, [r3, #4]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	693a      	ldr	r2, [r7, #16]
 8003d1c:	621a      	str	r2, [r3, #32]
}
 8003d1e:	bf00      	nop
 8003d20:	371c      	adds	r7, #28
 8003d22:	46bd      	mov	sp, r7
 8003d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d28:	4770      	bx	lr
 8003d2a:	bf00      	nop
 8003d2c:	40010000 	.word	0x40010000

08003d30 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b087      	sub	sp, #28
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	60f8      	str	r0, [r7, #12]
 8003d38:	60b9      	str	r1, [r7, #8]
 8003d3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	6a1b      	ldr	r3, [r3, #32]
 8003d40:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	6a1b      	ldr	r3, [r3, #32]
 8003d46:	f023 0201 	bic.w	r2, r3, #1
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	699b      	ldr	r3, [r3, #24]
 8003d52:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d5a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	011b      	lsls	r3, r3, #4
 8003d60:	693a      	ldr	r2, [r7, #16]
 8003d62:	4313      	orrs	r3, r2
 8003d64:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	f023 030a 	bic.w	r3, r3, #10
 8003d6c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003d6e:	697a      	ldr	r2, [r7, #20]
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	4313      	orrs	r3, r2
 8003d74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	693a      	ldr	r2, [r7, #16]
 8003d7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	697a      	ldr	r2, [r7, #20]
 8003d80:	621a      	str	r2, [r3, #32]
}
 8003d82:	bf00      	nop
 8003d84:	371c      	adds	r7, #28
 8003d86:	46bd      	mov	sp, r7
 8003d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8c:	4770      	bx	lr

08003d8e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d8e:	b480      	push	{r7}
 8003d90:	b087      	sub	sp, #28
 8003d92:	af00      	add	r7, sp, #0
 8003d94:	60f8      	str	r0, [r7, #12]
 8003d96:	60b9      	str	r1, [r7, #8]
 8003d98:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	6a1b      	ldr	r3, [r3, #32]
 8003d9e:	f023 0210 	bic.w	r2, r3, #16
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	699b      	ldr	r3, [r3, #24]
 8003daa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	6a1b      	ldr	r3, [r3, #32]
 8003db0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003db8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	031b      	lsls	r3, r3, #12
 8003dbe:	697a      	ldr	r2, [r7, #20]
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003dc4:	693b      	ldr	r3, [r7, #16]
 8003dc6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003dca:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	011b      	lsls	r3, r3, #4
 8003dd0:	693a      	ldr	r2, [r7, #16]
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	697a      	ldr	r2, [r7, #20]
 8003dda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	693a      	ldr	r2, [r7, #16]
 8003de0:	621a      	str	r2, [r3, #32]
}
 8003de2:	bf00      	nop
 8003de4:	371c      	adds	r7, #28
 8003de6:	46bd      	mov	sp, r7
 8003de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dec:	4770      	bx	lr

08003dee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003dee:	b480      	push	{r7}
 8003df0:	b085      	sub	sp, #20
 8003df2:	af00      	add	r7, sp, #0
 8003df4:	6078      	str	r0, [r7, #4]
 8003df6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	689b      	ldr	r3, [r3, #8]
 8003dfc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e04:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003e06:	683a      	ldr	r2, [r7, #0]
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	f043 0307 	orr.w	r3, r3, #7
 8003e10:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	68fa      	ldr	r2, [r7, #12]
 8003e16:	609a      	str	r2, [r3, #8]
}
 8003e18:	bf00      	nop
 8003e1a:	3714      	adds	r7, #20
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e22:	4770      	bx	lr

08003e24 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b087      	sub	sp, #28
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	60f8      	str	r0, [r7, #12]
 8003e2c:	60b9      	str	r1, [r7, #8]
 8003e2e:	607a      	str	r2, [r7, #4]
 8003e30:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	689b      	ldr	r3, [r3, #8]
 8003e36:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e3e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	021a      	lsls	r2, r3, #8
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	431a      	orrs	r2, r3
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	697a      	ldr	r2, [r7, #20]
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	697a      	ldr	r2, [r7, #20]
 8003e56:	609a      	str	r2, [r3, #8]
}
 8003e58:	bf00      	nop
 8003e5a:	371c      	adds	r7, #28
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e62:	4770      	bx	lr

08003e64 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b087      	sub	sp, #28
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	60f8      	str	r0, [r7, #12]
 8003e6c:	60b9      	str	r1, [r7, #8]
 8003e6e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	f003 031f 	and.w	r3, r3, #31
 8003e76:	2201      	movs	r2, #1
 8003e78:	fa02 f303 	lsl.w	r3, r2, r3
 8003e7c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	6a1a      	ldr	r2, [r3, #32]
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	43db      	mvns	r3, r3
 8003e86:	401a      	ands	r2, r3
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	6a1a      	ldr	r2, [r3, #32]
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	f003 031f 	and.w	r3, r3, #31
 8003e96:	6879      	ldr	r1, [r7, #4]
 8003e98:	fa01 f303 	lsl.w	r3, r1, r3
 8003e9c:	431a      	orrs	r2, r3
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	621a      	str	r2, [r3, #32]
}
 8003ea2:	bf00      	nop
 8003ea4:	371c      	adds	r7, #28
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eac:	4770      	bx	lr
	...

08003eb0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b085      	sub	sp, #20
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
 8003eb8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ec0:	2b01      	cmp	r3, #1
 8003ec2:	d101      	bne.n	8003ec8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003ec4:	2302      	movs	r3, #2
 8003ec6:	e050      	b.n	8003f6a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2201      	movs	r2, #1
 8003ecc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2202      	movs	r2, #2
 8003ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003eee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	68fa      	ldr	r2, [r7, #12]
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	68fa      	ldr	r2, [r7, #12]
 8003f00:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a1c      	ldr	r2, [pc, #112]	; (8003f78 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d018      	beq.n	8003f3e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f14:	d013      	beq.n	8003f3e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a18      	ldr	r2, [pc, #96]	; (8003f7c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d00e      	beq.n	8003f3e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a16      	ldr	r2, [pc, #88]	; (8003f80 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d009      	beq.n	8003f3e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a15      	ldr	r2, [pc, #84]	; (8003f84 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d004      	beq.n	8003f3e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a13      	ldr	r2, [pc, #76]	; (8003f88 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d10c      	bne.n	8003f58 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f44:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	68ba      	ldr	r2, [r7, #8]
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	68ba      	ldr	r2, [r7, #8]
 8003f56:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2200      	movs	r2, #0
 8003f64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f68:	2300      	movs	r3, #0
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	3714      	adds	r7, #20
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f74:	4770      	bx	lr
 8003f76:	bf00      	nop
 8003f78:	40010000 	.word	0x40010000
 8003f7c:	40000400 	.word	0x40000400
 8003f80:	40000800 	.word	0x40000800
 8003f84:	40000c00 	.word	0x40000c00
 8003f88:	40014000 	.word	0x40014000

08003f8c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b082      	sub	sp, #8
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d101      	bne.n	8003f9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	e03f      	b.n	800401e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fa4:	b2db      	uxtb	r3, r3
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d106      	bne.n	8003fb8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2200      	movs	r2, #0
 8003fae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	f7fd ff60 	bl	8001e78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2224      	movs	r2, #36	; 0x24
 8003fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	68da      	ldr	r2, [r3, #12]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003fce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003fd0:	6878      	ldr	r0, [r7, #4]
 8003fd2:	f000 fe77 	bl	8004cc4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	691a      	ldr	r2, [r3, #16]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003fe4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	695a      	ldr	r2, [r3, #20]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003ff4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	68da      	ldr	r2, [r3, #12]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004004:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2200      	movs	r2, #0
 800400a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2220      	movs	r2, #32
 8004010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2220      	movs	r2, #32
 8004018:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800401c:	2300      	movs	r3, #0
}
 800401e:	4618      	mov	r0, r3
 8004020:	3708      	adds	r7, #8
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}

08004026 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004026:	b580      	push	{r7, lr}
 8004028:	b08a      	sub	sp, #40	; 0x28
 800402a:	af02      	add	r7, sp, #8
 800402c:	60f8      	str	r0, [r7, #12]
 800402e:	60b9      	str	r1, [r7, #8]
 8004030:	603b      	str	r3, [r7, #0]
 8004032:	4613      	mov	r3, r2
 8004034:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004036:	2300      	movs	r3, #0
 8004038:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004040:	b2db      	uxtb	r3, r3
 8004042:	2b20      	cmp	r3, #32
 8004044:	d17c      	bne.n	8004140 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004046:	68bb      	ldr	r3, [r7, #8]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d002      	beq.n	8004052 <HAL_UART_Transmit+0x2c>
 800404c:	88fb      	ldrh	r3, [r7, #6]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d101      	bne.n	8004056 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	e075      	b.n	8004142 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800405c:	2b01      	cmp	r3, #1
 800405e:	d101      	bne.n	8004064 <HAL_UART_Transmit+0x3e>
 8004060:	2302      	movs	r3, #2
 8004062:	e06e      	b.n	8004142 <HAL_UART_Transmit+0x11c>
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	2201      	movs	r2, #1
 8004068:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	2200      	movs	r2, #0
 8004070:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	2221      	movs	r2, #33	; 0x21
 8004076:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800407a:	f7fe f8b1 	bl	80021e0 <HAL_GetTick>
 800407e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	88fa      	ldrh	r2, [r7, #6]
 8004084:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	88fa      	ldrh	r2, [r7, #6]
 800408a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004094:	d108      	bne.n	80040a8 <HAL_UART_Transmit+0x82>
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	691b      	ldr	r3, [r3, #16]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d104      	bne.n	80040a8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800409e:	2300      	movs	r3, #0
 80040a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	61bb      	str	r3, [r7, #24]
 80040a6:	e003      	b.n	80040b0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80040ac:	2300      	movs	r3, #0
 80040ae:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	2200      	movs	r2, #0
 80040b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80040b8:	e02a      	b.n	8004110 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	9300      	str	r3, [sp, #0]
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	2200      	movs	r2, #0
 80040c2:	2180      	movs	r1, #128	; 0x80
 80040c4:	68f8      	ldr	r0, [r7, #12]
 80040c6:	f000 fbb7 	bl	8004838 <UART_WaitOnFlagUntilTimeout>
 80040ca:	4603      	mov	r3, r0
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d001      	beq.n	80040d4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80040d0:	2303      	movs	r3, #3
 80040d2:	e036      	b.n	8004142 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80040d4:	69fb      	ldr	r3, [r7, #28]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d10b      	bne.n	80040f2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80040da:	69bb      	ldr	r3, [r7, #24]
 80040dc:	881b      	ldrh	r3, [r3, #0]
 80040de:	461a      	mov	r2, r3
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80040e8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80040ea:	69bb      	ldr	r3, [r7, #24]
 80040ec:	3302      	adds	r3, #2
 80040ee:	61bb      	str	r3, [r7, #24]
 80040f0:	e007      	b.n	8004102 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80040f2:	69fb      	ldr	r3, [r7, #28]
 80040f4:	781a      	ldrb	r2, [r3, #0]
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80040fc:	69fb      	ldr	r3, [r7, #28]
 80040fe:	3301      	adds	r3, #1
 8004100:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004106:	b29b      	uxth	r3, r3
 8004108:	3b01      	subs	r3, #1
 800410a:	b29a      	uxth	r2, r3
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004114:	b29b      	uxth	r3, r3
 8004116:	2b00      	cmp	r3, #0
 8004118:	d1cf      	bne.n	80040ba <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	9300      	str	r3, [sp, #0]
 800411e:	697b      	ldr	r3, [r7, #20]
 8004120:	2200      	movs	r2, #0
 8004122:	2140      	movs	r1, #64	; 0x40
 8004124:	68f8      	ldr	r0, [r7, #12]
 8004126:	f000 fb87 	bl	8004838 <UART_WaitOnFlagUntilTimeout>
 800412a:	4603      	mov	r3, r0
 800412c:	2b00      	cmp	r3, #0
 800412e:	d001      	beq.n	8004134 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004130:	2303      	movs	r3, #3
 8004132:	e006      	b.n	8004142 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	2220      	movs	r2, #32
 8004138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800413c:	2300      	movs	r3, #0
 800413e:	e000      	b.n	8004142 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004140:	2302      	movs	r3, #2
  }
}
 8004142:	4618      	mov	r0, r3
 8004144:	3720      	adds	r7, #32
 8004146:	46bd      	mov	sp, r7
 8004148:	bd80      	pop	{r7, pc}

0800414a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800414a:	b580      	push	{r7, lr}
 800414c:	b08a      	sub	sp, #40	; 0x28
 800414e:	af02      	add	r7, sp, #8
 8004150:	60f8      	str	r0, [r7, #12]
 8004152:	60b9      	str	r1, [r7, #8]
 8004154:	603b      	str	r3, [r7, #0]
 8004156:	4613      	mov	r3, r2
 8004158:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800415a:	2300      	movs	r3, #0
 800415c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004164:	b2db      	uxtb	r3, r3
 8004166:	2b20      	cmp	r3, #32
 8004168:	f040 808c 	bne.w	8004284 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d002      	beq.n	8004178 <HAL_UART_Receive+0x2e>
 8004172:	88fb      	ldrh	r3, [r7, #6]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d101      	bne.n	800417c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8004178:	2301      	movs	r3, #1
 800417a:	e084      	b.n	8004286 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004182:	2b01      	cmp	r3, #1
 8004184:	d101      	bne.n	800418a <HAL_UART_Receive+0x40>
 8004186:	2302      	movs	r3, #2
 8004188:	e07d      	b.n	8004286 <HAL_UART_Receive+0x13c>
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	2201      	movs	r2, #1
 800418e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	2200      	movs	r2, #0
 8004196:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2222      	movs	r2, #34	; 0x22
 800419c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	2200      	movs	r2, #0
 80041a4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80041a6:	f7fe f81b 	bl	80021e0 <HAL_GetTick>
 80041aa:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	88fa      	ldrh	r2, [r7, #6]
 80041b0:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	88fa      	ldrh	r2, [r7, #6]
 80041b6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	689b      	ldr	r3, [r3, #8]
 80041bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041c0:	d108      	bne.n	80041d4 <HAL_UART_Receive+0x8a>
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	691b      	ldr	r3, [r3, #16]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d104      	bne.n	80041d4 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80041ca:	2300      	movs	r3, #0
 80041cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	61bb      	str	r3, [r7, #24]
 80041d2:	e003      	b.n	80041dc <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80041d8:	2300      	movs	r3, #0
 80041da:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	2200      	movs	r2, #0
 80041e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80041e4:	e043      	b.n	800426e <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	9300      	str	r3, [sp, #0]
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	2200      	movs	r2, #0
 80041ee:	2120      	movs	r1, #32
 80041f0:	68f8      	ldr	r0, [r7, #12]
 80041f2:	f000 fb21 	bl	8004838 <UART_WaitOnFlagUntilTimeout>
 80041f6:	4603      	mov	r3, r0
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d001      	beq.n	8004200 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80041fc:	2303      	movs	r3, #3
 80041fe:	e042      	b.n	8004286 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8004200:	69fb      	ldr	r3, [r7, #28]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d10c      	bne.n	8004220 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	b29b      	uxth	r3, r3
 800420e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004212:	b29a      	uxth	r2, r3
 8004214:	69bb      	ldr	r3, [r7, #24]
 8004216:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004218:	69bb      	ldr	r3, [r7, #24]
 800421a:	3302      	adds	r3, #2
 800421c:	61bb      	str	r3, [r7, #24]
 800421e:	e01f      	b.n	8004260 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	689b      	ldr	r3, [r3, #8]
 8004224:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004228:	d007      	beq.n	800423a <HAL_UART_Receive+0xf0>
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	689b      	ldr	r3, [r3, #8]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d10a      	bne.n	8004248 <HAL_UART_Receive+0xfe>
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	691b      	ldr	r3, [r3, #16]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d106      	bne.n	8004248 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	b2da      	uxtb	r2, r3
 8004242:	69fb      	ldr	r3, [r7, #28]
 8004244:	701a      	strb	r2, [r3, #0]
 8004246:	e008      	b.n	800425a <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	b2db      	uxtb	r3, r3
 8004250:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004254:	b2da      	uxtb	r2, r3
 8004256:	69fb      	ldr	r3, [r7, #28]
 8004258:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800425a:	69fb      	ldr	r3, [r7, #28]
 800425c:	3301      	adds	r3, #1
 800425e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004264:	b29b      	uxth	r3, r3
 8004266:	3b01      	subs	r3, #1
 8004268:	b29a      	uxth	r2, r3
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004272:	b29b      	uxth	r3, r3
 8004274:	2b00      	cmp	r3, #0
 8004276:	d1b6      	bne.n	80041e6 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	2220      	movs	r2, #32
 800427c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8004280:	2300      	movs	r3, #0
 8004282:	e000      	b.n	8004286 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8004284:	2302      	movs	r3, #2
  }
}
 8004286:	4618      	mov	r0, r3
 8004288:	3720      	adds	r7, #32
 800428a:	46bd      	mov	sp, r7
 800428c:	bd80      	pop	{r7, pc}

0800428e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800428e:	b580      	push	{r7, lr}
 8004290:	b084      	sub	sp, #16
 8004292:	af00      	add	r7, sp, #0
 8004294:	60f8      	str	r0, [r7, #12]
 8004296:	60b9      	str	r1, [r7, #8]
 8004298:	4613      	mov	r3, r2
 800429a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80042a2:	b2db      	uxtb	r3, r3
 80042a4:	2b20      	cmp	r3, #32
 80042a6:	d11d      	bne.n	80042e4 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d002      	beq.n	80042b4 <HAL_UART_Receive_IT+0x26>
 80042ae:	88fb      	ldrh	r3, [r7, #6]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d101      	bne.n	80042b8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80042b4:	2301      	movs	r3, #1
 80042b6:	e016      	b.n	80042e6 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042be:	2b01      	cmp	r3, #1
 80042c0:	d101      	bne.n	80042c6 <HAL_UART_Receive_IT+0x38>
 80042c2:	2302      	movs	r3, #2
 80042c4:	e00f      	b.n	80042e6 <HAL_UART_Receive_IT+0x58>
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	2201      	movs	r2, #1
 80042ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	2200      	movs	r2, #0
 80042d2:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80042d4:	88fb      	ldrh	r3, [r7, #6]
 80042d6:	461a      	mov	r2, r3
 80042d8:	68b9      	ldr	r1, [r7, #8]
 80042da:	68f8      	ldr	r0, [r7, #12]
 80042dc:	f000 fb1a 	bl	8004914 <UART_Start_Receive_IT>
 80042e0:	4603      	mov	r3, r0
 80042e2:	e000      	b.n	80042e6 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80042e4:	2302      	movs	r3, #2
  }
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	3710      	adds	r7, #16
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}
	...

080042f0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b0ba      	sub	sp, #232	; 0xe8
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	68db      	ldr	r3, [r3, #12]
 8004308:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	695b      	ldr	r3, [r3, #20]
 8004312:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004316:	2300      	movs	r3, #0
 8004318:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800431c:	2300      	movs	r3, #0
 800431e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004322:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004326:	f003 030f 	and.w	r3, r3, #15
 800432a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800432e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004332:	2b00      	cmp	r3, #0
 8004334:	d10f      	bne.n	8004356 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004336:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800433a:	f003 0320 	and.w	r3, r3, #32
 800433e:	2b00      	cmp	r3, #0
 8004340:	d009      	beq.n	8004356 <HAL_UART_IRQHandler+0x66>
 8004342:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004346:	f003 0320 	and.w	r3, r3, #32
 800434a:	2b00      	cmp	r3, #0
 800434c:	d003      	beq.n	8004356 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800434e:	6878      	ldr	r0, [r7, #4]
 8004350:	f000 fbfd 	bl	8004b4e <UART_Receive_IT>
      return;
 8004354:	e256      	b.n	8004804 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004356:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800435a:	2b00      	cmp	r3, #0
 800435c:	f000 80de 	beq.w	800451c <HAL_UART_IRQHandler+0x22c>
 8004360:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004364:	f003 0301 	and.w	r3, r3, #1
 8004368:	2b00      	cmp	r3, #0
 800436a:	d106      	bne.n	800437a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800436c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004370:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004374:	2b00      	cmp	r3, #0
 8004376:	f000 80d1 	beq.w	800451c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800437a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800437e:	f003 0301 	and.w	r3, r3, #1
 8004382:	2b00      	cmp	r3, #0
 8004384:	d00b      	beq.n	800439e <HAL_UART_IRQHandler+0xae>
 8004386:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800438a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800438e:	2b00      	cmp	r3, #0
 8004390:	d005      	beq.n	800439e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004396:	f043 0201 	orr.w	r2, r3, #1
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800439e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043a2:	f003 0304 	and.w	r3, r3, #4
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d00b      	beq.n	80043c2 <HAL_UART_IRQHandler+0xd2>
 80043aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80043ae:	f003 0301 	and.w	r3, r3, #1
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d005      	beq.n	80043c2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ba:	f043 0202 	orr.w	r2, r3, #2
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80043c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043c6:	f003 0302 	and.w	r3, r3, #2
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d00b      	beq.n	80043e6 <HAL_UART_IRQHandler+0xf6>
 80043ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80043d2:	f003 0301 	and.w	r3, r3, #1
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d005      	beq.n	80043e6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043de:	f043 0204 	orr.w	r2, r3, #4
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80043e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043ea:	f003 0308 	and.w	r3, r3, #8
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d011      	beq.n	8004416 <HAL_UART_IRQHandler+0x126>
 80043f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043f6:	f003 0320 	and.w	r3, r3, #32
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d105      	bne.n	800440a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80043fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004402:	f003 0301 	and.w	r3, r3, #1
 8004406:	2b00      	cmp	r3, #0
 8004408:	d005      	beq.n	8004416 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800440e:	f043 0208 	orr.w	r2, r3, #8
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800441a:	2b00      	cmp	r3, #0
 800441c:	f000 81ed 	beq.w	80047fa <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004420:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004424:	f003 0320 	and.w	r3, r3, #32
 8004428:	2b00      	cmp	r3, #0
 800442a:	d008      	beq.n	800443e <HAL_UART_IRQHandler+0x14e>
 800442c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004430:	f003 0320 	and.w	r3, r3, #32
 8004434:	2b00      	cmp	r3, #0
 8004436:	d002      	beq.n	800443e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004438:	6878      	ldr	r0, [r7, #4]
 800443a:	f000 fb88 	bl	8004b4e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	695b      	ldr	r3, [r3, #20]
 8004444:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004448:	2b40      	cmp	r3, #64	; 0x40
 800444a:	bf0c      	ite	eq
 800444c:	2301      	moveq	r3, #1
 800444e:	2300      	movne	r3, #0
 8004450:	b2db      	uxtb	r3, r3
 8004452:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800445a:	f003 0308 	and.w	r3, r3, #8
 800445e:	2b00      	cmp	r3, #0
 8004460:	d103      	bne.n	800446a <HAL_UART_IRQHandler+0x17a>
 8004462:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004466:	2b00      	cmp	r3, #0
 8004468:	d04f      	beq.n	800450a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800446a:	6878      	ldr	r0, [r7, #4]
 800446c:	f000 fa90 	bl	8004990 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	695b      	ldr	r3, [r3, #20]
 8004476:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800447a:	2b40      	cmp	r3, #64	; 0x40
 800447c:	d141      	bne.n	8004502 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	3314      	adds	r3, #20
 8004484:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004488:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800448c:	e853 3f00 	ldrex	r3, [r3]
 8004490:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004494:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004498:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800449c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	3314      	adds	r3, #20
 80044a6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80044aa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80044ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044b2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80044b6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80044ba:	e841 2300 	strex	r3, r2, [r1]
 80044be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80044c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d1d9      	bne.n	800447e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d013      	beq.n	80044fa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044d6:	4a7d      	ldr	r2, [pc, #500]	; (80046cc <HAL_UART_IRQHandler+0x3dc>)
 80044d8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044de:	4618      	mov	r0, r3
 80044e0:	f7fe f82f 	bl	8002542 <HAL_DMA_Abort_IT>
 80044e4:	4603      	mov	r3, r0
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d016      	beq.n	8004518 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044f0:	687a      	ldr	r2, [r7, #4]
 80044f2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80044f4:	4610      	mov	r0, r2
 80044f6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044f8:	e00e      	b.n	8004518 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80044fa:	6878      	ldr	r0, [r7, #4]
 80044fc:	f000 f986 	bl	800480c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004500:	e00a      	b.n	8004518 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004502:	6878      	ldr	r0, [r7, #4]
 8004504:	f000 f982 	bl	800480c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004508:	e006      	b.n	8004518 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800450a:	6878      	ldr	r0, [r7, #4]
 800450c:	f000 f97e 	bl	800480c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2200      	movs	r2, #0
 8004514:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004516:	e170      	b.n	80047fa <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004518:	bf00      	nop
    return;
 800451a:	e16e      	b.n	80047fa <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004520:	2b01      	cmp	r3, #1
 8004522:	f040 814a 	bne.w	80047ba <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004526:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800452a:	f003 0310 	and.w	r3, r3, #16
 800452e:	2b00      	cmp	r3, #0
 8004530:	f000 8143 	beq.w	80047ba <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004534:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004538:	f003 0310 	and.w	r3, r3, #16
 800453c:	2b00      	cmp	r3, #0
 800453e:	f000 813c 	beq.w	80047ba <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004542:	2300      	movs	r3, #0
 8004544:	60bb      	str	r3, [r7, #8]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	60bb      	str	r3, [r7, #8]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	60bb      	str	r3, [r7, #8]
 8004556:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	695b      	ldr	r3, [r3, #20]
 800455e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004562:	2b40      	cmp	r3, #64	; 0x40
 8004564:	f040 80b4 	bne.w	80046d0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004574:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004578:	2b00      	cmp	r3, #0
 800457a:	f000 8140 	beq.w	80047fe <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004582:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004586:	429a      	cmp	r2, r3
 8004588:	f080 8139 	bcs.w	80047fe <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004592:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004598:	69db      	ldr	r3, [r3, #28]
 800459a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800459e:	f000 8088 	beq.w	80046b2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	330c      	adds	r3, #12
 80045a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80045b0:	e853 3f00 	ldrex	r3, [r3]
 80045b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80045b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80045bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80045c0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	330c      	adds	r3, #12
 80045ca:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80045ce:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80045d2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045d6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80045da:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80045de:	e841 2300 	strex	r3, r2, [r1]
 80045e2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80045e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d1d9      	bne.n	80045a2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	3314      	adds	r3, #20
 80045f4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80045f8:	e853 3f00 	ldrex	r3, [r3]
 80045fc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80045fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004600:	f023 0301 	bic.w	r3, r3, #1
 8004604:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	3314      	adds	r3, #20
 800460e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004612:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004616:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004618:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800461a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800461e:	e841 2300 	strex	r3, r2, [r1]
 8004622:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004624:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004626:	2b00      	cmp	r3, #0
 8004628:	d1e1      	bne.n	80045ee <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	3314      	adds	r3, #20
 8004630:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004632:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004634:	e853 3f00 	ldrex	r3, [r3]
 8004638:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800463a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800463c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004640:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	3314      	adds	r3, #20
 800464a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800464e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004650:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004652:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004654:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004656:	e841 2300 	strex	r3, r2, [r1]
 800465a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800465c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800465e:	2b00      	cmp	r3, #0
 8004660:	d1e3      	bne.n	800462a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2220      	movs	r2, #32
 8004666:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2200      	movs	r2, #0
 800466e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	330c      	adds	r3, #12
 8004676:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004678:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800467a:	e853 3f00 	ldrex	r3, [r3]
 800467e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004680:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004682:	f023 0310 	bic.w	r3, r3, #16
 8004686:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	330c      	adds	r3, #12
 8004690:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004694:	65ba      	str	r2, [r7, #88]	; 0x58
 8004696:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004698:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800469a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800469c:	e841 2300 	strex	r3, r2, [r1]
 80046a0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80046a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d1e3      	bne.n	8004670 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046ac:	4618      	mov	r0, r3
 80046ae:	f7fd fed8 	bl	8002462 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80046ba:	b29b      	uxth	r3, r3
 80046bc:	1ad3      	subs	r3, r2, r3
 80046be:	b29b      	uxth	r3, r3
 80046c0:	4619      	mov	r1, r3
 80046c2:	6878      	ldr	r0, [r7, #4]
 80046c4:	f000 f8ac 	bl	8004820 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80046c8:	e099      	b.n	80047fe <HAL_UART_IRQHandler+0x50e>
 80046ca:	bf00      	nop
 80046cc:	08004a57 	.word	0x08004a57
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80046d8:	b29b      	uxth	r3, r3
 80046da:	1ad3      	subs	r3, r2, r3
 80046dc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80046e4:	b29b      	uxth	r3, r3
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	f000 808b 	beq.w	8004802 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80046ec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	f000 8086 	beq.w	8004802 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	330c      	adds	r3, #12
 80046fc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004700:	e853 3f00 	ldrex	r3, [r3]
 8004704:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004706:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004708:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800470c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	330c      	adds	r3, #12
 8004716:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800471a:	647a      	str	r2, [r7, #68]	; 0x44
 800471c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800471e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004720:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004722:	e841 2300 	strex	r3, r2, [r1]
 8004726:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004728:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800472a:	2b00      	cmp	r3, #0
 800472c:	d1e3      	bne.n	80046f6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	3314      	adds	r3, #20
 8004734:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004738:	e853 3f00 	ldrex	r3, [r3]
 800473c:	623b      	str	r3, [r7, #32]
   return(result);
 800473e:	6a3b      	ldr	r3, [r7, #32]
 8004740:	f023 0301 	bic.w	r3, r3, #1
 8004744:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	3314      	adds	r3, #20
 800474e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004752:	633a      	str	r2, [r7, #48]	; 0x30
 8004754:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004756:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004758:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800475a:	e841 2300 	strex	r3, r2, [r1]
 800475e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004762:	2b00      	cmp	r3, #0
 8004764:	d1e3      	bne.n	800472e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2220      	movs	r2, #32
 800476a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2200      	movs	r2, #0
 8004772:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	330c      	adds	r3, #12
 800477a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	e853 3f00 	ldrex	r3, [r3]
 8004782:	60fb      	str	r3, [r7, #12]
   return(result);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	f023 0310 	bic.w	r3, r3, #16
 800478a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	330c      	adds	r3, #12
 8004794:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004798:	61fa      	str	r2, [r7, #28]
 800479a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800479c:	69b9      	ldr	r1, [r7, #24]
 800479e:	69fa      	ldr	r2, [r7, #28]
 80047a0:	e841 2300 	strex	r3, r2, [r1]
 80047a4:	617b      	str	r3, [r7, #20]
   return(result);
 80047a6:	697b      	ldr	r3, [r7, #20]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d1e3      	bne.n	8004774 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80047ac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80047b0:	4619      	mov	r1, r3
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	f000 f834 	bl	8004820 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80047b8:	e023      	b.n	8004802 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80047ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d009      	beq.n	80047da <HAL_UART_IRQHandler+0x4ea>
 80047c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d003      	beq.n	80047da <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80047d2:	6878      	ldr	r0, [r7, #4]
 80047d4:	f000 f953 	bl	8004a7e <UART_Transmit_IT>
    return;
 80047d8:	e014      	b.n	8004804 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80047da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d00e      	beq.n	8004804 <HAL_UART_IRQHandler+0x514>
 80047e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d008      	beq.n	8004804 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80047f2:	6878      	ldr	r0, [r7, #4]
 80047f4:	f000 f993 	bl	8004b1e <UART_EndTransmit_IT>
    return;
 80047f8:	e004      	b.n	8004804 <HAL_UART_IRQHandler+0x514>
    return;
 80047fa:	bf00      	nop
 80047fc:	e002      	b.n	8004804 <HAL_UART_IRQHandler+0x514>
      return;
 80047fe:	bf00      	nop
 8004800:	e000      	b.n	8004804 <HAL_UART_IRQHandler+0x514>
      return;
 8004802:	bf00      	nop
  }
}
 8004804:	37e8      	adds	r7, #232	; 0xe8
 8004806:	46bd      	mov	sp, r7
 8004808:	bd80      	pop	{r7, pc}
 800480a:	bf00      	nop

0800480c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800480c:	b480      	push	{r7}
 800480e:	b083      	sub	sp, #12
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004814:	bf00      	nop
 8004816:	370c      	adds	r7, #12
 8004818:	46bd      	mov	sp, r7
 800481a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481e:	4770      	bx	lr

08004820 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004820:	b480      	push	{r7}
 8004822:	b083      	sub	sp, #12
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
 8004828:	460b      	mov	r3, r1
 800482a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800482c:	bf00      	nop
 800482e:	370c      	adds	r7, #12
 8004830:	46bd      	mov	sp, r7
 8004832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004836:	4770      	bx	lr

08004838 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b090      	sub	sp, #64	; 0x40
 800483c:	af00      	add	r7, sp, #0
 800483e:	60f8      	str	r0, [r7, #12]
 8004840:	60b9      	str	r1, [r7, #8]
 8004842:	603b      	str	r3, [r7, #0]
 8004844:	4613      	mov	r3, r2
 8004846:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004848:	e050      	b.n	80048ec <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800484a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800484c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004850:	d04c      	beq.n	80048ec <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004852:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004854:	2b00      	cmp	r3, #0
 8004856:	d007      	beq.n	8004868 <UART_WaitOnFlagUntilTimeout+0x30>
 8004858:	f7fd fcc2 	bl	80021e0 <HAL_GetTick>
 800485c:	4602      	mov	r2, r0
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	1ad3      	subs	r3, r2, r3
 8004862:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004864:	429a      	cmp	r2, r3
 8004866:	d241      	bcs.n	80048ec <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	330c      	adds	r3, #12
 800486e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004872:	e853 3f00 	ldrex	r3, [r3]
 8004876:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800487a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800487e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	330c      	adds	r3, #12
 8004886:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004888:	637a      	str	r2, [r7, #52]	; 0x34
 800488a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800488c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800488e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004890:	e841 2300 	strex	r3, r2, [r1]
 8004894:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004898:	2b00      	cmp	r3, #0
 800489a:	d1e5      	bne.n	8004868 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	3314      	adds	r3, #20
 80048a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	e853 3f00 	ldrex	r3, [r3]
 80048aa:	613b      	str	r3, [r7, #16]
   return(result);
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	f023 0301 	bic.w	r3, r3, #1
 80048b2:	63bb      	str	r3, [r7, #56]	; 0x38
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	3314      	adds	r3, #20
 80048ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80048bc:	623a      	str	r2, [r7, #32]
 80048be:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048c0:	69f9      	ldr	r1, [r7, #28]
 80048c2:	6a3a      	ldr	r2, [r7, #32]
 80048c4:	e841 2300 	strex	r3, r2, [r1]
 80048c8:	61bb      	str	r3, [r7, #24]
   return(result);
 80048ca:	69bb      	ldr	r3, [r7, #24]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d1e5      	bne.n	800489c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	2220      	movs	r2, #32
 80048d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	2220      	movs	r2, #32
 80048dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	2200      	movs	r2, #0
 80048e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80048e8:	2303      	movs	r3, #3
 80048ea:	e00f      	b.n	800490c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	681a      	ldr	r2, [r3, #0]
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	4013      	ands	r3, r2
 80048f6:	68ba      	ldr	r2, [r7, #8]
 80048f8:	429a      	cmp	r2, r3
 80048fa:	bf0c      	ite	eq
 80048fc:	2301      	moveq	r3, #1
 80048fe:	2300      	movne	r3, #0
 8004900:	b2db      	uxtb	r3, r3
 8004902:	461a      	mov	r2, r3
 8004904:	79fb      	ldrb	r3, [r7, #7]
 8004906:	429a      	cmp	r2, r3
 8004908:	d09f      	beq.n	800484a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800490a:	2300      	movs	r3, #0
}
 800490c:	4618      	mov	r0, r3
 800490e:	3740      	adds	r7, #64	; 0x40
 8004910:	46bd      	mov	sp, r7
 8004912:	bd80      	pop	{r7, pc}

08004914 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004914:	b480      	push	{r7}
 8004916:	b085      	sub	sp, #20
 8004918:	af00      	add	r7, sp, #0
 800491a:	60f8      	str	r0, [r7, #12]
 800491c:	60b9      	str	r1, [r7, #8]
 800491e:	4613      	mov	r3, r2
 8004920:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	68ba      	ldr	r2, [r7, #8]
 8004926:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	88fa      	ldrh	r2, [r7, #6]
 800492c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	88fa      	ldrh	r2, [r7, #6]
 8004932:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	2200      	movs	r2, #0
 8004938:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	2222      	movs	r2, #34	; 0x22
 800493e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	2200      	movs	r2, #0
 8004946:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	691b      	ldr	r3, [r3, #16]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d007      	beq.n	8004962 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	68da      	ldr	r2, [r3, #12]
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004960:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	695a      	ldr	r2, [r3, #20]
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f042 0201 	orr.w	r2, r2, #1
 8004970:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	68da      	ldr	r2, [r3, #12]
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f042 0220 	orr.w	r2, r2, #32
 8004980:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004982:	2300      	movs	r3, #0
}
 8004984:	4618      	mov	r0, r3
 8004986:	3714      	adds	r7, #20
 8004988:	46bd      	mov	sp, r7
 800498a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498e:	4770      	bx	lr

08004990 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004990:	b480      	push	{r7}
 8004992:	b095      	sub	sp, #84	; 0x54
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	330c      	adds	r3, #12
 800499e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049a2:	e853 3f00 	ldrex	r3, [r3]
 80049a6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80049a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049aa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80049ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	330c      	adds	r3, #12
 80049b6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80049b8:	643a      	str	r2, [r7, #64]	; 0x40
 80049ba:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049bc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80049be:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80049c0:	e841 2300 	strex	r3, r2, [r1]
 80049c4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80049c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d1e5      	bne.n	8004998 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	3314      	adds	r3, #20
 80049d2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049d4:	6a3b      	ldr	r3, [r7, #32]
 80049d6:	e853 3f00 	ldrex	r3, [r3]
 80049da:	61fb      	str	r3, [r7, #28]
   return(result);
 80049dc:	69fb      	ldr	r3, [r7, #28]
 80049de:	f023 0301 	bic.w	r3, r3, #1
 80049e2:	64bb      	str	r3, [r7, #72]	; 0x48
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	3314      	adds	r3, #20
 80049ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80049ec:	62fa      	str	r2, [r7, #44]	; 0x2c
 80049ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80049f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80049f4:	e841 2300 	strex	r3, r2, [r1]
 80049f8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80049fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d1e5      	bne.n	80049cc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a04:	2b01      	cmp	r3, #1
 8004a06:	d119      	bne.n	8004a3c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	330c      	adds	r3, #12
 8004a0e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	e853 3f00 	ldrex	r3, [r3]
 8004a16:	60bb      	str	r3, [r7, #8]
   return(result);
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	f023 0310 	bic.w	r3, r3, #16
 8004a1e:	647b      	str	r3, [r7, #68]	; 0x44
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	330c      	adds	r3, #12
 8004a26:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004a28:	61ba      	str	r2, [r7, #24]
 8004a2a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a2c:	6979      	ldr	r1, [r7, #20]
 8004a2e:	69ba      	ldr	r2, [r7, #24]
 8004a30:	e841 2300 	strex	r3, r2, [r1]
 8004a34:	613b      	str	r3, [r7, #16]
   return(result);
 8004a36:	693b      	ldr	r3, [r7, #16]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d1e5      	bne.n	8004a08 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2220      	movs	r2, #32
 8004a40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2200      	movs	r2, #0
 8004a48:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004a4a:	bf00      	nop
 8004a4c:	3754      	adds	r7, #84	; 0x54
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a54:	4770      	bx	lr

08004a56 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004a56:	b580      	push	{r7, lr}
 8004a58:	b084      	sub	sp, #16
 8004a5a:	af00      	add	r7, sp, #0
 8004a5c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a62:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	2200      	movs	r2, #0
 8004a68:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004a70:	68f8      	ldr	r0, [r7, #12]
 8004a72:	f7ff fecb 	bl	800480c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004a76:	bf00      	nop
 8004a78:	3710      	adds	r7, #16
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bd80      	pop	{r7, pc}

08004a7e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004a7e:	b480      	push	{r7}
 8004a80:	b085      	sub	sp, #20
 8004a82:	af00      	add	r7, sp, #0
 8004a84:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a8c:	b2db      	uxtb	r3, r3
 8004a8e:	2b21      	cmp	r3, #33	; 0x21
 8004a90:	d13e      	bne.n	8004b10 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	689b      	ldr	r3, [r3, #8]
 8004a96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a9a:	d114      	bne.n	8004ac6 <UART_Transmit_IT+0x48>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	691b      	ldr	r3, [r3, #16]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d110      	bne.n	8004ac6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6a1b      	ldr	r3, [r3, #32]
 8004aa8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	881b      	ldrh	r3, [r3, #0]
 8004aae:	461a      	mov	r2, r3
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ab8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6a1b      	ldr	r3, [r3, #32]
 8004abe:	1c9a      	adds	r2, r3, #2
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	621a      	str	r2, [r3, #32]
 8004ac4:	e008      	b.n	8004ad8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6a1b      	ldr	r3, [r3, #32]
 8004aca:	1c59      	adds	r1, r3, #1
 8004acc:	687a      	ldr	r2, [r7, #4]
 8004ace:	6211      	str	r1, [r2, #32]
 8004ad0:	781a      	ldrb	r2, [r3, #0]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004adc:	b29b      	uxth	r3, r3
 8004ade:	3b01      	subs	r3, #1
 8004ae0:	b29b      	uxth	r3, r3
 8004ae2:	687a      	ldr	r2, [r7, #4]
 8004ae4:	4619      	mov	r1, r3
 8004ae6:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d10f      	bne.n	8004b0c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	68da      	ldr	r2, [r3, #12]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004afa:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	68da      	ldr	r2, [r3, #12]
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b0a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	e000      	b.n	8004b12 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004b10:	2302      	movs	r3, #2
  }
}
 8004b12:	4618      	mov	r0, r3
 8004b14:	3714      	adds	r7, #20
 8004b16:	46bd      	mov	sp, r7
 8004b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1c:	4770      	bx	lr

08004b1e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004b1e:	b580      	push	{r7, lr}
 8004b20:	b082      	sub	sp, #8
 8004b22:	af00      	add	r7, sp, #0
 8004b24:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	68da      	ldr	r2, [r3, #12]
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b34:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2220      	movs	r2, #32
 8004b3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	f7fc fce6 	bl	8001510 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004b44:	2300      	movs	r3, #0
}
 8004b46:	4618      	mov	r0, r3
 8004b48:	3708      	adds	r7, #8
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bd80      	pop	{r7, pc}

08004b4e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004b4e:	b580      	push	{r7, lr}
 8004b50:	b08c      	sub	sp, #48	; 0x30
 8004b52:	af00      	add	r7, sp, #0
 8004b54:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b5c:	b2db      	uxtb	r3, r3
 8004b5e:	2b22      	cmp	r3, #34	; 0x22
 8004b60:	f040 80ab 	bne.w	8004cba <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	689b      	ldr	r3, [r3, #8]
 8004b68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b6c:	d117      	bne.n	8004b9e <UART_Receive_IT+0x50>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	691b      	ldr	r3, [r3, #16]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d113      	bne.n	8004b9e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004b76:	2300      	movs	r3, #0
 8004b78:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b7e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	b29b      	uxth	r3, r3
 8004b88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b8c:	b29a      	uxth	r2, r3
 8004b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b90:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b96:	1c9a      	adds	r2, r3, #2
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	629a      	str	r2, [r3, #40]	; 0x28
 8004b9c:	e026      	b.n	8004bec <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ba2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	689b      	ldr	r3, [r3, #8]
 8004bac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bb0:	d007      	beq.n	8004bc2 <UART_Receive_IT+0x74>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	689b      	ldr	r3, [r3, #8]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d10a      	bne.n	8004bd0 <UART_Receive_IT+0x82>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	691b      	ldr	r3, [r3, #16]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d106      	bne.n	8004bd0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	b2da      	uxtb	r2, r3
 8004bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bcc:	701a      	strb	r2, [r3, #0]
 8004bce:	e008      	b.n	8004be2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	b2db      	uxtb	r3, r3
 8004bd8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004bdc:	b2da      	uxtb	r2, r3
 8004bde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004be0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004be6:	1c5a      	adds	r2, r3, #1
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004bf0:	b29b      	uxth	r3, r3
 8004bf2:	3b01      	subs	r3, #1
 8004bf4:	b29b      	uxth	r3, r3
 8004bf6:	687a      	ldr	r2, [r7, #4]
 8004bf8:	4619      	mov	r1, r3
 8004bfa:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d15a      	bne.n	8004cb6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	68da      	ldr	r2, [r3, #12]
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f022 0220 	bic.w	r2, r2, #32
 8004c0e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	68da      	ldr	r2, [r3, #12]
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004c1e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	695a      	ldr	r2, [r3, #20]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f022 0201 	bic.w	r2, r2, #1
 8004c2e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2220      	movs	r2, #32
 8004c34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c3c:	2b01      	cmp	r3, #1
 8004c3e:	d135      	bne.n	8004cac <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2200      	movs	r2, #0
 8004c44:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	330c      	adds	r3, #12
 8004c4c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	e853 3f00 	ldrex	r3, [r3]
 8004c54:	613b      	str	r3, [r7, #16]
   return(result);
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	f023 0310 	bic.w	r3, r3, #16
 8004c5c:	627b      	str	r3, [r7, #36]	; 0x24
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	330c      	adds	r3, #12
 8004c64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c66:	623a      	str	r2, [r7, #32]
 8004c68:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c6a:	69f9      	ldr	r1, [r7, #28]
 8004c6c:	6a3a      	ldr	r2, [r7, #32]
 8004c6e:	e841 2300 	strex	r3, r2, [r1]
 8004c72:	61bb      	str	r3, [r7, #24]
   return(result);
 8004c74:	69bb      	ldr	r3, [r7, #24]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d1e5      	bne.n	8004c46 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f003 0310 	and.w	r3, r3, #16
 8004c84:	2b10      	cmp	r3, #16
 8004c86:	d10a      	bne.n	8004c9e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004c88:	2300      	movs	r3, #0
 8004c8a:	60fb      	str	r3, [r7, #12]
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	60fb      	str	r3, [r7, #12]
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	60fb      	str	r3, [r7, #12]
 8004c9c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004ca2:	4619      	mov	r1, r3
 8004ca4:	6878      	ldr	r0, [r7, #4]
 8004ca6:	f7ff fdbb 	bl	8004820 <HAL_UARTEx_RxEventCallback>
 8004caa:	e002      	b.n	8004cb2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004cac:	6878      	ldr	r0, [r7, #4]
 8004cae:	f7fc fc3f 	bl	8001530 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	e002      	b.n	8004cbc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	e000      	b.n	8004cbc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004cba:	2302      	movs	r3, #2
  }
}
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	3730      	adds	r7, #48	; 0x30
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	bd80      	pop	{r7, pc}

08004cc4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004cc4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004cc8:	b0c0      	sub	sp, #256	; 0x100
 8004cca:	af00      	add	r7, sp, #0
 8004ccc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004cd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	691b      	ldr	r3, [r3, #16]
 8004cd8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004cdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ce0:	68d9      	ldr	r1, [r3, #12]
 8004ce2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ce6:	681a      	ldr	r2, [r3, #0]
 8004ce8:	ea40 0301 	orr.w	r3, r0, r1
 8004cec:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004cee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cf2:	689a      	ldr	r2, [r3, #8]
 8004cf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cf8:	691b      	ldr	r3, [r3, #16]
 8004cfa:	431a      	orrs	r2, r3
 8004cfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d00:	695b      	ldr	r3, [r3, #20]
 8004d02:	431a      	orrs	r2, r3
 8004d04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d08:	69db      	ldr	r3, [r3, #28]
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004d10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	68db      	ldr	r3, [r3, #12]
 8004d18:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004d1c:	f021 010c 	bic.w	r1, r1, #12
 8004d20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d24:	681a      	ldr	r2, [r3, #0]
 8004d26:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004d2a:	430b      	orrs	r3, r1
 8004d2c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004d2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	695b      	ldr	r3, [r3, #20]
 8004d36:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004d3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d3e:	6999      	ldr	r1, [r3, #24]
 8004d40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d44:	681a      	ldr	r2, [r3, #0]
 8004d46:	ea40 0301 	orr.w	r3, r0, r1
 8004d4a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004d4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d50:	681a      	ldr	r2, [r3, #0]
 8004d52:	4b8f      	ldr	r3, [pc, #572]	; (8004f90 <UART_SetConfig+0x2cc>)
 8004d54:	429a      	cmp	r2, r3
 8004d56:	d005      	beq.n	8004d64 <UART_SetConfig+0xa0>
 8004d58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d5c:	681a      	ldr	r2, [r3, #0]
 8004d5e:	4b8d      	ldr	r3, [pc, #564]	; (8004f94 <UART_SetConfig+0x2d0>)
 8004d60:	429a      	cmp	r2, r3
 8004d62:	d104      	bne.n	8004d6e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004d64:	f7fe fa22 	bl	80031ac <HAL_RCC_GetPCLK2Freq>
 8004d68:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004d6c:	e003      	b.n	8004d76 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004d6e:	f7fe fa09 	bl	8003184 <HAL_RCC_GetPCLK1Freq>
 8004d72:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d7a:	69db      	ldr	r3, [r3, #28]
 8004d7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d80:	f040 810c 	bne.w	8004f9c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004d84:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d88:	2200      	movs	r2, #0
 8004d8a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004d8e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004d92:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004d96:	4622      	mov	r2, r4
 8004d98:	462b      	mov	r3, r5
 8004d9a:	1891      	adds	r1, r2, r2
 8004d9c:	65b9      	str	r1, [r7, #88]	; 0x58
 8004d9e:	415b      	adcs	r3, r3
 8004da0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004da2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004da6:	4621      	mov	r1, r4
 8004da8:	eb12 0801 	adds.w	r8, r2, r1
 8004dac:	4629      	mov	r1, r5
 8004dae:	eb43 0901 	adc.w	r9, r3, r1
 8004db2:	f04f 0200 	mov.w	r2, #0
 8004db6:	f04f 0300 	mov.w	r3, #0
 8004dba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004dbe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004dc2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004dc6:	4690      	mov	r8, r2
 8004dc8:	4699      	mov	r9, r3
 8004dca:	4623      	mov	r3, r4
 8004dcc:	eb18 0303 	adds.w	r3, r8, r3
 8004dd0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004dd4:	462b      	mov	r3, r5
 8004dd6:	eb49 0303 	adc.w	r3, r9, r3
 8004dda:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004dde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	2200      	movs	r2, #0
 8004de6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004dea:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004dee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004df2:	460b      	mov	r3, r1
 8004df4:	18db      	adds	r3, r3, r3
 8004df6:	653b      	str	r3, [r7, #80]	; 0x50
 8004df8:	4613      	mov	r3, r2
 8004dfa:	eb42 0303 	adc.w	r3, r2, r3
 8004dfe:	657b      	str	r3, [r7, #84]	; 0x54
 8004e00:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004e04:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004e08:	f7fb fa3a 	bl	8000280 <__aeabi_uldivmod>
 8004e0c:	4602      	mov	r2, r0
 8004e0e:	460b      	mov	r3, r1
 8004e10:	4b61      	ldr	r3, [pc, #388]	; (8004f98 <UART_SetConfig+0x2d4>)
 8004e12:	fba3 2302 	umull	r2, r3, r3, r2
 8004e16:	095b      	lsrs	r3, r3, #5
 8004e18:	011c      	lsls	r4, r3, #4
 8004e1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e1e:	2200      	movs	r2, #0
 8004e20:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004e24:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004e28:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004e2c:	4642      	mov	r2, r8
 8004e2e:	464b      	mov	r3, r9
 8004e30:	1891      	adds	r1, r2, r2
 8004e32:	64b9      	str	r1, [r7, #72]	; 0x48
 8004e34:	415b      	adcs	r3, r3
 8004e36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e38:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004e3c:	4641      	mov	r1, r8
 8004e3e:	eb12 0a01 	adds.w	sl, r2, r1
 8004e42:	4649      	mov	r1, r9
 8004e44:	eb43 0b01 	adc.w	fp, r3, r1
 8004e48:	f04f 0200 	mov.w	r2, #0
 8004e4c:	f04f 0300 	mov.w	r3, #0
 8004e50:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004e54:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004e58:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004e5c:	4692      	mov	sl, r2
 8004e5e:	469b      	mov	fp, r3
 8004e60:	4643      	mov	r3, r8
 8004e62:	eb1a 0303 	adds.w	r3, sl, r3
 8004e66:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004e6a:	464b      	mov	r3, r9
 8004e6c:	eb4b 0303 	adc.w	r3, fp, r3
 8004e70:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004e74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004e80:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004e84:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004e88:	460b      	mov	r3, r1
 8004e8a:	18db      	adds	r3, r3, r3
 8004e8c:	643b      	str	r3, [r7, #64]	; 0x40
 8004e8e:	4613      	mov	r3, r2
 8004e90:	eb42 0303 	adc.w	r3, r2, r3
 8004e94:	647b      	str	r3, [r7, #68]	; 0x44
 8004e96:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004e9a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004e9e:	f7fb f9ef 	bl	8000280 <__aeabi_uldivmod>
 8004ea2:	4602      	mov	r2, r0
 8004ea4:	460b      	mov	r3, r1
 8004ea6:	4611      	mov	r1, r2
 8004ea8:	4b3b      	ldr	r3, [pc, #236]	; (8004f98 <UART_SetConfig+0x2d4>)
 8004eaa:	fba3 2301 	umull	r2, r3, r3, r1
 8004eae:	095b      	lsrs	r3, r3, #5
 8004eb0:	2264      	movs	r2, #100	; 0x64
 8004eb2:	fb02 f303 	mul.w	r3, r2, r3
 8004eb6:	1acb      	subs	r3, r1, r3
 8004eb8:	00db      	lsls	r3, r3, #3
 8004eba:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004ebe:	4b36      	ldr	r3, [pc, #216]	; (8004f98 <UART_SetConfig+0x2d4>)
 8004ec0:	fba3 2302 	umull	r2, r3, r3, r2
 8004ec4:	095b      	lsrs	r3, r3, #5
 8004ec6:	005b      	lsls	r3, r3, #1
 8004ec8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004ecc:	441c      	add	r4, r3
 8004ece:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004ed8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004edc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004ee0:	4642      	mov	r2, r8
 8004ee2:	464b      	mov	r3, r9
 8004ee4:	1891      	adds	r1, r2, r2
 8004ee6:	63b9      	str	r1, [r7, #56]	; 0x38
 8004ee8:	415b      	adcs	r3, r3
 8004eea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004eec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004ef0:	4641      	mov	r1, r8
 8004ef2:	1851      	adds	r1, r2, r1
 8004ef4:	6339      	str	r1, [r7, #48]	; 0x30
 8004ef6:	4649      	mov	r1, r9
 8004ef8:	414b      	adcs	r3, r1
 8004efa:	637b      	str	r3, [r7, #52]	; 0x34
 8004efc:	f04f 0200 	mov.w	r2, #0
 8004f00:	f04f 0300 	mov.w	r3, #0
 8004f04:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004f08:	4659      	mov	r1, fp
 8004f0a:	00cb      	lsls	r3, r1, #3
 8004f0c:	4651      	mov	r1, sl
 8004f0e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f12:	4651      	mov	r1, sl
 8004f14:	00ca      	lsls	r2, r1, #3
 8004f16:	4610      	mov	r0, r2
 8004f18:	4619      	mov	r1, r3
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	4642      	mov	r2, r8
 8004f1e:	189b      	adds	r3, r3, r2
 8004f20:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004f24:	464b      	mov	r3, r9
 8004f26:	460a      	mov	r2, r1
 8004f28:	eb42 0303 	adc.w	r3, r2, r3
 8004f2c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004f30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f34:	685b      	ldr	r3, [r3, #4]
 8004f36:	2200      	movs	r2, #0
 8004f38:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004f3c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004f40:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004f44:	460b      	mov	r3, r1
 8004f46:	18db      	adds	r3, r3, r3
 8004f48:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f4a:	4613      	mov	r3, r2
 8004f4c:	eb42 0303 	adc.w	r3, r2, r3
 8004f50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f52:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004f56:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004f5a:	f7fb f991 	bl	8000280 <__aeabi_uldivmod>
 8004f5e:	4602      	mov	r2, r0
 8004f60:	460b      	mov	r3, r1
 8004f62:	4b0d      	ldr	r3, [pc, #52]	; (8004f98 <UART_SetConfig+0x2d4>)
 8004f64:	fba3 1302 	umull	r1, r3, r3, r2
 8004f68:	095b      	lsrs	r3, r3, #5
 8004f6a:	2164      	movs	r1, #100	; 0x64
 8004f6c:	fb01 f303 	mul.w	r3, r1, r3
 8004f70:	1ad3      	subs	r3, r2, r3
 8004f72:	00db      	lsls	r3, r3, #3
 8004f74:	3332      	adds	r3, #50	; 0x32
 8004f76:	4a08      	ldr	r2, [pc, #32]	; (8004f98 <UART_SetConfig+0x2d4>)
 8004f78:	fba2 2303 	umull	r2, r3, r2, r3
 8004f7c:	095b      	lsrs	r3, r3, #5
 8004f7e:	f003 0207 	and.w	r2, r3, #7
 8004f82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4422      	add	r2, r4
 8004f8a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004f8c:	e105      	b.n	800519a <UART_SetConfig+0x4d6>
 8004f8e:	bf00      	nop
 8004f90:	40011000 	.word	0x40011000
 8004f94:	40011400 	.word	0x40011400
 8004f98:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004f9c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004fa6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004faa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004fae:	4642      	mov	r2, r8
 8004fb0:	464b      	mov	r3, r9
 8004fb2:	1891      	adds	r1, r2, r2
 8004fb4:	6239      	str	r1, [r7, #32]
 8004fb6:	415b      	adcs	r3, r3
 8004fb8:	627b      	str	r3, [r7, #36]	; 0x24
 8004fba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004fbe:	4641      	mov	r1, r8
 8004fc0:	1854      	adds	r4, r2, r1
 8004fc2:	4649      	mov	r1, r9
 8004fc4:	eb43 0501 	adc.w	r5, r3, r1
 8004fc8:	f04f 0200 	mov.w	r2, #0
 8004fcc:	f04f 0300 	mov.w	r3, #0
 8004fd0:	00eb      	lsls	r3, r5, #3
 8004fd2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004fd6:	00e2      	lsls	r2, r4, #3
 8004fd8:	4614      	mov	r4, r2
 8004fda:	461d      	mov	r5, r3
 8004fdc:	4643      	mov	r3, r8
 8004fde:	18e3      	adds	r3, r4, r3
 8004fe0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004fe4:	464b      	mov	r3, r9
 8004fe6:	eb45 0303 	adc.w	r3, r5, r3
 8004fea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004fee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004ffa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004ffe:	f04f 0200 	mov.w	r2, #0
 8005002:	f04f 0300 	mov.w	r3, #0
 8005006:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800500a:	4629      	mov	r1, r5
 800500c:	008b      	lsls	r3, r1, #2
 800500e:	4621      	mov	r1, r4
 8005010:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005014:	4621      	mov	r1, r4
 8005016:	008a      	lsls	r2, r1, #2
 8005018:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800501c:	f7fb f930 	bl	8000280 <__aeabi_uldivmod>
 8005020:	4602      	mov	r2, r0
 8005022:	460b      	mov	r3, r1
 8005024:	4b60      	ldr	r3, [pc, #384]	; (80051a8 <UART_SetConfig+0x4e4>)
 8005026:	fba3 2302 	umull	r2, r3, r3, r2
 800502a:	095b      	lsrs	r3, r3, #5
 800502c:	011c      	lsls	r4, r3, #4
 800502e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005032:	2200      	movs	r2, #0
 8005034:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005038:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800503c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005040:	4642      	mov	r2, r8
 8005042:	464b      	mov	r3, r9
 8005044:	1891      	adds	r1, r2, r2
 8005046:	61b9      	str	r1, [r7, #24]
 8005048:	415b      	adcs	r3, r3
 800504a:	61fb      	str	r3, [r7, #28]
 800504c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005050:	4641      	mov	r1, r8
 8005052:	1851      	adds	r1, r2, r1
 8005054:	6139      	str	r1, [r7, #16]
 8005056:	4649      	mov	r1, r9
 8005058:	414b      	adcs	r3, r1
 800505a:	617b      	str	r3, [r7, #20]
 800505c:	f04f 0200 	mov.w	r2, #0
 8005060:	f04f 0300 	mov.w	r3, #0
 8005064:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005068:	4659      	mov	r1, fp
 800506a:	00cb      	lsls	r3, r1, #3
 800506c:	4651      	mov	r1, sl
 800506e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005072:	4651      	mov	r1, sl
 8005074:	00ca      	lsls	r2, r1, #3
 8005076:	4610      	mov	r0, r2
 8005078:	4619      	mov	r1, r3
 800507a:	4603      	mov	r3, r0
 800507c:	4642      	mov	r2, r8
 800507e:	189b      	adds	r3, r3, r2
 8005080:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005084:	464b      	mov	r3, r9
 8005086:	460a      	mov	r2, r1
 8005088:	eb42 0303 	adc.w	r3, r2, r3
 800508c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005090:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005094:	685b      	ldr	r3, [r3, #4]
 8005096:	2200      	movs	r2, #0
 8005098:	67bb      	str	r3, [r7, #120]	; 0x78
 800509a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800509c:	f04f 0200 	mov.w	r2, #0
 80050a0:	f04f 0300 	mov.w	r3, #0
 80050a4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80050a8:	4649      	mov	r1, r9
 80050aa:	008b      	lsls	r3, r1, #2
 80050ac:	4641      	mov	r1, r8
 80050ae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80050b2:	4641      	mov	r1, r8
 80050b4:	008a      	lsls	r2, r1, #2
 80050b6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80050ba:	f7fb f8e1 	bl	8000280 <__aeabi_uldivmod>
 80050be:	4602      	mov	r2, r0
 80050c0:	460b      	mov	r3, r1
 80050c2:	4b39      	ldr	r3, [pc, #228]	; (80051a8 <UART_SetConfig+0x4e4>)
 80050c4:	fba3 1302 	umull	r1, r3, r3, r2
 80050c8:	095b      	lsrs	r3, r3, #5
 80050ca:	2164      	movs	r1, #100	; 0x64
 80050cc:	fb01 f303 	mul.w	r3, r1, r3
 80050d0:	1ad3      	subs	r3, r2, r3
 80050d2:	011b      	lsls	r3, r3, #4
 80050d4:	3332      	adds	r3, #50	; 0x32
 80050d6:	4a34      	ldr	r2, [pc, #208]	; (80051a8 <UART_SetConfig+0x4e4>)
 80050d8:	fba2 2303 	umull	r2, r3, r2, r3
 80050dc:	095b      	lsrs	r3, r3, #5
 80050de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80050e2:	441c      	add	r4, r3
 80050e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80050e8:	2200      	movs	r2, #0
 80050ea:	673b      	str	r3, [r7, #112]	; 0x70
 80050ec:	677a      	str	r2, [r7, #116]	; 0x74
 80050ee:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80050f2:	4642      	mov	r2, r8
 80050f4:	464b      	mov	r3, r9
 80050f6:	1891      	adds	r1, r2, r2
 80050f8:	60b9      	str	r1, [r7, #8]
 80050fa:	415b      	adcs	r3, r3
 80050fc:	60fb      	str	r3, [r7, #12]
 80050fe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005102:	4641      	mov	r1, r8
 8005104:	1851      	adds	r1, r2, r1
 8005106:	6039      	str	r1, [r7, #0]
 8005108:	4649      	mov	r1, r9
 800510a:	414b      	adcs	r3, r1
 800510c:	607b      	str	r3, [r7, #4]
 800510e:	f04f 0200 	mov.w	r2, #0
 8005112:	f04f 0300 	mov.w	r3, #0
 8005116:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800511a:	4659      	mov	r1, fp
 800511c:	00cb      	lsls	r3, r1, #3
 800511e:	4651      	mov	r1, sl
 8005120:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005124:	4651      	mov	r1, sl
 8005126:	00ca      	lsls	r2, r1, #3
 8005128:	4610      	mov	r0, r2
 800512a:	4619      	mov	r1, r3
 800512c:	4603      	mov	r3, r0
 800512e:	4642      	mov	r2, r8
 8005130:	189b      	adds	r3, r3, r2
 8005132:	66bb      	str	r3, [r7, #104]	; 0x68
 8005134:	464b      	mov	r3, r9
 8005136:	460a      	mov	r2, r1
 8005138:	eb42 0303 	adc.w	r3, r2, r3
 800513c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800513e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	2200      	movs	r2, #0
 8005146:	663b      	str	r3, [r7, #96]	; 0x60
 8005148:	667a      	str	r2, [r7, #100]	; 0x64
 800514a:	f04f 0200 	mov.w	r2, #0
 800514e:	f04f 0300 	mov.w	r3, #0
 8005152:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005156:	4649      	mov	r1, r9
 8005158:	008b      	lsls	r3, r1, #2
 800515a:	4641      	mov	r1, r8
 800515c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005160:	4641      	mov	r1, r8
 8005162:	008a      	lsls	r2, r1, #2
 8005164:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005168:	f7fb f88a 	bl	8000280 <__aeabi_uldivmod>
 800516c:	4602      	mov	r2, r0
 800516e:	460b      	mov	r3, r1
 8005170:	4b0d      	ldr	r3, [pc, #52]	; (80051a8 <UART_SetConfig+0x4e4>)
 8005172:	fba3 1302 	umull	r1, r3, r3, r2
 8005176:	095b      	lsrs	r3, r3, #5
 8005178:	2164      	movs	r1, #100	; 0x64
 800517a:	fb01 f303 	mul.w	r3, r1, r3
 800517e:	1ad3      	subs	r3, r2, r3
 8005180:	011b      	lsls	r3, r3, #4
 8005182:	3332      	adds	r3, #50	; 0x32
 8005184:	4a08      	ldr	r2, [pc, #32]	; (80051a8 <UART_SetConfig+0x4e4>)
 8005186:	fba2 2303 	umull	r2, r3, r2, r3
 800518a:	095b      	lsrs	r3, r3, #5
 800518c:	f003 020f 	and.w	r2, r3, #15
 8005190:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4422      	add	r2, r4
 8005198:	609a      	str	r2, [r3, #8]
}
 800519a:	bf00      	nop
 800519c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80051a0:	46bd      	mov	sp, r7
 80051a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80051a6:	bf00      	nop
 80051a8:	51eb851f 	.word	0x51eb851f

080051ac <atoi>:
 80051ac:	220a      	movs	r2, #10
 80051ae:	2100      	movs	r1, #0
 80051b0:	f000 ba4c 	b.w	800564c <strtol>

080051b4 <__errno>:
 80051b4:	4b01      	ldr	r3, [pc, #4]	; (80051bc <__errno+0x8>)
 80051b6:	6818      	ldr	r0, [r3, #0]
 80051b8:	4770      	bx	lr
 80051ba:	bf00      	nop
 80051bc:	20000010 	.word	0x20000010

080051c0 <__libc_init_array>:
 80051c0:	b570      	push	{r4, r5, r6, lr}
 80051c2:	4d0d      	ldr	r5, [pc, #52]	; (80051f8 <__libc_init_array+0x38>)
 80051c4:	4c0d      	ldr	r4, [pc, #52]	; (80051fc <__libc_init_array+0x3c>)
 80051c6:	1b64      	subs	r4, r4, r5
 80051c8:	10a4      	asrs	r4, r4, #2
 80051ca:	2600      	movs	r6, #0
 80051cc:	42a6      	cmp	r6, r4
 80051ce:	d109      	bne.n	80051e4 <__libc_init_array+0x24>
 80051d0:	4d0b      	ldr	r5, [pc, #44]	; (8005200 <__libc_init_array+0x40>)
 80051d2:	4c0c      	ldr	r4, [pc, #48]	; (8005204 <__libc_init_array+0x44>)
 80051d4:	f001 fbb8 	bl	8006948 <_init>
 80051d8:	1b64      	subs	r4, r4, r5
 80051da:	10a4      	asrs	r4, r4, #2
 80051dc:	2600      	movs	r6, #0
 80051de:	42a6      	cmp	r6, r4
 80051e0:	d105      	bne.n	80051ee <__libc_init_array+0x2e>
 80051e2:	bd70      	pop	{r4, r5, r6, pc}
 80051e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80051e8:	4798      	blx	r3
 80051ea:	3601      	adds	r6, #1
 80051ec:	e7ee      	b.n	80051cc <__libc_init_array+0xc>
 80051ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80051f2:	4798      	blx	r3
 80051f4:	3601      	adds	r6, #1
 80051f6:	e7f2      	b.n	80051de <__libc_init_array+0x1e>
 80051f8:	08006db4 	.word	0x08006db4
 80051fc:	08006db4 	.word	0x08006db4
 8005200:	08006db4 	.word	0x08006db4
 8005204:	08006db8 	.word	0x08006db8

08005208 <memcpy>:
 8005208:	440a      	add	r2, r1
 800520a:	4291      	cmp	r1, r2
 800520c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005210:	d100      	bne.n	8005214 <memcpy+0xc>
 8005212:	4770      	bx	lr
 8005214:	b510      	push	{r4, lr}
 8005216:	f811 4b01 	ldrb.w	r4, [r1], #1
 800521a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800521e:	4291      	cmp	r1, r2
 8005220:	d1f9      	bne.n	8005216 <memcpy+0xe>
 8005222:	bd10      	pop	{r4, pc}

08005224 <memset>:
 8005224:	4402      	add	r2, r0
 8005226:	4603      	mov	r3, r0
 8005228:	4293      	cmp	r3, r2
 800522a:	d100      	bne.n	800522e <memset+0xa>
 800522c:	4770      	bx	lr
 800522e:	f803 1b01 	strb.w	r1, [r3], #1
 8005232:	e7f9      	b.n	8005228 <memset+0x4>

08005234 <iprintf>:
 8005234:	b40f      	push	{r0, r1, r2, r3}
 8005236:	4b0a      	ldr	r3, [pc, #40]	; (8005260 <iprintf+0x2c>)
 8005238:	b513      	push	{r0, r1, r4, lr}
 800523a:	681c      	ldr	r4, [r3, #0]
 800523c:	b124      	cbz	r4, 8005248 <iprintf+0x14>
 800523e:	69a3      	ldr	r3, [r4, #24]
 8005240:	b913      	cbnz	r3, 8005248 <iprintf+0x14>
 8005242:	4620      	mov	r0, r4
 8005244:	f000 fbe6 	bl	8005a14 <__sinit>
 8005248:	ab05      	add	r3, sp, #20
 800524a:	9a04      	ldr	r2, [sp, #16]
 800524c:	68a1      	ldr	r1, [r4, #8]
 800524e:	9301      	str	r3, [sp, #4]
 8005250:	4620      	mov	r0, r4
 8005252:	f000 ff53 	bl	80060fc <_vfiprintf_r>
 8005256:	b002      	add	sp, #8
 8005258:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800525c:	b004      	add	sp, #16
 800525e:	4770      	bx	lr
 8005260:	20000010 	.word	0x20000010

08005264 <putchar>:
 8005264:	4b09      	ldr	r3, [pc, #36]	; (800528c <putchar+0x28>)
 8005266:	b513      	push	{r0, r1, r4, lr}
 8005268:	681c      	ldr	r4, [r3, #0]
 800526a:	4601      	mov	r1, r0
 800526c:	b134      	cbz	r4, 800527c <putchar+0x18>
 800526e:	69a3      	ldr	r3, [r4, #24]
 8005270:	b923      	cbnz	r3, 800527c <putchar+0x18>
 8005272:	9001      	str	r0, [sp, #4]
 8005274:	4620      	mov	r0, r4
 8005276:	f000 fbcd 	bl	8005a14 <__sinit>
 800527a:	9901      	ldr	r1, [sp, #4]
 800527c:	68a2      	ldr	r2, [r4, #8]
 800527e:	4620      	mov	r0, r4
 8005280:	b002      	add	sp, #8
 8005282:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005286:	f001 b9fd 	b.w	8006684 <_putc_r>
 800528a:	bf00      	nop
 800528c:	20000010 	.word	0x20000010

08005290 <_puts_r>:
 8005290:	b570      	push	{r4, r5, r6, lr}
 8005292:	460e      	mov	r6, r1
 8005294:	4605      	mov	r5, r0
 8005296:	b118      	cbz	r0, 80052a0 <_puts_r+0x10>
 8005298:	6983      	ldr	r3, [r0, #24]
 800529a:	b90b      	cbnz	r3, 80052a0 <_puts_r+0x10>
 800529c:	f000 fbba 	bl	8005a14 <__sinit>
 80052a0:	69ab      	ldr	r3, [r5, #24]
 80052a2:	68ac      	ldr	r4, [r5, #8]
 80052a4:	b913      	cbnz	r3, 80052ac <_puts_r+0x1c>
 80052a6:	4628      	mov	r0, r5
 80052a8:	f000 fbb4 	bl	8005a14 <__sinit>
 80052ac:	4b2c      	ldr	r3, [pc, #176]	; (8005360 <_puts_r+0xd0>)
 80052ae:	429c      	cmp	r4, r3
 80052b0:	d120      	bne.n	80052f4 <_puts_r+0x64>
 80052b2:	686c      	ldr	r4, [r5, #4]
 80052b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80052b6:	07db      	lsls	r3, r3, #31
 80052b8:	d405      	bmi.n	80052c6 <_puts_r+0x36>
 80052ba:	89a3      	ldrh	r3, [r4, #12]
 80052bc:	0598      	lsls	r0, r3, #22
 80052be:	d402      	bmi.n	80052c6 <_puts_r+0x36>
 80052c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80052c2:	f000 fc45 	bl	8005b50 <__retarget_lock_acquire_recursive>
 80052c6:	89a3      	ldrh	r3, [r4, #12]
 80052c8:	0719      	lsls	r1, r3, #28
 80052ca:	d51d      	bpl.n	8005308 <_puts_r+0x78>
 80052cc:	6923      	ldr	r3, [r4, #16]
 80052ce:	b1db      	cbz	r3, 8005308 <_puts_r+0x78>
 80052d0:	3e01      	subs	r6, #1
 80052d2:	68a3      	ldr	r3, [r4, #8]
 80052d4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80052d8:	3b01      	subs	r3, #1
 80052da:	60a3      	str	r3, [r4, #8]
 80052dc:	bb39      	cbnz	r1, 800532e <_puts_r+0x9e>
 80052de:	2b00      	cmp	r3, #0
 80052e0:	da38      	bge.n	8005354 <_puts_r+0xc4>
 80052e2:	4622      	mov	r2, r4
 80052e4:	210a      	movs	r1, #10
 80052e6:	4628      	mov	r0, r5
 80052e8:	f000 f9ba 	bl	8005660 <__swbuf_r>
 80052ec:	3001      	adds	r0, #1
 80052ee:	d011      	beq.n	8005314 <_puts_r+0x84>
 80052f0:	250a      	movs	r5, #10
 80052f2:	e011      	b.n	8005318 <_puts_r+0x88>
 80052f4:	4b1b      	ldr	r3, [pc, #108]	; (8005364 <_puts_r+0xd4>)
 80052f6:	429c      	cmp	r4, r3
 80052f8:	d101      	bne.n	80052fe <_puts_r+0x6e>
 80052fa:	68ac      	ldr	r4, [r5, #8]
 80052fc:	e7da      	b.n	80052b4 <_puts_r+0x24>
 80052fe:	4b1a      	ldr	r3, [pc, #104]	; (8005368 <_puts_r+0xd8>)
 8005300:	429c      	cmp	r4, r3
 8005302:	bf08      	it	eq
 8005304:	68ec      	ldreq	r4, [r5, #12]
 8005306:	e7d5      	b.n	80052b4 <_puts_r+0x24>
 8005308:	4621      	mov	r1, r4
 800530a:	4628      	mov	r0, r5
 800530c:	f000 f9fa 	bl	8005704 <__swsetup_r>
 8005310:	2800      	cmp	r0, #0
 8005312:	d0dd      	beq.n	80052d0 <_puts_r+0x40>
 8005314:	f04f 35ff 	mov.w	r5, #4294967295
 8005318:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800531a:	07da      	lsls	r2, r3, #31
 800531c:	d405      	bmi.n	800532a <_puts_r+0x9a>
 800531e:	89a3      	ldrh	r3, [r4, #12]
 8005320:	059b      	lsls	r3, r3, #22
 8005322:	d402      	bmi.n	800532a <_puts_r+0x9a>
 8005324:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005326:	f000 fc14 	bl	8005b52 <__retarget_lock_release_recursive>
 800532a:	4628      	mov	r0, r5
 800532c:	bd70      	pop	{r4, r5, r6, pc}
 800532e:	2b00      	cmp	r3, #0
 8005330:	da04      	bge.n	800533c <_puts_r+0xac>
 8005332:	69a2      	ldr	r2, [r4, #24]
 8005334:	429a      	cmp	r2, r3
 8005336:	dc06      	bgt.n	8005346 <_puts_r+0xb6>
 8005338:	290a      	cmp	r1, #10
 800533a:	d004      	beq.n	8005346 <_puts_r+0xb6>
 800533c:	6823      	ldr	r3, [r4, #0]
 800533e:	1c5a      	adds	r2, r3, #1
 8005340:	6022      	str	r2, [r4, #0]
 8005342:	7019      	strb	r1, [r3, #0]
 8005344:	e7c5      	b.n	80052d2 <_puts_r+0x42>
 8005346:	4622      	mov	r2, r4
 8005348:	4628      	mov	r0, r5
 800534a:	f000 f989 	bl	8005660 <__swbuf_r>
 800534e:	3001      	adds	r0, #1
 8005350:	d1bf      	bne.n	80052d2 <_puts_r+0x42>
 8005352:	e7df      	b.n	8005314 <_puts_r+0x84>
 8005354:	6823      	ldr	r3, [r4, #0]
 8005356:	250a      	movs	r5, #10
 8005358:	1c5a      	adds	r2, r3, #1
 800535a:	6022      	str	r2, [r4, #0]
 800535c:	701d      	strb	r5, [r3, #0]
 800535e:	e7db      	b.n	8005318 <_puts_r+0x88>
 8005360:	08006d38 	.word	0x08006d38
 8005364:	08006d58 	.word	0x08006d58
 8005368:	08006d18 	.word	0x08006d18

0800536c <puts>:
 800536c:	4b02      	ldr	r3, [pc, #8]	; (8005378 <puts+0xc>)
 800536e:	4601      	mov	r1, r0
 8005370:	6818      	ldr	r0, [r3, #0]
 8005372:	f7ff bf8d 	b.w	8005290 <_puts_r>
 8005376:	bf00      	nop
 8005378:	20000010 	.word	0x20000010

0800537c <setvbuf>:
 800537c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005380:	461d      	mov	r5, r3
 8005382:	4b5d      	ldr	r3, [pc, #372]	; (80054f8 <setvbuf+0x17c>)
 8005384:	681f      	ldr	r7, [r3, #0]
 8005386:	4604      	mov	r4, r0
 8005388:	460e      	mov	r6, r1
 800538a:	4690      	mov	r8, r2
 800538c:	b127      	cbz	r7, 8005398 <setvbuf+0x1c>
 800538e:	69bb      	ldr	r3, [r7, #24]
 8005390:	b913      	cbnz	r3, 8005398 <setvbuf+0x1c>
 8005392:	4638      	mov	r0, r7
 8005394:	f000 fb3e 	bl	8005a14 <__sinit>
 8005398:	4b58      	ldr	r3, [pc, #352]	; (80054fc <setvbuf+0x180>)
 800539a:	429c      	cmp	r4, r3
 800539c:	d167      	bne.n	800546e <setvbuf+0xf2>
 800539e:	687c      	ldr	r4, [r7, #4]
 80053a0:	f1b8 0f02 	cmp.w	r8, #2
 80053a4:	d006      	beq.n	80053b4 <setvbuf+0x38>
 80053a6:	f1b8 0f01 	cmp.w	r8, #1
 80053aa:	f200 809f 	bhi.w	80054ec <setvbuf+0x170>
 80053ae:	2d00      	cmp	r5, #0
 80053b0:	f2c0 809c 	blt.w	80054ec <setvbuf+0x170>
 80053b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80053b6:	07db      	lsls	r3, r3, #31
 80053b8:	d405      	bmi.n	80053c6 <setvbuf+0x4a>
 80053ba:	89a3      	ldrh	r3, [r4, #12]
 80053bc:	0598      	lsls	r0, r3, #22
 80053be:	d402      	bmi.n	80053c6 <setvbuf+0x4a>
 80053c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80053c2:	f000 fbc5 	bl	8005b50 <__retarget_lock_acquire_recursive>
 80053c6:	4621      	mov	r1, r4
 80053c8:	4638      	mov	r0, r7
 80053ca:	f000 fa8f 	bl	80058ec <_fflush_r>
 80053ce:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80053d0:	b141      	cbz	r1, 80053e4 <setvbuf+0x68>
 80053d2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80053d6:	4299      	cmp	r1, r3
 80053d8:	d002      	beq.n	80053e0 <setvbuf+0x64>
 80053da:	4638      	mov	r0, r7
 80053dc:	f000 fc28 	bl	8005c30 <_free_r>
 80053e0:	2300      	movs	r3, #0
 80053e2:	6363      	str	r3, [r4, #52]	; 0x34
 80053e4:	2300      	movs	r3, #0
 80053e6:	61a3      	str	r3, [r4, #24]
 80053e8:	6063      	str	r3, [r4, #4]
 80053ea:	89a3      	ldrh	r3, [r4, #12]
 80053ec:	0619      	lsls	r1, r3, #24
 80053ee:	d503      	bpl.n	80053f8 <setvbuf+0x7c>
 80053f0:	6921      	ldr	r1, [r4, #16]
 80053f2:	4638      	mov	r0, r7
 80053f4:	f000 fc1c 	bl	8005c30 <_free_r>
 80053f8:	89a3      	ldrh	r3, [r4, #12]
 80053fa:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 80053fe:	f023 0303 	bic.w	r3, r3, #3
 8005402:	f1b8 0f02 	cmp.w	r8, #2
 8005406:	81a3      	strh	r3, [r4, #12]
 8005408:	d06c      	beq.n	80054e4 <setvbuf+0x168>
 800540a:	ab01      	add	r3, sp, #4
 800540c:	466a      	mov	r2, sp
 800540e:	4621      	mov	r1, r4
 8005410:	4638      	mov	r0, r7
 8005412:	f000 fb9f 	bl	8005b54 <__swhatbuf_r>
 8005416:	89a3      	ldrh	r3, [r4, #12]
 8005418:	4318      	orrs	r0, r3
 800541a:	81a0      	strh	r0, [r4, #12]
 800541c:	2d00      	cmp	r5, #0
 800541e:	d130      	bne.n	8005482 <setvbuf+0x106>
 8005420:	9d00      	ldr	r5, [sp, #0]
 8005422:	4628      	mov	r0, r5
 8005424:	f000 fbfc 	bl	8005c20 <malloc>
 8005428:	4606      	mov	r6, r0
 800542a:	2800      	cmp	r0, #0
 800542c:	d155      	bne.n	80054da <setvbuf+0x15e>
 800542e:	f8dd 9000 	ldr.w	r9, [sp]
 8005432:	45a9      	cmp	r9, r5
 8005434:	d14a      	bne.n	80054cc <setvbuf+0x150>
 8005436:	f04f 35ff 	mov.w	r5, #4294967295
 800543a:	2200      	movs	r2, #0
 800543c:	60a2      	str	r2, [r4, #8]
 800543e:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8005442:	6022      	str	r2, [r4, #0]
 8005444:	6122      	str	r2, [r4, #16]
 8005446:	2201      	movs	r2, #1
 8005448:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800544c:	6162      	str	r2, [r4, #20]
 800544e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005450:	f043 0302 	orr.w	r3, r3, #2
 8005454:	07d2      	lsls	r2, r2, #31
 8005456:	81a3      	strh	r3, [r4, #12]
 8005458:	d405      	bmi.n	8005466 <setvbuf+0xea>
 800545a:	f413 7f00 	tst.w	r3, #512	; 0x200
 800545e:	d102      	bne.n	8005466 <setvbuf+0xea>
 8005460:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005462:	f000 fb76 	bl	8005b52 <__retarget_lock_release_recursive>
 8005466:	4628      	mov	r0, r5
 8005468:	b003      	add	sp, #12
 800546a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800546e:	4b24      	ldr	r3, [pc, #144]	; (8005500 <setvbuf+0x184>)
 8005470:	429c      	cmp	r4, r3
 8005472:	d101      	bne.n	8005478 <setvbuf+0xfc>
 8005474:	68bc      	ldr	r4, [r7, #8]
 8005476:	e793      	b.n	80053a0 <setvbuf+0x24>
 8005478:	4b22      	ldr	r3, [pc, #136]	; (8005504 <setvbuf+0x188>)
 800547a:	429c      	cmp	r4, r3
 800547c:	bf08      	it	eq
 800547e:	68fc      	ldreq	r4, [r7, #12]
 8005480:	e78e      	b.n	80053a0 <setvbuf+0x24>
 8005482:	2e00      	cmp	r6, #0
 8005484:	d0cd      	beq.n	8005422 <setvbuf+0xa6>
 8005486:	69bb      	ldr	r3, [r7, #24]
 8005488:	b913      	cbnz	r3, 8005490 <setvbuf+0x114>
 800548a:	4638      	mov	r0, r7
 800548c:	f000 fac2 	bl	8005a14 <__sinit>
 8005490:	f1b8 0f01 	cmp.w	r8, #1
 8005494:	bf08      	it	eq
 8005496:	89a3      	ldrheq	r3, [r4, #12]
 8005498:	6026      	str	r6, [r4, #0]
 800549a:	bf04      	itt	eq
 800549c:	f043 0301 	orreq.w	r3, r3, #1
 80054a0:	81a3      	strheq	r3, [r4, #12]
 80054a2:	89a2      	ldrh	r2, [r4, #12]
 80054a4:	f012 0308 	ands.w	r3, r2, #8
 80054a8:	e9c4 6504 	strd	r6, r5, [r4, #16]
 80054ac:	d01c      	beq.n	80054e8 <setvbuf+0x16c>
 80054ae:	07d3      	lsls	r3, r2, #31
 80054b0:	bf41      	itttt	mi
 80054b2:	2300      	movmi	r3, #0
 80054b4:	426d      	negmi	r5, r5
 80054b6:	60a3      	strmi	r3, [r4, #8]
 80054b8:	61a5      	strmi	r5, [r4, #24]
 80054ba:	bf58      	it	pl
 80054bc:	60a5      	strpl	r5, [r4, #8]
 80054be:	6e65      	ldr	r5, [r4, #100]	; 0x64
 80054c0:	f015 0501 	ands.w	r5, r5, #1
 80054c4:	d115      	bne.n	80054f2 <setvbuf+0x176>
 80054c6:	f412 7f00 	tst.w	r2, #512	; 0x200
 80054ca:	e7c8      	b.n	800545e <setvbuf+0xe2>
 80054cc:	4648      	mov	r0, r9
 80054ce:	f000 fba7 	bl	8005c20 <malloc>
 80054d2:	4606      	mov	r6, r0
 80054d4:	2800      	cmp	r0, #0
 80054d6:	d0ae      	beq.n	8005436 <setvbuf+0xba>
 80054d8:	464d      	mov	r5, r9
 80054da:	89a3      	ldrh	r3, [r4, #12]
 80054dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054e0:	81a3      	strh	r3, [r4, #12]
 80054e2:	e7d0      	b.n	8005486 <setvbuf+0x10a>
 80054e4:	2500      	movs	r5, #0
 80054e6:	e7a8      	b.n	800543a <setvbuf+0xbe>
 80054e8:	60a3      	str	r3, [r4, #8]
 80054ea:	e7e8      	b.n	80054be <setvbuf+0x142>
 80054ec:	f04f 35ff 	mov.w	r5, #4294967295
 80054f0:	e7b9      	b.n	8005466 <setvbuf+0xea>
 80054f2:	2500      	movs	r5, #0
 80054f4:	e7b7      	b.n	8005466 <setvbuf+0xea>
 80054f6:	bf00      	nop
 80054f8:	20000010 	.word	0x20000010
 80054fc:	08006d38 	.word	0x08006d38
 8005500:	08006d58 	.word	0x08006d58
 8005504:	08006d18 	.word	0x08006d18

08005508 <siprintf>:
 8005508:	b40e      	push	{r1, r2, r3}
 800550a:	b500      	push	{lr}
 800550c:	b09c      	sub	sp, #112	; 0x70
 800550e:	ab1d      	add	r3, sp, #116	; 0x74
 8005510:	9002      	str	r0, [sp, #8]
 8005512:	9006      	str	r0, [sp, #24]
 8005514:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005518:	4809      	ldr	r0, [pc, #36]	; (8005540 <siprintf+0x38>)
 800551a:	9107      	str	r1, [sp, #28]
 800551c:	9104      	str	r1, [sp, #16]
 800551e:	4909      	ldr	r1, [pc, #36]	; (8005544 <siprintf+0x3c>)
 8005520:	f853 2b04 	ldr.w	r2, [r3], #4
 8005524:	9105      	str	r1, [sp, #20]
 8005526:	6800      	ldr	r0, [r0, #0]
 8005528:	9301      	str	r3, [sp, #4]
 800552a:	a902      	add	r1, sp, #8
 800552c:	f000 fcbc 	bl	8005ea8 <_svfiprintf_r>
 8005530:	9b02      	ldr	r3, [sp, #8]
 8005532:	2200      	movs	r2, #0
 8005534:	701a      	strb	r2, [r3, #0]
 8005536:	b01c      	add	sp, #112	; 0x70
 8005538:	f85d eb04 	ldr.w	lr, [sp], #4
 800553c:	b003      	add	sp, #12
 800553e:	4770      	bx	lr
 8005540:	20000010 	.word	0x20000010
 8005544:	ffff0208 	.word	0xffff0208

08005548 <_strtol_l.constprop.0>:
 8005548:	2b01      	cmp	r3, #1
 800554a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800554e:	d001      	beq.n	8005554 <_strtol_l.constprop.0+0xc>
 8005550:	2b24      	cmp	r3, #36	; 0x24
 8005552:	d906      	bls.n	8005562 <_strtol_l.constprop.0+0x1a>
 8005554:	f7ff fe2e 	bl	80051b4 <__errno>
 8005558:	2316      	movs	r3, #22
 800555a:	6003      	str	r3, [r0, #0]
 800555c:	2000      	movs	r0, #0
 800555e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005562:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8005648 <_strtol_l.constprop.0+0x100>
 8005566:	460d      	mov	r5, r1
 8005568:	462e      	mov	r6, r5
 800556a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800556e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8005572:	f017 0708 	ands.w	r7, r7, #8
 8005576:	d1f7      	bne.n	8005568 <_strtol_l.constprop.0+0x20>
 8005578:	2c2d      	cmp	r4, #45	; 0x2d
 800557a:	d132      	bne.n	80055e2 <_strtol_l.constprop.0+0x9a>
 800557c:	782c      	ldrb	r4, [r5, #0]
 800557e:	2701      	movs	r7, #1
 8005580:	1cb5      	adds	r5, r6, #2
 8005582:	2b00      	cmp	r3, #0
 8005584:	d05b      	beq.n	800563e <_strtol_l.constprop.0+0xf6>
 8005586:	2b10      	cmp	r3, #16
 8005588:	d109      	bne.n	800559e <_strtol_l.constprop.0+0x56>
 800558a:	2c30      	cmp	r4, #48	; 0x30
 800558c:	d107      	bne.n	800559e <_strtol_l.constprop.0+0x56>
 800558e:	782c      	ldrb	r4, [r5, #0]
 8005590:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8005594:	2c58      	cmp	r4, #88	; 0x58
 8005596:	d14d      	bne.n	8005634 <_strtol_l.constprop.0+0xec>
 8005598:	786c      	ldrb	r4, [r5, #1]
 800559a:	2310      	movs	r3, #16
 800559c:	3502      	adds	r5, #2
 800559e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80055a2:	f108 38ff 	add.w	r8, r8, #4294967295
 80055a6:	f04f 0c00 	mov.w	ip, #0
 80055aa:	fbb8 f9f3 	udiv	r9, r8, r3
 80055ae:	4666      	mov	r6, ip
 80055b0:	fb03 8a19 	mls	sl, r3, r9, r8
 80055b4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80055b8:	f1be 0f09 	cmp.w	lr, #9
 80055bc:	d816      	bhi.n	80055ec <_strtol_l.constprop.0+0xa4>
 80055be:	4674      	mov	r4, lr
 80055c0:	42a3      	cmp	r3, r4
 80055c2:	dd24      	ble.n	800560e <_strtol_l.constprop.0+0xc6>
 80055c4:	f1bc 0f00 	cmp.w	ip, #0
 80055c8:	db1e      	blt.n	8005608 <_strtol_l.constprop.0+0xc0>
 80055ca:	45b1      	cmp	r9, r6
 80055cc:	d31c      	bcc.n	8005608 <_strtol_l.constprop.0+0xc0>
 80055ce:	d101      	bne.n	80055d4 <_strtol_l.constprop.0+0x8c>
 80055d0:	45a2      	cmp	sl, r4
 80055d2:	db19      	blt.n	8005608 <_strtol_l.constprop.0+0xc0>
 80055d4:	fb06 4603 	mla	r6, r6, r3, r4
 80055d8:	f04f 0c01 	mov.w	ip, #1
 80055dc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80055e0:	e7e8      	b.n	80055b4 <_strtol_l.constprop.0+0x6c>
 80055e2:	2c2b      	cmp	r4, #43	; 0x2b
 80055e4:	bf04      	itt	eq
 80055e6:	782c      	ldrbeq	r4, [r5, #0]
 80055e8:	1cb5      	addeq	r5, r6, #2
 80055ea:	e7ca      	b.n	8005582 <_strtol_l.constprop.0+0x3a>
 80055ec:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80055f0:	f1be 0f19 	cmp.w	lr, #25
 80055f4:	d801      	bhi.n	80055fa <_strtol_l.constprop.0+0xb2>
 80055f6:	3c37      	subs	r4, #55	; 0x37
 80055f8:	e7e2      	b.n	80055c0 <_strtol_l.constprop.0+0x78>
 80055fa:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80055fe:	f1be 0f19 	cmp.w	lr, #25
 8005602:	d804      	bhi.n	800560e <_strtol_l.constprop.0+0xc6>
 8005604:	3c57      	subs	r4, #87	; 0x57
 8005606:	e7db      	b.n	80055c0 <_strtol_l.constprop.0+0x78>
 8005608:	f04f 3cff 	mov.w	ip, #4294967295
 800560c:	e7e6      	b.n	80055dc <_strtol_l.constprop.0+0x94>
 800560e:	f1bc 0f00 	cmp.w	ip, #0
 8005612:	da05      	bge.n	8005620 <_strtol_l.constprop.0+0xd8>
 8005614:	2322      	movs	r3, #34	; 0x22
 8005616:	6003      	str	r3, [r0, #0]
 8005618:	4646      	mov	r6, r8
 800561a:	b942      	cbnz	r2, 800562e <_strtol_l.constprop.0+0xe6>
 800561c:	4630      	mov	r0, r6
 800561e:	e79e      	b.n	800555e <_strtol_l.constprop.0+0x16>
 8005620:	b107      	cbz	r7, 8005624 <_strtol_l.constprop.0+0xdc>
 8005622:	4276      	negs	r6, r6
 8005624:	2a00      	cmp	r2, #0
 8005626:	d0f9      	beq.n	800561c <_strtol_l.constprop.0+0xd4>
 8005628:	f1bc 0f00 	cmp.w	ip, #0
 800562c:	d000      	beq.n	8005630 <_strtol_l.constprop.0+0xe8>
 800562e:	1e69      	subs	r1, r5, #1
 8005630:	6011      	str	r1, [r2, #0]
 8005632:	e7f3      	b.n	800561c <_strtol_l.constprop.0+0xd4>
 8005634:	2430      	movs	r4, #48	; 0x30
 8005636:	2b00      	cmp	r3, #0
 8005638:	d1b1      	bne.n	800559e <_strtol_l.constprop.0+0x56>
 800563a:	2308      	movs	r3, #8
 800563c:	e7af      	b.n	800559e <_strtol_l.constprop.0+0x56>
 800563e:	2c30      	cmp	r4, #48	; 0x30
 8005640:	d0a5      	beq.n	800558e <_strtol_l.constprop.0+0x46>
 8005642:	230a      	movs	r3, #10
 8005644:	e7ab      	b.n	800559e <_strtol_l.constprop.0+0x56>
 8005646:	bf00      	nop
 8005648:	08006c15 	.word	0x08006c15

0800564c <strtol>:
 800564c:	4613      	mov	r3, r2
 800564e:	460a      	mov	r2, r1
 8005650:	4601      	mov	r1, r0
 8005652:	4802      	ldr	r0, [pc, #8]	; (800565c <strtol+0x10>)
 8005654:	6800      	ldr	r0, [r0, #0]
 8005656:	f7ff bf77 	b.w	8005548 <_strtol_l.constprop.0>
 800565a:	bf00      	nop
 800565c:	20000010 	.word	0x20000010

08005660 <__swbuf_r>:
 8005660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005662:	460e      	mov	r6, r1
 8005664:	4614      	mov	r4, r2
 8005666:	4605      	mov	r5, r0
 8005668:	b118      	cbz	r0, 8005672 <__swbuf_r+0x12>
 800566a:	6983      	ldr	r3, [r0, #24]
 800566c:	b90b      	cbnz	r3, 8005672 <__swbuf_r+0x12>
 800566e:	f000 f9d1 	bl	8005a14 <__sinit>
 8005672:	4b21      	ldr	r3, [pc, #132]	; (80056f8 <__swbuf_r+0x98>)
 8005674:	429c      	cmp	r4, r3
 8005676:	d12b      	bne.n	80056d0 <__swbuf_r+0x70>
 8005678:	686c      	ldr	r4, [r5, #4]
 800567a:	69a3      	ldr	r3, [r4, #24]
 800567c:	60a3      	str	r3, [r4, #8]
 800567e:	89a3      	ldrh	r3, [r4, #12]
 8005680:	071a      	lsls	r2, r3, #28
 8005682:	d52f      	bpl.n	80056e4 <__swbuf_r+0x84>
 8005684:	6923      	ldr	r3, [r4, #16]
 8005686:	b36b      	cbz	r3, 80056e4 <__swbuf_r+0x84>
 8005688:	6923      	ldr	r3, [r4, #16]
 800568a:	6820      	ldr	r0, [r4, #0]
 800568c:	1ac0      	subs	r0, r0, r3
 800568e:	6963      	ldr	r3, [r4, #20]
 8005690:	b2f6      	uxtb	r6, r6
 8005692:	4283      	cmp	r3, r0
 8005694:	4637      	mov	r7, r6
 8005696:	dc04      	bgt.n	80056a2 <__swbuf_r+0x42>
 8005698:	4621      	mov	r1, r4
 800569a:	4628      	mov	r0, r5
 800569c:	f000 f926 	bl	80058ec <_fflush_r>
 80056a0:	bb30      	cbnz	r0, 80056f0 <__swbuf_r+0x90>
 80056a2:	68a3      	ldr	r3, [r4, #8]
 80056a4:	3b01      	subs	r3, #1
 80056a6:	60a3      	str	r3, [r4, #8]
 80056a8:	6823      	ldr	r3, [r4, #0]
 80056aa:	1c5a      	adds	r2, r3, #1
 80056ac:	6022      	str	r2, [r4, #0]
 80056ae:	701e      	strb	r6, [r3, #0]
 80056b0:	6963      	ldr	r3, [r4, #20]
 80056b2:	3001      	adds	r0, #1
 80056b4:	4283      	cmp	r3, r0
 80056b6:	d004      	beq.n	80056c2 <__swbuf_r+0x62>
 80056b8:	89a3      	ldrh	r3, [r4, #12]
 80056ba:	07db      	lsls	r3, r3, #31
 80056bc:	d506      	bpl.n	80056cc <__swbuf_r+0x6c>
 80056be:	2e0a      	cmp	r6, #10
 80056c0:	d104      	bne.n	80056cc <__swbuf_r+0x6c>
 80056c2:	4621      	mov	r1, r4
 80056c4:	4628      	mov	r0, r5
 80056c6:	f000 f911 	bl	80058ec <_fflush_r>
 80056ca:	b988      	cbnz	r0, 80056f0 <__swbuf_r+0x90>
 80056cc:	4638      	mov	r0, r7
 80056ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80056d0:	4b0a      	ldr	r3, [pc, #40]	; (80056fc <__swbuf_r+0x9c>)
 80056d2:	429c      	cmp	r4, r3
 80056d4:	d101      	bne.n	80056da <__swbuf_r+0x7a>
 80056d6:	68ac      	ldr	r4, [r5, #8]
 80056d8:	e7cf      	b.n	800567a <__swbuf_r+0x1a>
 80056da:	4b09      	ldr	r3, [pc, #36]	; (8005700 <__swbuf_r+0xa0>)
 80056dc:	429c      	cmp	r4, r3
 80056de:	bf08      	it	eq
 80056e0:	68ec      	ldreq	r4, [r5, #12]
 80056e2:	e7ca      	b.n	800567a <__swbuf_r+0x1a>
 80056e4:	4621      	mov	r1, r4
 80056e6:	4628      	mov	r0, r5
 80056e8:	f000 f80c 	bl	8005704 <__swsetup_r>
 80056ec:	2800      	cmp	r0, #0
 80056ee:	d0cb      	beq.n	8005688 <__swbuf_r+0x28>
 80056f0:	f04f 37ff 	mov.w	r7, #4294967295
 80056f4:	e7ea      	b.n	80056cc <__swbuf_r+0x6c>
 80056f6:	bf00      	nop
 80056f8:	08006d38 	.word	0x08006d38
 80056fc:	08006d58 	.word	0x08006d58
 8005700:	08006d18 	.word	0x08006d18

08005704 <__swsetup_r>:
 8005704:	4b32      	ldr	r3, [pc, #200]	; (80057d0 <__swsetup_r+0xcc>)
 8005706:	b570      	push	{r4, r5, r6, lr}
 8005708:	681d      	ldr	r5, [r3, #0]
 800570a:	4606      	mov	r6, r0
 800570c:	460c      	mov	r4, r1
 800570e:	b125      	cbz	r5, 800571a <__swsetup_r+0x16>
 8005710:	69ab      	ldr	r3, [r5, #24]
 8005712:	b913      	cbnz	r3, 800571a <__swsetup_r+0x16>
 8005714:	4628      	mov	r0, r5
 8005716:	f000 f97d 	bl	8005a14 <__sinit>
 800571a:	4b2e      	ldr	r3, [pc, #184]	; (80057d4 <__swsetup_r+0xd0>)
 800571c:	429c      	cmp	r4, r3
 800571e:	d10f      	bne.n	8005740 <__swsetup_r+0x3c>
 8005720:	686c      	ldr	r4, [r5, #4]
 8005722:	89a3      	ldrh	r3, [r4, #12]
 8005724:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005728:	0719      	lsls	r1, r3, #28
 800572a:	d42c      	bmi.n	8005786 <__swsetup_r+0x82>
 800572c:	06dd      	lsls	r5, r3, #27
 800572e:	d411      	bmi.n	8005754 <__swsetup_r+0x50>
 8005730:	2309      	movs	r3, #9
 8005732:	6033      	str	r3, [r6, #0]
 8005734:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005738:	81a3      	strh	r3, [r4, #12]
 800573a:	f04f 30ff 	mov.w	r0, #4294967295
 800573e:	e03e      	b.n	80057be <__swsetup_r+0xba>
 8005740:	4b25      	ldr	r3, [pc, #148]	; (80057d8 <__swsetup_r+0xd4>)
 8005742:	429c      	cmp	r4, r3
 8005744:	d101      	bne.n	800574a <__swsetup_r+0x46>
 8005746:	68ac      	ldr	r4, [r5, #8]
 8005748:	e7eb      	b.n	8005722 <__swsetup_r+0x1e>
 800574a:	4b24      	ldr	r3, [pc, #144]	; (80057dc <__swsetup_r+0xd8>)
 800574c:	429c      	cmp	r4, r3
 800574e:	bf08      	it	eq
 8005750:	68ec      	ldreq	r4, [r5, #12]
 8005752:	e7e6      	b.n	8005722 <__swsetup_r+0x1e>
 8005754:	0758      	lsls	r0, r3, #29
 8005756:	d512      	bpl.n	800577e <__swsetup_r+0x7a>
 8005758:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800575a:	b141      	cbz	r1, 800576e <__swsetup_r+0x6a>
 800575c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005760:	4299      	cmp	r1, r3
 8005762:	d002      	beq.n	800576a <__swsetup_r+0x66>
 8005764:	4630      	mov	r0, r6
 8005766:	f000 fa63 	bl	8005c30 <_free_r>
 800576a:	2300      	movs	r3, #0
 800576c:	6363      	str	r3, [r4, #52]	; 0x34
 800576e:	89a3      	ldrh	r3, [r4, #12]
 8005770:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005774:	81a3      	strh	r3, [r4, #12]
 8005776:	2300      	movs	r3, #0
 8005778:	6063      	str	r3, [r4, #4]
 800577a:	6923      	ldr	r3, [r4, #16]
 800577c:	6023      	str	r3, [r4, #0]
 800577e:	89a3      	ldrh	r3, [r4, #12]
 8005780:	f043 0308 	orr.w	r3, r3, #8
 8005784:	81a3      	strh	r3, [r4, #12]
 8005786:	6923      	ldr	r3, [r4, #16]
 8005788:	b94b      	cbnz	r3, 800579e <__swsetup_r+0x9a>
 800578a:	89a3      	ldrh	r3, [r4, #12]
 800578c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005790:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005794:	d003      	beq.n	800579e <__swsetup_r+0x9a>
 8005796:	4621      	mov	r1, r4
 8005798:	4630      	mov	r0, r6
 800579a:	f000 fa01 	bl	8005ba0 <__smakebuf_r>
 800579e:	89a0      	ldrh	r0, [r4, #12]
 80057a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80057a4:	f010 0301 	ands.w	r3, r0, #1
 80057a8:	d00a      	beq.n	80057c0 <__swsetup_r+0xbc>
 80057aa:	2300      	movs	r3, #0
 80057ac:	60a3      	str	r3, [r4, #8]
 80057ae:	6963      	ldr	r3, [r4, #20]
 80057b0:	425b      	negs	r3, r3
 80057b2:	61a3      	str	r3, [r4, #24]
 80057b4:	6923      	ldr	r3, [r4, #16]
 80057b6:	b943      	cbnz	r3, 80057ca <__swsetup_r+0xc6>
 80057b8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80057bc:	d1ba      	bne.n	8005734 <__swsetup_r+0x30>
 80057be:	bd70      	pop	{r4, r5, r6, pc}
 80057c0:	0781      	lsls	r1, r0, #30
 80057c2:	bf58      	it	pl
 80057c4:	6963      	ldrpl	r3, [r4, #20]
 80057c6:	60a3      	str	r3, [r4, #8]
 80057c8:	e7f4      	b.n	80057b4 <__swsetup_r+0xb0>
 80057ca:	2000      	movs	r0, #0
 80057cc:	e7f7      	b.n	80057be <__swsetup_r+0xba>
 80057ce:	bf00      	nop
 80057d0:	20000010 	.word	0x20000010
 80057d4:	08006d38 	.word	0x08006d38
 80057d8:	08006d58 	.word	0x08006d58
 80057dc:	08006d18 	.word	0x08006d18

080057e0 <__sflush_r>:
 80057e0:	898a      	ldrh	r2, [r1, #12]
 80057e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057e6:	4605      	mov	r5, r0
 80057e8:	0710      	lsls	r0, r2, #28
 80057ea:	460c      	mov	r4, r1
 80057ec:	d458      	bmi.n	80058a0 <__sflush_r+0xc0>
 80057ee:	684b      	ldr	r3, [r1, #4]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	dc05      	bgt.n	8005800 <__sflush_r+0x20>
 80057f4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	dc02      	bgt.n	8005800 <__sflush_r+0x20>
 80057fa:	2000      	movs	r0, #0
 80057fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005800:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005802:	2e00      	cmp	r6, #0
 8005804:	d0f9      	beq.n	80057fa <__sflush_r+0x1a>
 8005806:	2300      	movs	r3, #0
 8005808:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800580c:	682f      	ldr	r7, [r5, #0]
 800580e:	602b      	str	r3, [r5, #0]
 8005810:	d032      	beq.n	8005878 <__sflush_r+0x98>
 8005812:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005814:	89a3      	ldrh	r3, [r4, #12]
 8005816:	075a      	lsls	r2, r3, #29
 8005818:	d505      	bpl.n	8005826 <__sflush_r+0x46>
 800581a:	6863      	ldr	r3, [r4, #4]
 800581c:	1ac0      	subs	r0, r0, r3
 800581e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005820:	b10b      	cbz	r3, 8005826 <__sflush_r+0x46>
 8005822:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005824:	1ac0      	subs	r0, r0, r3
 8005826:	2300      	movs	r3, #0
 8005828:	4602      	mov	r2, r0
 800582a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800582c:	6a21      	ldr	r1, [r4, #32]
 800582e:	4628      	mov	r0, r5
 8005830:	47b0      	blx	r6
 8005832:	1c43      	adds	r3, r0, #1
 8005834:	89a3      	ldrh	r3, [r4, #12]
 8005836:	d106      	bne.n	8005846 <__sflush_r+0x66>
 8005838:	6829      	ldr	r1, [r5, #0]
 800583a:	291d      	cmp	r1, #29
 800583c:	d82c      	bhi.n	8005898 <__sflush_r+0xb8>
 800583e:	4a2a      	ldr	r2, [pc, #168]	; (80058e8 <__sflush_r+0x108>)
 8005840:	40ca      	lsrs	r2, r1
 8005842:	07d6      	lsls	r6, r2, #31
 8005844:	d528      	bpl.n	8005898 <__sflush_r+0xb8>
 8005846:	2200      	movs	r2, #0
 8005848:	6062      	str	r2, [r4, #4]
 800584a:	04d9      	lsls	r1, r3, #19
 800584c:	6922      	ldr	r2, [r4, #16]
 800584e:	6022      	str	r2, [r4, #0]
 8005850:	d504      	bpl.n	800585c <__sflush_r+0x7c>
 8005852:	1c42      	adds	r2, r0, #1
 8005854:	d101      	bne.n	800585a <__sflush_r+0x7a>
 8005856:	682b      	ldr	r3, [r5, #0]
 8005858:	b903      	cbnz	r3, 800585c <__sflush_r+0x7c>
 800585a:	6560      	str	r0, [r4, #84]	; 0x54
 800585c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800585e:	602f      	str	r7, [r5, #0]
 8005860:	2900      	cmp	r1, #0
 8005862:	d0ca      	beq.n	80057fa <__sflush_r+0x1a>
 8005864:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005868:	4299      	cmp	r1, r3
 800586a:	d002      	beq.n	8005872 <__sflush_r+0x92>
 800586c:	4628      	mov	r0, r5
 800586e:	f000 f9df 	bl	8005c30 <_free_r>
 8005872:	2000      	movs	r0, #0
 8005874:	6360      	str	r0, [r4, #52]	; 0x34
 8005876:	e7c1      	b.n	80057fc <__sflush_r+0x1c>
 8005878:	6a21      	ldr	r1, [r4, #32]
 800587a:	2301      	movs	r3, #1
 800587c:	4628      	mov	r0, r5
 800587e:	47b0      	blx	r6
 8005880:	1c41      	adds	r1, r0, #1
 8005882:	d1c7      	bne.n	8005814 <__sflush_r+0x34>
 8005884:	682b      	ldr	r3, [r5, #0]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d0c4      	beq.n	8005814 <__sflush_r+0x34>
 800588a:	2b1d      	cmp	r3, #29
 800588c:	d001      	beq.n	8005892 <__sflush_r+0xb2>
 800588e:	2b16      	cmp	r3, #22
 8005890:	d101      	bne.n	8005896 <__sflush_r+0xb6>
 8005892:	602f      	str	r7, [r5, #0]
 8005894:	e7b1      	b.n	80057fa <__sflush_r+0x1a>
 8005896:	89a3      	ldrh	r3, [r4, #12]
 8005898:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800589c:	81a3      	strh	r3, [r4, #12]
 800589e:	e7ad      	b.n	80057fc <__sflush_r+0x1c>
 80058a0:	690f      	ldr	r7, [r1, #16]
 80058a2:	2f00      	cmp	r7, #0
 80058a4:	d0a9      	beq.n	80057fa <__sflush_r+0x1a>
 80058a6:	0793      	lsls	r3, r2, #30
 80058a8:	680e      	ldr	r6, [r1, #0]
 80058aa:	bf08      	it	eq
 80058ac:	694b      	ldreq	r3, [r1, #20]
 80058ae:	600f      	str	r7, [r1, #0]
 80058b0:	bf18      	it	ne
 80058b2:	2300      	movne	r3, #0
 80058b4:	eba6 0807 	sub.w	r8, r6, r7
 80058b8:	608b      	str	r3, [r1, #8]
 80058ba:	f1b8 0f00 	cmp.w	r8, #0
 80058be:	dd9c      	ble.n	80057fa <__sflush_r+0x1a>
 80058c0:	6a21      	ldr	r1, [r4, #32]
 80058c2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80058c4:	4643      	mov	r3, r8
 80058c6:	463a      	mov	r2, r7
 80058c8:	4628      	mov	r0, r5
 80058ca:	47b0      	blx	r6
 80058cc:	2800      	cmp	r0, #0
 80058ce:	dc06      	bgt.n	80058de <__sflush_r+0xfe>
 80058d0:	89a3      	ldrh	r3, [r4, #12]
 80058d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80058d6:	81a3      	strh	r3, [r4, #12]
 80058d8:	f04f 30ff 	mov.w	r0, #4294967295
 80058dc:	e78e      	b.n	80057fc <__sflush_r+0x1c>
 80058de:	4407      	add	r7, r0
 80058e0:	eba8 0800 	sub.w	r8, r8, r0
 80058e4:	e7e9      	b.n	80058ba <__sflush_r+0xda>
 80058e6:	bf00      	nop
 80058e8:	20400001 	.word	0x20400001

080058ec <_fflush_r>:
 80058ec:	b538      	push	{r3, r4, r5, lr}
 80058ee:	690b      	ldr	r3, [r1, #16]
 80058f0:	4605      	mov	r5, r0
 80058f2:	460c      	mov	r4, r1
 80058f4:	b913      	cbnz	r3, 80058fc <_fflush_r+0x10>
 80058f6:	2500      	movs	r5, #0
 80058f8:	4628      	mov	r0, r5
 80058fa:	bd38      	pop	{r3, r4, r5, pc}
 80058fc:	b118      	cbz	r0, 8005906 <_fflush_r+0x1a>
 80058fe:	6983      	ldr	r3, [r0, #24]
 8005900:	b90b      	cbnz	r3, 8005906 <_fflush_r+0x1a>
 8005902:	f000 f887 	bl	8005a14 <__sinit>
 8005906:	4b14      	ldr	r3, [pc, #80]	; (8005958 <_fflush_r+0x6c>)
 8005908:	429c      	cmp	r4, r3
 800590a:	d11b      	bne.n	8005944 <_fflush_r+0x58>
 800590c:	686c      	ldr	r4, [r5, #4]
 800590e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d0ef      	beq.n	80058f6 <_fflush_r+0xa>
 8005916:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005918:	07d0      	lsls	r0, r2, #31
 800591a:	d404      	bmi.n	8005926 <_fflush_r+0x3a>
 800591c:	0599      	lsls	r1, r3, #22
 800591e:	d402      	bmi.n	8005926 <_fflush_r+0x3a>
 8005920:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005922:	f000 f915 	bl	8005b50 <__retarget_lock_acquire_recursive>
 8005926:	4628      	mov	r0, r5
 8005928:	4621      	mov	r1, r4
 800592a:	f7ff ff59 	bl	80057e0 <__sflush_r>
 800592e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005930:	07da      	lsls	r2, r3, #31
 8005932:	4605      	mov	r5, r0
 8005934:	d4e0      	bmi.n	80058f8 <_fflush_r+0xc>
 8005936:	89a3      	ldrh	r3, [r4, #12]
 8005938:	059b      	lsls	r3, r3, #22
 800593a:	d4dd      	bmi.n	80058f8 <_fflush_r+0xc>
 800593c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800593e:	f000 f908 	bl	8005b52 <__retarget_lock_release_recursive>
 8005942:	e7d9      	b.n	80058f8 <_fflush_r+0xc>
 8005944:	4b05      	ldr	r3, [pc, #20]	; (800595c <_fflush_r+0x70>)
 8005946:	429c      	cmp	r4, r3
 8005948:	d101      	bne.n	800594e <_fflush_r+0x62>
 800594a:	68ac      	ldr	r4, [r5, #8]
 800594c:	e7df      	b.n	800590e <_fflush_r+0x22>
 800594e:	4b04      	ldr	r3, [pc, #16]	; (8005960 <_fflush_r+0x74>)
 8005950:	429c      	cmp	r4, r3
 8005952:	bf08      	it	eq
 8005954:	68ec      	ldreq	r4, [r5, #12]
 8005956:	e7da      	b.n	800590e <_fflush_r+0x22>
 8005958:	08006d38 	.word	0x08006d38
 800595c:	08006d58 	.word	0x08006d58
 8005960:	08006d18 	.word	0x08006d18

08005964 <std>:
 8005964:	2300      	movs	r3, #0
 8005966:	b510      	push	{r4, lr}
 8005968:	4604      	mov	r4, r0
 800596a:	e9c0 3300 	strd	r3, r3, [r0]
 800596e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005972:	6083      	str	r3, [r0, #8]
 8005974:	8181      	strh	r1, [r0, #12]
 8005976:	6643      	str	r3, [r0, #100]	; 0x64
 8005978:	81c2      	strh	r2, [r0, #14]
 800597a:	6183      	str	r3, [r0, #24]
 800597c:	4619      	mov	r1, r3
 800597e:	2208      	movs	r2, #8
 8005980:	305c      	adds	r0, #92	; 0x5c
 8005982:	f7ff fc4f 	bl	8005224 <memset>
 8005986:	4b05      	ldr	r3, [pc, #20]	; (800599c <std+0x38>)
 8005988:	6263      	str	r3, [r4, #36]	; 0x24
 800598a:	4b05      	ldr	r3, [pc, #20]	; (80059a0 <std+0x3c>)
 800598c:	62a3      	str	r3, [r4, #40]	; 0x28
 800598e:	4b05      	ldr	r3, [pc, #20]	; (80059a4 <std+0x40>)
 8005990:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005992:	4b05      	ldr	r3, [pc, #20]	; (80059a8 <std+0x44>)
 8005994:	6224      	str	r4, [r4, #32]
 8005996:	6323      	str	r3, [r4, #48]	; 0x30
 8005998:	bd10      	pop	{r4, pc}
 800599a:	bf00      	nop
 800599c:	08006735 	.word	0x08006735
 80059a0:	08006757 	.word	0x08006757
 80059a4:	0800678f 	.word	0x0800678f
 80059a8:	080067b3 	.word	0x080067b3

080059ac <_cleanup_r>:
 80059ac:	4901      	ldr	r1, [pc, #4]	; (80059b4 <_cleanup_r+0x8>)
 80059ae:	f000 b8af 	b.w	8005b10 <_fwalk_reent>
 80059b2:	bf00      	nop
 80059b4:	080058ed 	.word	0x080058ed

080059b8 <__sfmoreglue>:
 80059b8:	b570      	push	{r4, r5, r6, lr}
 80059ba:	2268      	movs	r2, #104	; 0x68
 80059bc:	1e4d      	subs	r5, r1, #1
 80059be:	4355      	muls	r5, r2
 80059c0:	460e      	mov	r6, r1
 80059c2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80059c6:	f000 f99f 	bl	8005d08 <_malloc_r>
 80059ca:	4604      	mov	r4, r0
 80059cc:	b140      	cbz	r0, 80059e0 <__sfmoreglue+0x28>
 80059ce:	2100      	movs	r1, #0
 80059d0:	e9c0 1600 	strd	r1, r6, [r0]
 80059d4:	300c      	adds	r0, #12
 80059d6:	60a0      	str	r0, [r4, #8]
 80059d8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80059dc:	f7ff fc22 	bl	8005224 <memset>
 80059e0:	4620      	mov	r0, r4
 80059e2:	bd70      	pop	{r4, r5, r6, pc}

080059e4 <__sfp_lock_acquire>:
 80059e4:	4801      	ldr	r0, [pc, #4]	; (80059ec <__sfp_lock_acquire+0x8>)
 80059e6:	f000 b8b3 	b.w	8005b50 <__retarget_lock_acquire_recursive>
 80059ea:	bf00      	nop
 80059ec:	20000265 	.word	0x20000265

080059f0 <__sfp_lock_release>:
 80059f0:	4801      	ldr	r0, [pc, #4]	; (80059f8 <__sfp_lock_release+0x8>)
 80059f2:	f000 b8ae 	b.w	8005b52 <__retarget_lock_release_recursive>
 80059f6:	bf00      	nop
 80059f8:	20000265 	.word	0x20000265

080059fc <__sinit_lock_acquire>:
 80059fc:	4801      	ldr	r0, [pc, #4]	; (8005a04 <__sinit_lock_acquire+0x8>)
 80059fe:	f000 b8a7 	b.w	8005b50 <__retarget_lock_acquire_recursive>
 8005a02:	bf00      	nop
 8005a04:	20000266 	.word	0x20000266

08005a08 <__sinit_lock_release>:
 8005a08:	4801      	ldr	r0, [pc, #4]	; (8005a10 <__sinit_lock_release+0x8>)
 8005a0a:	f000 b8a2 	b.w	8005b52 <__retarget_lock_release_recursive>
 8005a0e:	bf00      	nop
 8005a10:	20000266 	.word	0x20000266

08005a14 <__sinit>:
 8005a14:	b510      	push	{r4, lr}
 8005a16:	4604      	mov	r4, r0
 8005a18:	f7ff fff0 	bl	80059fc <__sinit_lock_acquire>
 8005a1c:	69a3      	ldr	r3, [r4, #24]
 8005a1e:	b11b      	cbz	r3, 8005a28 <__sinit+0x14>
 8005a20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a24:	f7ff bff0 	b.w	8005a08 <__sinit_lock_release>
 8005a28:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005a2c:	6523      	str	r3, [r4, #80]	; 0x50
 8005a2e:	4b13      	ldr	r3, [pc, #76]	; (8005a7c <__sinit+0x68>)
 8005a30:	4a13      	ldr	r2, [pc, #76]	; (8005a80 <__sinit+0x6c>)
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	62a2      	str	r2, [r4, #40]	; 0x28
 8005a36:	42a3      	cmp	r3, r4
 8005a38:	bf04      	itt	eq
 8005a3a:	2301      	moveq	r3, #1
 8005a3c:	61a3      	streq	r3, [r4, #24]
 8005a3e:	4620      	mov	r0, r4
 8005a40:	f000 f820 	bl	8005a84 <__sfp>
 8005a44:	6060      	str	r0, [r4, #4]
 8005a46:	4620      	mov	r0, r4
 8005a48:	f000 f81c 	bl	8005a84 <__sfp>
 8005a4c:	60a0      	str	r0, [r4, #8]
 8005a4e:	4620      	mov	r0, r4
 8005a50:	f000 f818 	bl	8005a84 <__sfp>
 8005a54:	2200      	movs	r2, #0
 8005a56:	60e0      	str	r0, [r4, #12]
 8005a58:	2104      	movs	r1, #4
 8005a5a:	6860      	ldr	r0, [r4, #4]
 8005a5c:	f7ff ff82 	bl	8005964 <std>
 8005a60:	68a0      	ldr	r0, [r4, #8]
 8005a62:	2201      	movs	r2, #1
 8005a64:	2109      	movs	r1, #9
 8005a66:	f7ff ff7d 	bl	8005964 <std>
 8005a6a:	68e0      	ldr	r0, [r4, #12]
 8005a6c:	2202      	movs	r2, #2
 8005a6e:	2112      	movs	r1, #18
 8005a70:	f7ff ff78 	bl	8005964 <std>
 8005a74:	2301      	movs	r3, #1
 8005a76:	61a3      	str	r3, [r4, #24]
 8005a78:	e7d2      	b.n	8005a20 <__sinit+0xc>
 8005a7a:	bf00      	nop
 8005a7c:	08006c10 	.word	0x08006c10
 8005a80:	080059ad 	.word	0x080059ad

08005a84 <__sfp>:
 8005a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a86:	4607      	mov	r7, r0
 8005a88:	f7ff ffac 	bl	80059e4 <__sfp_lock_acquire>
 8005a8c:	4b1e      	ldr	r3, [pc, #120]	; (8005b08 <__sfp+0x84>)
 8005a8e:	681e      	ldr	r6, [r3, #0]
 8005a90:	69b3      	ldr	r3, [r6, #24]
 8005a92:	b913      	cbnz	r3, 8005a9a <__sfp+0x16>
 8005a94:	4630      	mov	r0, r6
 8005a96:	f7ff ffbd 	bl	8005a14 <__sinit>
 8005a9a:	3648      	adds	r6, #72	; 0x48
 8005a9c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005aa0:	3b01      	subs	r3, #1
 8005aa2:	d503      	bpl.n	8005aac <__sfp+0x28>
 8005aa4:	6833      	ldr	r3, [r6, #0]
 8005aa6:	b30b      	cbz	r3, 8005aec <__sfp+0x68>
 8005aa8:	6836      	ldr	r6, [r6, #0]
 8005aaa:	e7f7      	b.n	8005a9c <__sfp+0x18>
 8005aac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005ab0:	b9d5      	cbnz	r5, 8005ae8 <__sfp+0x64>
 8005ab2:	4b16      	ldr	r3, [pc, #88]	; (8005b0c <__sfp+0x88>)
 8005ab4:	60e3      	str	r3, [r4, #12]
 8005ab6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005aba:	6665      	str	r5, [r4, #100]	; 0x64
 8005abc:	f000 f847 	bl	8005b4e <__retarget_lock_init_recursive>
 8005ac0:	f7ff ff96 	bl	80059f0 <__sfp_lock_release>
 8005ac4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005ac8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005acc:	6025      	str	r5, [r4, #0]
 8005ace:	61a5      	str	r5, [r4, #24]
 8005ad0:	2208      	movs	r2, #8
 8005ad2:	4629      	mov	r1, r5
 8005ad4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005ad8:	f7ff fba4 	bl	8005224 <memset>
 8005adc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005ae0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005ae4:	4620      	mov	r0, r4
 8005ae6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ae8:	3468      	adds	r4, #104	; 0x68
 8005aea:	e7d9      	b.n	8005aa0 <__sfp+0x1c>
 8005aec:	2104      	movs	r1, #4
 8005aee:	4638      	mov	r0, r7
 8005af0:	f7ff ff62 	bl	80059b8 <__sfmoreglue>
 8005af4:	4604      	mov	r4, r0
 8005af6:	6030      	str	r0, [r6, #0]
 8005af8:	2800      	cmp	r0, #0
 8005afa:	d1d5      	bne.n	8005aa8 <__sfp+0x24>
 8005afc:	f7ff ff78 	bl	80059f0 <__sfp_lock_release>
 8005b00:	230c      	movs	r3, #12
 8005b02:	603b      	str	r3, [r7, #0]
 8005b04:	e7ee      	b.n	8005ae4 <__sfp+0x60>
 8005b06:	bf00      	nop
 8005b08:	08006c10 	.word	0x08006c10
 8005b0c:	ffff0001 	.word	0xffff0001

08005b10 <_fwalk_reent>:
 8005b10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b14:	4606      	mov	r6, r0
 8005b16:	4688      	mov	r8, r1
 8005b18:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005b1c:	2700      	movs	r7, #0
 8005b1e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005b22:	f1b9 0901 	subs.w	r9, r9, #1
 8005b26:	d505      	bpl.n	8005b34 <_fwalk_reent+0x24>
 8005b28:	6824      	ldr	r4, [r4, #0]
 8005b2a:	2c00      	cmp	r4, #0
 8005b2c:	d1f7      	bne.n	8005b1e <_fwalk_reent+0xe>
 8005b2e:	4638      	mov	r0, r7
 8005b30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b34:	89ab      	ldrh	r3, [r5, #12]
 8005b36:	2b01      	cmp	r3, #1
 8005b38:	d907      	bls.n	8005b4a <_fwalk_reent+0x3a>
 8005b3a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005b3e:	3301      	adds	r3, #1
 8005b40:	d003      	beq.n	8005b4a <_fwalk_reent+0x3a>
 8005b42:	4629      	mov	r1, r5
 8005b44:	4630      	mov	r0, r6
 8005b46:	47c0      	blx	r8
 8005b48:	4307      	orrs	r7, r0
 8005b4a:	3568      	adds	r5, #104	; 0x68
 8005b4c:	e7e9      	b.n	8005b22 <_fwalk_reent+0x12>

08005b4e <__retarget_lock_init_recursive>:
 8005b4e:	4770      	bx	lr

08005b50 <__retarget_lock_acquire_recursive>:
 8005b50:	4770      	bx	lr

08005b52 <__retarget_lock_release_recursive>:
 8005b52:	4770      	bx	lr

08005b54 <__swhatbuf_r>:
 8005b54:	b570      	push	{r4, r5, r6, lr}
 8005b56:	460e      	mov	r6, r1
 8005b58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b5c:	2900      	cmp	r1, #0
 8005b5e:	b096      	sub	sp, #88	; 0x58
 8005b60:	4614      	mov	r4, r2
 8005b62:	461d      	mov	r5, r3
 8005b64:	da08      	bge.n	8005b78 <__swhatbuf_r+0x24>
 8005b66:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	602a      	str	r2, [r5, #0]
 8005b6e:	061a      	lsls	r2, r3, #24
 8005b70:	d410      	bmi.n	8005b94 <__swhatbuf_r+0x40>
 8005b72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005b76:	e00e      	b.n	8005b96 <__swhatbuf_r+0x42>
 8005b78:	466a      	mov	r2, sp
 8005b7a:	f000 fe41 	bl	8006800 <_fstat_r>
 8005b7e:	2800      	cmp	r0, #0
 8005b80:	dbf1      	blt.n	8005b66 <__swhatbuf_r+0x12>
 8005b82:	9a01      	ldr	r2, [sp, #4]
 8005b84:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005b88:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005b8c:	425a      	negs	r2, r3
 8005b8e:	415a      	adcs	r2, r3
 8005b90:	602a      	str	r2, [r5, #0]
 8005b92:	e7ee      	b.n	8005b72 <__swhatbuf_r+0x1e>
 8005b94:	2340      	movs	r3, #64	; 0x40
 8005b96:	2000      	movs	r0, #0
 8005b98:	6023      	str	r3, [r4, #0]
 8005b9a:	b016      	add	sp, #88	; 0x58
 8005b9c:	bd70      	pop	{r4, r5, r6, pc}
	...

08005ba0 <__smakebuf_r>:
 8005ba0:	898b      	ldrh	r3, [r1, #12]
 8005ba2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005ba4:	079d      	lsls	r5, r3, #30
 8005ba6:	4606      	mov	r6, r0
 8005ba8:	460c      	mov	r4, r1
 8005baa:	d507      	bpl.n	8005bbc <__smakebuf_r+0x1c>
 8005bac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005bb0:	6023      	str	r3, [r4, #0]
 8005bb2:	6123      	str	r3, [r4, #16]
 8005bb4:	2301      	movs	r3, #1
 8005bb6:	6163      	str	r3, [r4, #20]
 8005bb8:	b002      	add	sp, #8
 8005bba:	bd70      	pop	{r4, r5, r6, pc}
 8005bbc:	ab01      	add	r3, sp, #4
 8005bbe:	466a      	mov	r2, sp
 8005bc0:	f7ff ffc8 	bl	8005b54 <__swhatbuf_r>
 8005bc4:	9900      	ldr	r1, [sp, #0]
 8005bc6:	4605      	mov	r5, r0
 8005bc8:	4630      	mov	r0, r6
 8005bca:	f000 f89d 	bl	8005d08 <_malloc_r>
 8005bce:	b948      	cbnz	r0, 8005be4 <__smakebuf_r+0x44>
 8005bd0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005bd4:	059a      	lsls	r2, r3, #22
 8005bd6:	d4ef      	bmi.n	8005bb8 <__smakebuf_r+0x18>
 8005bd8:	f023 0303 	bic.w	r3, r3, #3
 8005bdc:	f043 0302 	orr.w	r3, r3, #2
 8005be0:	81a3      	strh	r3, [r4, #12]
 8005be2:	e7e3      	b.n	8005bac <__smakebuf_r+0xc>
 8005be4:	4b0d      	ldr	r3, [pc, #52]	; (8005c1c <__smakebuf_r+0x7c>)
 8005be6:	62b3      	str	r3, [r6, #40]	; 0x28
 8005be8:	89a3      	ldrh	r3, [r4, #12]
 8005bea:	6020      	str	r0, [r4, #0]
 8005bec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bf0:	81a3      	strh	r3, [r4, #12]
 8005bf2:	9b00      	ldr	r3, [sp, #0]
 8005bf4:	6163      	str	r3, [r4, #20]
 8005bf6:	9b01      	ldr	r3, [sp, #4]
 8005bf8:	6120      	str	r0, [r4, #16]
 8005bfa:	b15b      	cbz	r3, 8005c14 <__smakebuf_r+0x74>
 8005bfc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005c00:	4630      	mov	r0, r6
 8005c02:	f000 fe0f 	bl	8006824 <_isatty_r>
 8005c06:	b128      	cbz	r0, 8005c14 <__smakebuf_r+0x74>
 8005c08:	89a3      	ldrh	r3, [r4, #12]
 8005c0a:	f023 0303 	bic.w	r3, r3, #3
 8005c0e:	f043 0301 	orr.w	r3, r3, #1
 8005c12:	81a3      	strh	r3, [r4, #12]
 8005c14:	89a0      	ldrh	r0, [r4, #12]
 8005c16:	4305      	orrs	r5, r0
 8005c18:	81a5      	strh	r5, [r4, #12]
 8005c1a:	e7cd      	b.n	8005bb8 <__smakebuf_r+0x18>
 8005c1c:	080059ad 	.word	0x080059ad

08005c20 <malloc>:
 8005c20:	4b02      	ldr	r3, [pc, #8]	; (8005c2c <malloc+0xc>)
 8005c22:	4601      	mov	r1, r0
 8005c24:	6818      	ldr	r0, [r3, #0]
 8005c26:	f000 b86f 	b.w	8005d08 <_malloc_r>
 8005c2a:	bf00      	nop
 8005c2c:	20000010 	.word	0x20000010

08005c30 <_free_r>:
 8005c30:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005c32:	2900      	cmp	r1, #0
 8005c34:	d044      	beq.n	8005cc0 <_free_r+0x90>
 8005c36:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c3a:	9001      	str	r0, [sp, #4]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	f1a1 0404 	sub.w	r4, r1, #4
 8005c42:	bfb8      	it	lt
 8005c44:	18e4      	addlt	r4, r4, r3
 8005c46:	f000 fe29 	bl	800689c <__malloc_lock>
 8005c4a:	4a1e      	ldr	r2, [pc, #120]	; (8005cc4 <_free_r+0x94>)
 8005c4c:	9801      	ldr	r0, [sp, #4]
 8005c4e:	6813      	ldr	r3, [r2, #0]
 8005c50:	b933      	cbnz	r3, 8005c60 <_free_r+0x30>
 8005c52:	6063      	str	r3, [r4, #4]
 8005c54:	6014      	str	r4, [r2, #0]
 8005c56:	b003      	add	sp, #12
 8005c58:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005c5c:	f000 be24 	b.w	80068a8 <__malloc_unlock>
 8005c60:	42a3      	cmp	r3, r4
 8005c62:	d908      	bls.n	8005c76 <_free_r+0x46>
 8005c64:	6825      	ldr	r5, [r4, #0]
 8005c66:	1961      	adds	r1, r4, r5
 8005c68:	428b      	cmp	r3, r1
 8005c6a:	bf01      	itttt	eq
 8005c6c:	6819      	ldreq	r1, [r3, #0]
 8005c6e:	685b      	ldreq	r3, [r3, #4]
 8005c70:	1949      	addeq	r1, r1, r5
 8005c72:	6021      	streq	r1, [r4, #0]
 8005c74:	e7ed      	b.n	8005c52 <_free_r+0x22>
 8005c76:	461a      	mov	r2, r3
 8005c78:	685b      	ldr	r3, [r3, #4]
 8005c7a:	b10b      	cbz	r3, 8005c80 <_free_r+0x50>
 8005c7c:	42a3      	cmp	r3, r4
 8005c7e:	d9fa      	bls.n	8005c76 <_free_r+0x46>
 8005c80:	6811      	ldr	r1, [r2, #0]
 8005c82:	1855      	adds	r5, r2, r1
 8005c84:	42a5      	cmp	r5, r4
 8005c86:	d10b      	bne.n	8005ca0 <_free_r+0x70>
 8005c88:	6824      	ldr	r4, [r4, #0]
 8005c8a:	4421      	add	r1, r4
 8005c8c:	1854      	adds	r4, r2, r1
 8005c8e:	42a3      	cmp	r3, r4
 8005c90:	6011      	str	r1, [r2, #0]
 8005c92:	d1e0      	bne.n	8005c56 <_free_r+0x26>
 8005c94:	681c      	ldr	r4, [r3, #0]
 8005c96:	685b      	ldr	r3, [r3, #4]
 8005c98:	6053      	str	r3, [r2, #4]
 8005c9a:	4421      	add	r1, r4
 8005c9c:	6011      	str	r1, [r2, #0]
 8005c9e:	e7da      	b.n	8005c56 <_free_r+0x26>
 8005ca0:	d902      	bls.n	8005ca8 <_free_r+0x78>
 8005ca2:	230c      	movs	r3, #12
 8005ca4:	6003      	str	r3, [r0, #0]
 8005ca6:	e7d6      	b.n	8005c56 <_free_r+0x26>
 8005ca8:	6825      	ldr	r5, [r4, #0]
 8005caa:	1961      	adds	r1, r4, r5
 8005cac:	428b      	cmp	r3, r1
 8005cae:	bf04      	itt	eq
 8005cb0:	6819      	ldreq	r1, [r3, #0]
 8005cb2:	685b      	ldreq	r3, [r3, #4]
 8005cb4:	6063      	str	r3, [r4, #4]
 8005cb6:	bf04      	itt	eq
 8005cb8:	1949      	addeq	r1, r1, r5
 8005cba:	6021      	streq	r1, [r4, #0]
 8005cbc:	6054      	str	r4, [r2, #4]
 8005cbe:	e7ca      	b.n	8005c56 <_free_r+0x26>
 8005cc0:	b003      	add	sp, #12
 8005cc2:	bd30      	pop	{r4, r5, pc}
 8005cc4:	20000268 	.word	0x20000268

08005cc8 <sbrk_aligned>:
 8005cc8:	b570      	push	{r4, r5, r6, lr}
 8005cca:	4e0e      	ldr	r6, [pc, #56]	; (8005d04 <sbrk_aligned+0x3c>)
 8005ccc:	460c      	mov	r4, r1
 8005cce:	6831      	ldr	r1, [r6, #0]
 8005cd0:	4605      	mov	r5, r0
 8005cd2:	b911      	cbnz	r1, 8005cda <sbrk_aligned+0x12>
 8005cd4:	f000 fd1e 	bl	8006714 <_sbrk_r>
 8005cd8:	6030      	str	r0, [r6, #0]
 8005cda:	4621      	mov	r1, r4
 8005cdc:	4628      	mov	r0, r5
 8005cde:	f000 fd19 	bl	8006714 <_sbrk_r>
 8005ce2:	1c43      	adds	r3, r0, #1
 8005ce4:	d00a      	beq.n	8005cfc <sbrk_aligned+0x34>
 8005ce6:	1cc4      	adds	r4, r0, #3
 8005ce8:	f024 0403 	bic.w	r4, r4, #3
 8005cec:	42a0      	cmp	r0, r4
 8005cee:	d007      	beq.n	8005d00 <sbrk_aligned+0x38>
 8005cf0:	1a21      	subs	r1, r4, r0
 8005cf2:	4628      	mov	r0, r5
 8005cf4:	f000 fd0e 	bl	8006714 <_sbrk_r>
 8005cf8:	3001      	adds	r0, #1
 8005cfa:	d101      	bne.n	8005d00 <sbrk_aligned+0x38>
 8005cfc:	f04f 34ff 	mov.w	r4, #4294967295
 8005d00:	4620      	mov	r0, r4
 8005d02:	bd70      	pop	{r4, r5, r6, pc}
 8005d04:	2000026c 	.word	0x2000026c

08005d08 <_malloc_r>:
 8005d08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d0c:	1ccd      	adds	r5, r1, #3
 8005d0e:	f025 0503 	bic.w	r5, r5, #3
 8005d12:	3508      	adds	r5, #8
 8005d14:	2d0c      	cmp	r5, #12
 8005d16:	bf38      	it	cc
 8005d18:	250c      	movcc	r5, #12
 8005d1a:	2d00      	cmp	r5, #0
 8005d1c:	4607      	mov	r7, r0
 8005d1e:	db01      	blt.n	8005d24 <_malloc_r+0x1c>
 8005d20:	42a9      	cmp	r1, r5
 8005d22:	d905      	bls.n	8005d30 <_malloc_r+0x28>
 8005d24:	230c      	movs	r3, #12
 8005d26:	603b      	str	r3, [r7, #0]
 8005d28:	2600      	movs	r6, #0
 8005d2a:	4630      	mov	r0, r6
 8005d2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d30:	4e2e      	ldr	r6, [pc, #184]	; (8005dec <_malloc_r+0xe4>)
 8005d32:	f000 fdb3 	bl	800689c <__malloc_lock>
 8005d36:	6833      	ldr	r3, [r6, #0]
 8005d38:	461c      	mov	r4, r3
 8005d3a:	bb34      	cbnz	r4, 8005d8a <_malloc_r+0x82>
 8005d3c:	4629      	mov	r1, r5
 8005d3e:	4638      	mov	r0, r7
 8005d40:	f7ff ffc2 	bl	8005cc8 <sbrk_aligned>
 8005d44:	1c43      	adds	r3, r0, #1
 8005d46:	4604      	mov	r4, r0
 8005d48:	d14d      	bne.n	8005de6 <_malloc_r+0xde>
 8005d4a:	6834      	ldr	r4, [r6, #0]
 8005d4c:	4626      	mov	r6, r4
 8005d4e:	2e00      	cmp	r6, #0
 8005d50:	d140      	bne.n	8005dd4 <_malloc_r+0xcc>
 8005d52:	6823      	ldr	r3, [r4, #0]
 8005d54:	4631      	mov	r1, r6
 8005d56:	4638      	mov	r0, r7
 8005d58:	eb04 0803 	add.w	r8, r4, r3
 8005d5c:	f000 fcda 	bl	8006714 <_sbrk_r>
 8005d60:	4580      	cmp	r8, r0
 8005d62:	d13a      	bne.n	8005dda <_malloc_r+0xd2>
 8005d64:	6821      	ldr	r1, [r4, #0]
 8005d66:	3503      	adds	r5, #3
 8005d68:	1a6d      	subs	r5, r5, r1
 8005d6a:	f025 0503 	bic.w	r5, r5, #3
 8005d6e:	3508      	adds	r5, #8
 8005d70:	2d0c      	cmp	r5, #12
 8005d72:	bf38      	it	cc
 8005d74:	250c      	movcc	r5, #12
 8005d76:	4629      	mov	r1, r5
 8005d78:	4638      	mov	r0, r7
 8005d7a:	f7ff ffa5 	bl	8005cc8 <sbrk_aligned>
 8005d7e:	3001      	adds	r0, #1
 8005d80:	d02b      	beq.n	8005dda <_malloc_r+0xd2>
 8005d82:	6823      	ldr	r3, [r4, #0]
 8005d84:	442b      	add	r3, r5
 8005d86:	6023      	str	r3, [r4, #0]
 8005d88:	e00e      	b.n	8005da8 <_malloc_r+0xa0>
 8005d8a:	6822      	ldr	r2, [r4, #0]
 8005d8c:	1b52      	subs	r2, r2, r5
 8005d8e:	d41e      	bmi.n	8005dce <_malloc_r+0xc6>
 8005d90:	2a0b      	cmp	r2, #11
 8005d92:	d916      	bls.n	8005dc2 <_malloc_r+0xba>
 8005d94:	1961      	adds	r1, r4, r5
 8005d96:	42a3      	cmp	r3, r4
 8005d98:	6025      	str	r5, [r4, #0]
 8005d9a:	bf18      	it	ne
 8005d9c:	6059      	strne	r1, [r3, #4]
 8005d9e:	6863      	ldr	r3, [r4, #4]
 8005da0:	bf08      	it	eq
 8005da2:	6031      	streq	r1, [r6, #0]
 8005da4:	5162      	str	r2, [r4, r5]
 8005da6:	604b      	str	r3, [r1, #4]
 8005da8:	4638      	mov	r0, r7
 8005daa:	f104 060b 	add.w	r6, r4, #11
 8005dae:	f000 fd7b 	bl	80068a8 <__malloc_unlock>
 8005db2:	f026 0607 	bic.w	r6, r6, #7
 8005db6:	1d23      	adds	r3, r4, #4
 8005db8:	1af2      	subs	r2, r6, r3
 8005dba:	d0b6      	beq.n	8005d2a <_malloc_r+0x22>
 8005dbc:	1b9b      	subs	r3, r3, r6
 8005dbe:	50a3      	str	r3, [r4, r2]
 8005dc0:	e7b3      	b.n	8005d2a <_malloc_r+0x22>
 8005dc2:	6862      	ldr	r2, [r4, #4]
 8005dc4:	42a3      	cmp	r3, r4
 8005dc6:	bf0c      	ite	eq
 8005dc8:	6032      	streq	r2, [r6, #0]
 8005dca:	605a      	strne	r2, [r3, #4]
 8005dcc:	e7ec      	b.n	8005da8 <_malloc_r+0xa0>
 8005dce:	4623      	mov	r3, r4
 8005dd0:	6864      	ldr	r4, [r4, #4]
 8005dd2:	e7b2      	b.n	8005d3a <_malloc_r+0x32>
 8005dd4:	4634      	mov	r4, r6
 8005dd6:	6876      	ldr	r6, [r6, #4]
 8005dd8:	e7b9      	b.n	8005d4e <_malloc_r+0x46>
 8005dda:	230c      	movs	r3, #12
 8005ddc:	603b      	str	r3, [r7, #0]
 8005dde:	4638      	mov	r0, r7
 8005de0:	f000 fd62 	bl	80068a8 <__malloc_unlock>
 8005de4:	e7a1      	b.n	8005d2a <_malloc_r+0x22>
 8005de6:	6025      	str	r5, [r4, #0]
 8005de8:	e7de      	b.n	8005da8 <_malloc_r+0xa0>
 8005dea:	bf00      	nop
 8005dec:	20000268 	.word	0x20000268

08005df0 <__ssputs_r>:
 8005df0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005df4:	688e      	ldr	r6, [r1, #8]
 8005df6:	429e      	cmp	r6, r3
 8005df8:	4682      	mov	sl, r0
 8005dfa:	460c      	mov	r4, r1
 8005dfc:	4690      	mov	r8, r2
 8005dfe:	461f      	mov	r7, r3
 8005e00:	d838      	bhi.n	8005e74 <__ssputs_r+0x84>
 8005e02:	898a      	ldrh	r2, [r1, #12]
 8005e04:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005e08:	d032      	beq.n	8005e70 <__ssputs_r+0x80>
 8005e0a:	6825      	ldr	r5, [r4, #0]
 8005e0c:	6909      	ldr	r1, [r1, #16]
 8005e0e:	eba5 0901 	sub.w	r9, r5, r1
 8005e12:	6965      	ldr	r5, [r4, #20]
 8005e14:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005e18:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005e1c:	3301      	adds	r3, #1
 8005e1e:	444b      	add	r3, r9
 8005e20:	106d      	asrs	r5, r5, #1
 8005e22:	429d      	cmp	r5, r3
 8005e24:	bf38      	it	cc
 8005e26:	461d      	movcc	r5, r3
 8005e28:	0553      	lsls	r3, r2, #21
 8005e2a:	d531      	bpl.n	8005e90 <__ssputs_r+0xa0>
 8005e2c:	4629      	mov	r1, r5
 8005e2e:	f7ff ff6b 	bl	8005d08 <_malloc_r>
 8005e32:	4606      	mov	r6, r0
 8005e34:	b950      	cbnz	r0, 8005e4c <__ssputs_r+0x5c>
 8005e36:	230c      	movs	r3, #12
 8005e38:	f8ca 3000 	str.w	r3, [sl]
 8005e3c:	89a3      	ldrh	r3, [r4, #12]
 8005e3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e42:	81a3      	strh	r3, [r4, #12]
 8005e44:	f04f 30ff 	mov.w	r0, #4294967295
 8005e48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e4c:	6921      	ldr	r1, [r4, #16]
 8005e4e:	464a      	mov	r2, r9
 8005e50:	f7ff f9da 	bl	8005208 <memcpy>
 8005e54:	89a3      	ldrh	r3, [r4, #12]
 8005e56:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005e5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e5e:	81a3      	strh	r3, [r4, #12]
 8005e60:	6126      	str	r6, [r4, #16]
 8005e62:	6165      	str	r5, [r4, #20]
 8005e64:	444e      	add	r6, r9
 8005e66:	eba5 0509 	sub.w	r5, r5, r9
 8005e6a:	6026      	str	r6, [r4, #0]
 8005e6c:	60a5      	str	r5, [r4, #8]
 8005e6e:	463e      	mov	r6, r7
 8005e70:	42be      	cmp	r6, r7
 8005e72:	d900      	bls.n	8005e76 <__ssputs_r+0x86>
 8005e74:	463e      	mov	r6, r7
 8005e76:	6820      	ldr	r0, [r4, #0]
 8005e78:	4632      	mov	r2, r6
 8005e7a:	4641      	mov	r1, r8
 8005e7c:	f000 fcf4 	bl	8006868 <memmove>
 8005e80:	68a3      	ldr	r3, [r4, #8]
 8005e82:	1b9b      	subs	r3, r3, r6
 8005e84:	60a3      	str	r3, [r4, #8]
 8005e86:	6823      	ldr	r3, [r4, #0]
 8005e88:	4433      	add	r3, r6
 8005e8a:	6023      	str	r3, [r4, #0]
 8005e8c:	2000      	movs	r0, #0
 8005e8e:	e7db      	b.n	8005e48 <__ssputs_r+0x58>
 8005e90:	462a      	mov	r2, r5
 8005e92:	f000 fd0f 	bl	80068b4 <_realloc_r>
 8005e96:	4606      	mov	r6, r0
 8005e98:	2800      	cmp	r0, #0
 8005e9a:	d1e1      	bne.n	8005e60 <__ssputs_r+0x70>
 8005e9c:	6921      	ldr	r1, [r4, #16]
 8005e9e:	4650      	mov	r0, sl
 8005ea0:	f7ff fec6 	bl	8005c30 <_free_r>
 8005ea4:	e7c7      	b.n	8005e36 <__ssputs_r+0x46>
	...

08005ea8 <_svfiprintf_r>:
 8005ea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005eac:	4698      	mov	r8, r3
 8005eae:	898b      	ldrh	r3, [r1, #12]
 8005eb0:	061b      	lsls	r3, r3, #24
 8005eb2:	b09d      	sub	sp, #116	; 0x74
 8005eb4:	4607      	mov	r7, r0
 8005eb6:	460d      	mov	r5, r1
 8005eb8:	4614      	mov	r4, r2
 8005eba:	d50e      	bpl.n	8005eda <_svfiprintf_r+0x32>
 8005ebc:	690b      	ldr	r3, [r1, #16]
 8005ebe:	b963      	cbnz	r3, 8005eda <_svfiprintf_r+0x32>
 8005ec0:	2140      	movs	r1, #64	; 0x40
 8005ec2:	f7ff ff21 	bl	8005d08 <_malloc_r>
 8005ec6:	6028      	str	r0, [r5, #0]
 8005ec8:	6128      	str	r0, [r5, #16]
 8005eca:	b920      	cbnz	r0, 8005ed6 <_svfiprintf_r+0x2e>
 8005ecc:	230c      	movs	r3, #12
 8005ece:	603b      	str	r3, [r7, #0]
 8005ed0:	f04f 30ff 	mov.w	r0, #4294967295
 8005ed4:	e0d1      	b.n	800607a <_svfiprintf_r+0x1d2>
 8005ed6:	2340      	movs	r3, #64	; 0x40
 8005ed8:	616b      	str	r3, [r5, #20]
 8005eda:	2300      	movs	r3, #0
 8005edc:	9309      	str	r3, [sp, #36]	; 0x24
 8005ede:	2320      	movs	r3, #32
 8005ee0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005ee4:	f8cd 800c 	str.w	r8, [sp, #12]
 8005ee8:	2330      	movs	r3, #48	; 0x30
 8005eea:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006094 <_svfiprintf_r+0x1ec>
 8005eee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005ef2:	f04f 0901 	mov.w	r9, #1
 8005ef6:	4623      	mov	r3, r4
 8005ef8:	469a      	mov	sl, r3
 8005efa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005efe:	b10a      	cbz	r2, 8005f04 <_svfiprintf_r+0x5c>
 8005f00:	2a25      	cmp	r2, #37	; 0x25
 8005f02:	d1f9      	bne.n	8005ef8 <_svfiprintf_r+0x50>
 8005f04:	ebba 0b04 	subs.w	fp, sl, r4
 8005f08:	d00b      	beq.n	8005f22 <_svfiprintf_r+0x7a>
 8005f0a:	465b      	mov	r3, fp
 8005f0c:	4622      	mov	r2, r4
 8005f0e:	4629      	mov	r1, r5
 8005f10:	4638      	mov	r0, r7
 8005f12:	f7ff ff6d 	bl	8005df0 <__ssputs_r>
 8005f16:	3001      	adds	r0, #1
 8005f18:	f000 80aa 	beq.w	8006070 <_svfiprintf_r+0x1c8>
 8005f1c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005f1e:	445a      	add	r2, fp
 8005f20:	9209      	str	r2, [sp, #36]	; 0x24
 8005f22:	f89a 3000 	ldrb.w	r3, [sl]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	f000 80a2 	beq.w	8006070 <_svfiprintf_r+0x1c8>
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	f04f 32ff 	mov.w	r2, #4294967295
 8005f32:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005f36:	f10a 0a01 	add.w	sl, sl, #1
 8005f3a:	9304      	str	r3, [sp, #16]
 8005f3c:	9307      	str	r3, [sp, #28]
 8005f3e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005f42:	931a      	str	r3, [sp, #104]	; 0x68
 8005f44:	4654      	mov	r4, sl
 8005f46:	2205      	movs	r2, #5
 8005f48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f4c:	4851      	ldr	r0, [pc, #324]	; (8006094 <_svfiprintf_r+0x1ec>)
 8005f4e:	f7fa f947 	bl	80001e0 <memchr>
 8005f52:	9a04      	ldr	r2, [sp, #16]
 8005f54:	b9d8      	cbnz	r0, 8005f8e <_svfiprintf_r+0xe6>
 8005f56:	06d0      	lsls	r0, r2, #27
 8005f58:	bf44      	itt	mi
 8005f5a:	2320      	movmi	r3, #32
 8005f5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005f60:	0711      	lsls	r1, r2, #28
 8005f62:	bf44      	itt	mi
 8005f64:	232b      	movmi	r3, #43	; 0x2b
 8005f66:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005f6a:	f89a 3000 	ldrb.w	r3, [sl]
 8005f6e:	2b2a      	cmp	r3, #42	; 0x2a
 8005f70:	d015      	beq.n	8005f9e <_svfiprintf_r+0xf6>
 8005f72:	9a07      	ldr	r2, [sp, #28]
 8005f74:	4654      	mov	r4, sl
 8005f76:	2000      	movs	r0, #0
 8005f78:	f04f 0c0a 	mov.w	ip, #10
 8005f7c:	4621      	mov	r1, r4
 8005f7e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005f82:	3b30      	subs	r3, #48	; 0x30
 8005f84:	2b09      	cmp	r3, #9
 8005f86:	d94e      	bls.n	8006026 <_svfiprintf_r+0x17e>
 8005f88:	b1b0      	cbz	r0, 8005fb8 <_svfiprintf_r+0x110>
 8005f8a:	9207      	str	r2, [sp, #28]
 8005f8c:	e014      	b.n	8005fb8 <_svfiprintf_r+0x110>
 8005f8e:	eba0 0308 	sub.w	r3, r0, r8
 8005f92:	fa09 f303 	lsl.w	r3, r9, r3
 8005f96:	4313      	orrs	r3, r2
 8005f98:	9304      	str	r3, [sp, #16]
 8005f9a:	46a2      	mov	sl, r4
 8005f9c:	e7d2      	b.n	8005f44 <_svfiprintf_r+0x9c>
 8005f9e:	9b03      	ldr	r3, [sp, #12]
 8005fa0:	1d19      	adds	r1, r3, #4
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	9103      	str	r1, [sp, #12]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	bfbb      	ittet	lt
 8005faa:	425b      	neglt	r3, r3
 8005fac:	f042 0202 	orrlt.w	r2, r2, #2
 8005fb0:	9307      	strge	r3, [sp, #28]
 8005fb2:	9307      	strlt	r3, [sp, #28]
 8005fb4:	bfb8      	it	lt
 8005fb6:	9204      	strlt	r2, [sp, #16]
 8005fb8:	7823      	ldrb	r3, [r4, #0]
 8005fba:	2b2e      	cmp	r3, #46	; 0x2e
 8005fbc:	d10c      	bne.n	8005fd8 <_svfiprintf_r+0x130>
 8005fbe:	7863      	ldrb	r3, [r4, #1]
 8005fc0:	2b2a      	cmp	r3, #42	; 0x2a
 8005fc2:	d135      	bne.n	8006030 <_svfiprintf_r+0x188>
 8005fc4:	9b03      	ldr	r3, [sp, #12]
 8005fc6:	1d1a      	adds	r2, r3, #4
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	9203      	str	r2, [sp, #12]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	bfb8      	it	lt
 8005fd0:	f04f 33ff 	movlt.w	r3, #4294967295
 8005fd4:	3402      	adds	r4, #2
 8005fd6:	9305      	str	r3, [sp, #20]
 8005fd8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80060a4 <_svfiprintf_r+0x1fc>
 8005fdc:	7821      	ldrb	r1, [r4, #0]
 8005fde:	2203      	movs	r2, #3
 8005fe0:	4650      	mov	r0, sl
 8005fe2:	f7fa f8fd 	bl	80001e0 <memchr>
 8005fe6:	b140      	cbz	r0, 8005ffa <_svfiprintf_r+0x152>
 8005fe8:	2340      	movs	r3, #64	; 0x40
 8005fea:	eba0 000a 	sub.w	r0, r0, sl
 8005fee:	fa03 f000 	lsl.w	r0, r3, r0
 8005ff2:	9b04      	ldr	r3, [sp, #16]
 8005ff4:	4303      	orrs	r3, r0
 8005ff6:	3401      	adds	r4, #1
 8005ff8:	9304      	str	r3, [sp, #16]
 8005ffa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ffe:	4826      	ldr	r0, [pc, #152]	; (8006098 <_svfiprintf_r+0x1f0>)
 8006000:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006004:	2206      	movs	r2, #6
 8006006:	f7fa f8eb 	bl	80001e0 <memchr>
 800600a:	2800      	cmp	r0, #0
 800600c:	d038      	beq.n	8006080 <_svfiprintf_r+0x1d8>
 800600e:	4b23      	ldr	r3, [pc, #140]	; (800609c <_svfiprintf_r+0x1f4>)
 8006010:	bb1b      	cbnz	r3, 800605a <_svfiprintf_r+0x1b2>
 8006012:	9b03      	ldr	r3, [sp, #12]
 8006014:	3307      	adds	r3, #7
 8006016:	f023 0307 	bic.w	r3, r3, #7
 800601a:	3308      	adds	r3, #8
 800601c:	9303      	str	r3, [sp, #12]
 800601e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006020:	4433      	add	r3, r6
 8006022:	9309      	str	r3, [sp, #36]	; 0x24
 8006024:	e767      	b.n	8005ef6 <_svfiprintf_r+0x4e>
 8006026:	fb0c 3202 	mla	r2, ip, r2, r3
 800602a:	460c      	mov	r4, r1
 800602c:	2001      	movs	r0, #1
 800602e:	e7a5      	b.n	8005f7c <_svfiprintf_r+0xd4>
 8006030:	2300      	movs	r3, #0
 8006032:	3401      	adds	r4, #1
 8006034:	9305      	str	r3, [sp, #20]
 8006036:	4619      	mov	r1, r3
 8006038:	f04f 0c0a 	mov.w	ip, #10
 800603c:	4620      	mov	r0, r4
 800603e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006042:	3a30      	subs	r2, #48	; 0x30
 8006044:	2a09      	cmp	r2, #9
 8006046:	d903      	bls.n	8006050 <_svfiprintf_r+0x1a8>
 8006048:	2b00      	cmp	r3, #0
 800604a:	d0c5      	beq.n	8005fd8 <_svfiprintf_r+0x130>
 800604c:	9105      	str	r1, [sp, #20]
 800604e:	e7c3      	b.n	8005fd8 <_svfiprintf_r+0x130>
 8006050:	fb0c 2101 	mla	r1, ip, r1, r2
 8006054:	4604      	mov	r4, r0
 8006056:	2301      	movs	r3, #1
 8006058:	e7f0      	b.n	800603c <_svfiprintf_r+0x194>
 800605a:	ab03      	add	r3, sp, #12
 800605c:	9300      	str	r3, [sp, #0]
 800605e:	462a      	mov	r2, r5
 8006060:	4b0f      	ldr	r3, [pc, #60]	; (80060a0 <_svfiprintf_r+0x1f8>)
 8006062:	a904      	add	r1, sp, #16
 8006064:	4638      	mov	r0, r7
 8006066:	f3af 8000 	nop.w
 800606a:	1c42      	adds	r2, r0, #1
 800606c:	4606      	mov	r6, r0
 800606e:	d1d6      	bne.n	800601e <_svfiprintf_r+0x176>
 8006070:	89ab      	ldrh	r3, [r5, #12]
 8006072:	065b      	lsls	r3, r3, #25
 8006074:	f53f af2c 	bmi.w	8005ed0 <_svfiprintf_r+0x28>
 8006078:	9809      	ldr	r0, [sp, #36]	; 0x24
 800607a:	b01d      	add	sp, #116	; 0x74
 800607c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006080:	ab03      	add	r3, sp, #12
 8006082:	9300      	str	r3, [sp, #0]
 8006084:	462a      	mov	r2, r5
 8006086:	4b06      	ldr	r3, [pc, #24]	; (80060a0 <_svfiprintf_r+0x1f8>)
 8006088:	a904      	add	r1, sp, #16
 800608a:	4638      	mov	r0, r7
 800608c:	f000 f9d4 	bl	8006438 <_printf_i>
 8006090:	e7eb      	b.n	800606a <_svfiprintf_r+0x1c2>
 8006092:	bf00      	nop
 8006094:	08006d78 	.word	0x08006d78
 8006098:	08006d82 	.word	0x08006d82
 800609c:	00000000 	.word	0x00000000
 80060a0:	08005df1 	.word	0x08005df1
 80060a4:	08006d7e 	.word	0x08006d7e

080060a8 <__sfputc_r>:
 80060a8:	6893      	ldr	r3, [r2, #8]
 80060aa:	3b01      	subs	r3, #1
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	b410      	push	{r4}
 80060b0:	6093      	str	r3, [r2, #8]
 80060b2:	da08      	bge.n	80060c6 <__sfputc_r+0x1e>
 80060b4:	6994      	ldr	r4, [r2, #24]
 80060b6:	42a3      	cmp	r3, r4
 80060b8:	db01      	blt.n	80060be <__sfputc_r+0x16>
 80060ba:	290a      	cmp	r1, #10
 80060bc:	d103      	bne.n	80060c6 <__sfputc_r+0x1e>
 80060be:	f85d 4b04 	ldr.w	r4, [sp], #4
 80060c2:	f7ff bacd 	b.w	8005660 <__swbuf_r>
 80060c6:	6813      	ldr	r3, [r2, #0]
 80060c8:	1c58      	adds	r0, r3, #1
 80060ca:	6010      	str	r0, [r2, #0]
 80060cc:	7019      	strb	r1, [r3, #0]
 80060ce:	4608      	mov	r0, r1
 80060d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80060d4:	4770      	bx	lr

080060d6 <__sfputs_r>:
 80060d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060d8:	4606      	mov	r6, r0
 80060da:	460f      	mov	r7, r1
 80060dc:	4614      	mov	r4, r2
 80060de:	18d5      	adds	r5, r2, r3
 80060e0:	42ac      	cmp	r4, r5
 80060e2:	d101      	bne.n	80060e8 <__sfputs_r+0x12>
 80060e4:	2000      	movs	r0, #0
 80060e6:	e007      	b.n	80060f8 <__sfputs_r+0x22>
 80060e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80060ec:	463a      	mov	r2, r7
 80060ee:	4630      	mov	r0, r6
 80060f0:	f7ff ffda 	bl	80060a8 <__sfputc_r>
 80060f4:	1c43      	adds	r3, r0, #1
 80060f6:	d1f3      	bne.n	80060e0 <__sfputs_r+0xa>
 80060f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080060fc <_vfiprintf_r>:
 80060fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006100:	460d      	mov	r5, r1
 8006102:	b09d      	sub	sp, #116	; 0x74
 8006104:	4614      	mov	r4, r2
 8006106:	4698      	mov	r8, r3
 8006108:	4606      	mov	r6, r0
 800610a:	b118      	cbz	r0, 8006114 <_vfiprintf_r+0x18>
 800610c:	6983      	ldr	r3, [r0, #24]
 800610e:	b90b      	cbnz	r3, 8006114 <_vfiprintf_r+0x18>
 8006110:	f7ff fc80 	bl	8005a14 <__sinit>
 8006114:	4b89      	ldr	r3, [pc, #548]	; (800633c <_vfiprintf_r+0x240>)
 8006116:	429d      	cmp	r5, r3
 8006118:	d11b      	bne.n	8006152 <_vfiprintf_r+0x56>
 800611a:	6875      	ldr	r5, [r6, #4]
 800611c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800611e:	07d9      	lsls	r1, r3, #31
 8006120:	d405      	bmi.n	800612e <_vfiprintf_r+0x32>
 8006122:	89ab      	ldrh	r3, [r5, #12]
 8006124:	059a      	lsls	r2, r3, #22
 8006126:	d402      	bmi.n	800612e <_vfiprintf_r+0x32>
 8006128:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800612a:	f7ff fd11 	bl	8005b50 <__retarget_lock_acquire_recursive>
 800612e:	89ab      	ldrh	r3, [r5, #12]
 8006130:	071b      	lsls	r3, r3, #28
 8006132:	d501      	bpl.n	8006138 <_vfiprintf_r+0x3c>
 8006134:	692b      	ldr	r3, [r5, #16]
 8006136:	b9eb      	cbnz	r3, 8006174 <_vfiprintf_r+0x78>
 8006138:	4629      	mov	r1, r5
 800613a:	4630      	mov	r0, r6
 800613c:	f7ff fae2 	bl	8005704 <__swsetup_r>
 8006140:	b1c0      	cbz	r0, 8006174 <_vfiprintf_r+0x78>
 8006142:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006144:	07dc      	lsls	r4, r3, #31
 8006146:	d50e      	bpl.n	8006166 <_vfiprintf_r+0x6a>
 8006148:	f04f 30ff 	mov.w	r0, #4294967295
 800614c:	b01d      	add	sp, #116	; 0x74
 800614e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006152:	4b7b      	ldr	r3, [pc, #492]	; (8006340 <_vfiprintf_r+0x244>)
 8006154:	429d      	cmp	r5, r3
 8006156:	d101      	bne.n	800615c <_vfiprintf_r+0x60>
 8006158:	68b5      	ldr	r5, [r6, #8]
 800615a:	e7df      	b.n	800611c <_vfiprintf_r+0x20>
 800615c:	4b79      	ldr	r3, [pc, #484]	; (8006344 <_vfiprintf_r+0x248>)
 800615e:	429d      	cmp	r5, r3
 8006160:	bf08      	it	eq
 8006162:	68f5      	ldreq	r5, [r6, #12]
 8006164:	e7da      	b.n	800611c <_vfiprintf_r+0x20>
 8006166:	89ab      	ldrh	r3, [r5, #12]
 8006168:	0598      	lsls	r0, r3, #22
 800616a:	d4ed      	bmi.n	8006148 <_vfiprintf_r+0x4c>
 800616c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800616e:	f7ff fcf0 	bl	8005b52 <__retarget_lock_release_recursive>
 8006172:	e7e9      	b.n	8006148 <_vfiprintf_r+0x4c>
 8006174:	2300      	movs	r3, #0
 8006176:	9309      	str	r3, [sp, #36]	; 0x24
 8006178:	2320      	movs	r3, #32
 800617a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800617e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006182:	2330      	movs	r3, #48	; 0x30
 8006184:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006348 <_vfiprintf_r+0x24c>
 8006188:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800618c:	f04f 0901 	mov.w	r9, #1
 8006190:	4623      	mov	r3, r4
 8006192:	469a      	mov	sl, r3
 8006194:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006198:	b10a      	cbz	r2, 800619e <_vfiprintf_r+0xa2>
 800619a:	2a25      	cmp	r2, #37	; 0x25
 800619c:	d1f9      	bne.n	8006192 <_vfiprintf_r+0x96>
 800619e:	ebba 0b04 	subs.w	fp, sl, r4
 80061a2:	d00b      	beq.n	80061bc <_vfiprintf_r+0xc0>
 80061a4:	465b      	mov	r3, fp
 80061a6:	4622      	mov	r2, r4
 80061a8:	4629      	mov	r1, r5
 80061aa:	4630      	mov	r0, r6
 80061ac:	f7ff ff93 	bl	80060d6 <__sfputs_r>
 80061b0:	3001      	adds	r0, #1
 80061b2:	f000 80aa 	beq.w	800630a <_vfiprintf_r+0x20e>
 80061b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80061b8:	445a      	add	r2, fp
 80061ba:	9209      	str	r2, [sp, #36]	; 0x24
 80061bc:	f89a 3000 	ldrb.w	r3, [sl]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	f000 80a2 	beq.w	800630a <_vfiprintf_r+0x20e>
 80061c6:	2300      	movs	r3, #0
 80061c8:	f04f 32ff 	mov.w	r2, #4294967295
 80061cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80061d0:	f10a 0a01 	add.w	sl, sl, #1
 80061d4:	9304      	str	r3, [sp, #16]
 80061d6:	9307      	str	r3, [sp, #28]
 80061d8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80061dc:	931a      	str	r3, [sp, #104]	; 0x68
 80061de:	4654      	mov	r4, sl
 80061e0:	2205      	movs	r2, #5
 80061e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80061e6:	4858      	ldr	r0, [pc, #352]	; (8006348 <_vfiprintf_r+0x24c>)
 80061e8:	f7f9 fffa 	bl	80001e0 <memchr>
 80061ec:	9a04      	ldr	r2, [sp, #16]
 80061ee:	b9d8      	cbnz	r0, 8006228 <_vfiprintf_r+0x12c>
 80061f0:	06d1      	lsls	r1, r2, #27
 80061f2:	bf44      	itt	mi
 80061f4:	2320      	movmi	r3, #32
 80061f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80061fa:	0713      	lsls	r3, r2, #28
 80061fc:	bf44      	itt	mi
 80061fe:	232b      	movmi	r3, #43	; 0x2b
 8006200:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006204:	f89a 3000 	ldrb.w	r3, [sl]
 8006208:	2b2a      	cmp	r3, #42	; 0x2a
 800620a:	d015      	beq.n	8006238 <_vfiprintf_r+0x13c>
 800620c:	9a07      	ldr	r2, [sp, #28]
 800620e:	4654      	mov	r4, sl
 8006210:	2000      	movs	r0, #0
 8006212:	f04f 0c0a 	mov.w	ip, #10
 8006216:	4621      	mov	r1, r4
 8006218:	f811 3b01 	ldrb.w	r3, [r1], #1
 800621c:	3b30      	subs	r3, #48	; 0x30
 800621e:	2b09      	cmp	r3, #9
 8006220:	d94e      	bls.n	80062c0 <_vfiprintf_r+0x1c4>
 8006222:	b1b0      	cbz	r0, 8006252 <_vfiprintf_r+0x156>
 8006224:	9207      	str	r2, [sp, #28]
 8006226:	e014      	b.n	8006252 <_vfiprintf_r+0x156>
 8006228:	eba0 0308 	sub.w	r3, r0, r8
 800622c:	fa09 f303 	lsl.w	r3, r9, r3
 8006230:	4313      	orrs	r3, r2
 8006232:	9304      	str	r3, [sp, #16]
 8006234:	46a2      	mov	sl, r4
 8006236:	e7d2      	b.n	80061de <_vfiprintf_r+0xe2>
 8006238:	9b03      	ldr	r3, [sp, #12]
 800623a:	1d19      	adds	r1, r3, #4
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	9103      	str	r1, [sp, #12]
 8006240:	2b00      	cmp	r3, #0
 8006242:	bfbb      	ittet	lt
 8006244:	425b      	neglt	r3, r3
 8006246:	f042 0202 	orrlt.w	r2, r2, #2
 800624a:	9307      	strge	r3, [sp, #28]
 800624c:	9307      	strlt	r3, [sp, #28]
 800624e:	bfb8      	it	lt
 8006250:	9204      	strlt	r2, [sp, #16]
 8006252:	7823      	ldrb	r3, [r4, #0]
 8006254:	2b2e      	cmp	r3, #46	; 0x2e
 8006256:	d10c      	bne.n	8006272 <_vfiprintf_r+0x176>
 8006258:	7863      	ldrb	r3, [r4, #1]
 800625a:	2b2a      	cmp	r3, #42	; 0x2a
 800625c:	d135      	bne.n	80062ca <_vfiprintf_r+0x1ce>
 800625e:	9b03      	ldr	r3, [sp, #12]
 8006260:	1d1a      	adds	r2, r3, #4
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	9203      	str	r2, [sp, #12]
 8006266:	2b00      	cmp	r3, #0
 8006268:	bfb8      	it	lt
 800626a:	f04f 33ff 	movlt.w	r3, #4294967295
 800626e:	3402      	adds	r4, #2
 8006270:	9305      	str	r3, [sp, #20]
 8006272:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006358 <_vfiprintf_r+0x25c>
 8006276:	7821      	ldrb	r1, [r4, #0]
 8006278:	2203      	movs	r2, #3
 800627a:	4650      	mov	r0, sl
 800627c:	f7f9 ffb0 	bl	80001e0 <memchr>
 8006280:	b140      	cbz	r0, 8006294 <_vfiprintf_r+0x198>
 8006282:	2340      	movs	r3, #64	; 0x40
 8006284:	eba0 000a 	sub.w	r0, r0, sl
 8006288:	fa03 f000 	lsl.w	r0, r3, r0
 800628c:	9b04      	ldr	r3, [sp, #16]
 800628e:	4303      	orrs	r3, r0
 8006290:	3401      	adds	r4, #1
 8006292:	9304      	str	r3, [sp, #16]
 8006294:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006298:	482c      	ldr	r0, [pc, #176]	; (800634c <_vfiprintf_r+0x250>)
 800629a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800629e:	2206      	movs	r2, #6
 80062a0:	f7f9 ff9e 	bl	80001e0 <memchr>
 80062a4:	2800      	cmp	r0, #0
 80062a6:	d03f      	beq.n	8006328 <_vfiprintf_r+0x22c>
 80062a8:	4b29      	ldr	r3, [pc, #164]	; (8006350 <_vfiprintf_r+0x254>)
 80062aa:	bb1b      	cbnz	r3, 80062f4 <_vfiprintf_r+0x1f8>
 80062ac:	9b03      	ldr	r3, [sp, #12]
 80062ae:	3307      	adds	r3, #7
 80062b0:	f023 0307 	bic.w	r3, r3, #7
 80062b4:	3308      	adds	r3, #8
 80062b6:	9303      	str	r3, [sp, #12]
 80062b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062ba:	443b      	add	r3, r7
 80062bc:	9309      	str	r3, [sp, #36]	; 0x24
 80062be:	e767      	b.n	8006190 <_vfiprintf_r+0x94>
 80062c0:	fb0c 3202 	mla	r2, ip, r2, r3
 80062c4:	460c      	mov	r4, r1
 80062c6:	2001      	movs	r0, #1
 80062c8:	e7a5      	b.n	8006216 <_vfiprintf_r+0x11a>
 80062ca:	2300      	movs	r3, #0
 80062cc:	3401      	adds	r4, #1
 80062ce:	9305      	str	r3, [sp, #20]
 80062d0:	4619      	mov	r1, r3
 80062d2:	f04f 0c0a 	mov.w	ip, #10
 80062d6:	4620      	mov	r0, r4
 80062d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80062dc:	3a30      	subs	r2, #48	; 0x30
 80062de:	2a09      	cmp	r2, #9
 80062e0:	d903      	bls.n	80062ea <_vfiprintf_r+0x1ee>
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d0c5      	beq.n	8006272 <_vfiprintf_r+0x176>
 80062e6:	9105      	str	r1, [sp, #20]
 80062e8:	e7c3      	b.n	8006272 <_vfiprintf_r+0x176>
 80062ea:	fb0c 2101 	mla	r1, ip, r1, r2
 80062ee:	4604      	mov	r4, r0
 80062f0:	2301      	movs	r3, #1
 80062f2:	e7f0      	b.n	80062d6 <_vfiprintf_r+0x1da>
 80062f4:	ab03      	add	r3, sp, #12
 80062f6:	9300      	str	r3, [sp, #0]
 80062f8:	462a      	mov	r2, r5
 80062fa:	4b16      	ldr	r3, [pc, #88]	; (8006354 <_vfiprintf_r+0x258>)
 80062fc:	a904      	add	r1, sp, #16
 80062fe:	4630      	mov	r0, r6
 8006300:	f3af 8000 	nop.w
 8006304:	4607      	mov	r7, r0
 8006306:	1c78      	adds	r0, r7, #1
 8006308:	d1d6      	bne.n	80062b8 <_vfiprintf_r+0x1bc>
 800630a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800630c:	07d9      	lsls	r1, r3, #31
 800630e:	d405      	bmi.n	800631c <_vfiprintf_r+0x220>
 8006310:	89ab      	ldrh	r3, [r5, #12]
 8006312:	059a      	lsls	r2, r3, #22
 8006314:	d402      	bmi.n	800631c <_vfiprintf_r+0x220>
 8006316:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006318:	f7ff fc1b 	bl	8005b52 <__retarget_lock_release_recursive>
 800631c:	89ab      	ldrh	r3, [r5, #12]
 800631e:	065b      	lsls	r3, r3, #25
 8006320:	f53f af12 	bmi.w	8006148 <_vfiprintf_r+0x4c>
 8006324:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006326:	e711      	b.n	800614c <_vfiprintf_r+0x50>
 8006328:	ab03      	add	r3, sp, #12
 800632a:	9300      	str	r3, [sp, #0]
 800632c:	462a      	mov	r2, r5
 800632e:	4b09      	ldr	r3, [pc, #36]	; (8006354 <_vfiprintf_r+0x258>)
 8006330:	a904      	add	r1, sp, #16
 8006332:	4630      	mov	r0, r6
 8006334:	f000 f880 	bl	8006438 <_printf_i>
 8006338:	e7e4      	b.n	8006304 <_vfiprintf_r+0x208>
 800633a:	bf00      	nop
 800633c:	08006d38 	.word	0x08006d38
 8006340:	08006d58 	.word	0x08006d58
 8006344:	08006d18 	.word	0x08006d18
 8006348:	08006d78 	.word	0x08006d78
 800634c:	08006d82 	.word	0x08006d82
 8006350:	00000000 	.word	0x00000000
 8006354:	080060d7 	.word	0x080060d7
 8006358:	08006d7e 	.word	0x08006d7e

0800635c <_printf_common>:
 800635c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006360:	4616      	mov	r6, r2
 8006362:	4699      	mov	r9, r3
 8006364:	688a      	ldr	r2, [r1, #8]
 8006366:	690b      	ldr	r3, [r1, #16]
 8006368:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800636c:	4293      	cmp	r3, r2
 800636e:	bfb8      	it	lt
 8006370:	4613      	movlt	r3, r2
 8006372:	6033      	str	r3, [r6, #0]
 8006374:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006378:	4607      	mov	r7, r0
 800637a:	460c      	mov	r4, r1
 800637c:	b10a      	cbz	r2, 8006382 <_printf_common+0x26>
 800637e:	3301      	adds	r3, #1
 8006380:	6033      	str	r3, [r6, #0]
 8006382:	6823      	ldr	r3, [r4, #0]
 8006384:	0699      	lsls	r1, r3, #26
 8006386:	bf42      	ittt	mi
 8006388:	6833      	ldrmi	r3, [r6, #0]
 800638a:	3302      	addmi	r3, #2
 800638c:	6033      	strmi	r3, [r6, #0]
 800638e:	6825      	ldr	r5, [r4, #0]
 8006390:	f015 0506 	ands.w	r5, r5, #6
 8006394:	d106      	bne.n	80063a4 <_printf_common+0x48>
 8006396:	f104 0a19 	add.w	sl, r4, #25
 800639a:	68e3      	ldr	r3, [r4, #12]
 800639c:	6832      	ldr	r2, [r6, #0]
 800639e:	1a9b      	subs	r3, r3, r2
 80063a0:	42ab      	cmp	r3, r5
 80063a2:	dc26      	bgt.n	80063f2 <_printf_common+0x96>
 80063a4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80063a8:	1e13      	subs	r3, r2, #0
 80063aa:	6822      	ldr	r2, [r4, #0]
 80063ac:	bf18      	it	ne
 80063ae:	2301      	movne	r3, #1
 80063b0:	0692      	lsls	r2, r2, #26
 80063b2:	d42b      	bmi.n	800640c <_printf_common+0xb0>
 80063b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80063b8:	4649      	mov	r1, r9
 80063ba:	4638      	mov	r0, r7
 80063bc:	47c0      	blx	r8
 80063be:	3001      	adds	r0, #1
 80063c0:	d01e      	beq.n	8006400 <_printf_common+0xa4>
 80063c2:	6823      	ldr	r3, [r4, #0]
 80063c4:	68e5      	ldr	r5, [r4, #12]
 80063c6:	6832      	ldr	r2, [r6, #0]
 80063c8:	f003 0306 	and.w	r3, r3, #6
 80063cc:	2b04      	cmp	r3, #4
 80063ce:	bf08      	it	eq
 80063d0:	1aad      	subeq	r5, r5, r2
 80063d2:	68a3      	ldr	r3, [r4, #8]
 80063d4:	6922      	ldr	r2, [r4, #16]
 80063d6:	bf0c      	ite	eq
 80063d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80063dc:	2500      	movne	r5, #0
 80063de:	4293      	cmp	r3, r2
 80063e0:	bfc4      	itt	gt
 80063e2:	1a9b      	subgt	r3, r3, r2
 80063e4:	18ed      	addgt	r5, r5, r3
 80063e6:	2600      	movs	r6, #0
 80063e8:	341a      	adds	r4, #26
 80063ea:	42b5      	cmp	r5, r6
 80063ec:	d11a      	bne.n	8006424 <_printf_common+0xc8>
 80063ee:	2000      	movs	r0, #0
 80063f0:	e008      	b.n	8006404 <_printf_common+0xa8>
 80063f2:	2301      	movs	r3, #1
 80063f4:	4652      	mov	r2, sl
 80063f6:	4649      	mov	r1, r9
 80063f8:	4638      	mov	r0, r7
 80063fa:	47c0      	blx	r8
 80063fc:	3001      	adds	r0, #1
 80063fe:	d103      	bne.n	8006408 <_printf_common+0xac>
 8006400:	f04f 30ff 	mov.w	r0, #4294967295
 8006404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006408:	3501      	adds	r5, #1
 800640a:	e7c6      	b.n	800639a <_printf_common+0x3e>
 800640c:	18e1      	adds	r1, r4, r3
 800640e:	1c5a      	adds	r2, r3, #1
 8006410:	2030      	movs	r0, #48	; 0x30
 8006412:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006416:	4422      	add	r2, r4
 8006418:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800641c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006420:	3302      	adds	r3, #2
 8006422:	e7c7      	b.n	80063b4 <_printf_common+0x58>
 8006424:	2301      	movs	r3, #1
 8006426:	4622      	mov	r2, r4
 8006428:	4649      	mov	r1, r9
 800642a:	4638      	mov	r0, r7
 800642c:	47c0      	blx	r8
 800642e:	3001      	adds	r0, #1
 8006430:	d0e6      	beq.n	8006400 <_printf_common+0xa4>
 8006432:	3601      	adds	r6, #1
 8006434:	e7d9      	b.n	80063ea <_printf_common+0x8e>
	...

08006438 <_printf_i>:
 8006438:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800643c:	7e0f      	ldrb	r7, [r1, #24]
 800643e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006440:	2f78      	cmp	r7, #120	; 0x78
 8006442:	4691      	mov	r9, r2
 8006444:	4680      	mov	r8, r0
 8006446:	460c      	mov	r4, r1
 8006448:	469a      	mov	sl, r3
 800644a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800644e:	d807      	bhi.n	8006460 <_printf_i+0x28>
 8006450:	2f62      	cmp	r7, #98	; 0x62
 8006452:	d80a      	bhi.n	800646a <_printf_i+0x32>
 8006454:	2f00      	cmp	r7, #0
 8006456:	f000 80d8 	beq.w	800660a <_printf_i+0x1d2>
 800645a:	2f58      	cmp	r7, #88	; 0x58
 800645c:	f000 80a3 	beq.w	80065a6 <_printf_i+0x16e>
 8006460:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006464:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006468:	e03a      	b.n	80064e0 <_printf_i+0xa8>
 800646a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800646e:	2b15      	cmp	r3, #21
 8006470:	d8f6      	bhi.n	8006460 <_printf_i+0x28>
 8006472:	a101      	add	r1, pc, #4	; (adr r1, 8006478 <_printf_i+0x40>)
 8006474:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006478:	080064d1 	.word	0x080064d1
 800647c:	080064e5 	.word	0x080064e5
 8006480:	08006461 	.word	0x08006461
 8006484:	08006461 	.word	0x08006461
 8006488:	08006461 	.word	0x08006461
 800648c:	08006461 	.word	0x08006461
 8006490:	080064e5 	.word	0x080064e5
 8006494:	08006461 	.word	0x08006461
 8006498:	08006461 	.word	0x08006461
 800649c:	08006461 	.word	0x08006461
 80064a0:	08006461 	.word	0x08006461
 80064a4:	080065f1 	.word	0x080065f1
 80064a8:	08006515 	.word	0x08006515
 80064ac:	080065d3 	.word	0x080065d3
 80064b0:	08006461 	.word	0x08006461
 80064b4:	08006461 	.word	0x08006461
 80064b8:	08006613 	.word	0x08006613
 80064bc:	08006461 	.word	0x08006461
 80064c0:	08006515 	.word	0x08006515
 80064c4:	08006461 	.word	0x08006461
 80064c8:	08006461 	.word	0x08006461
 80064cc:	080065db 	.word	0x080065db
 80064d0:	682b      	ldr	r3, [r5, #0]
 80064d2:	1d1a      	adds	r2, r3, #4
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	602a      	str	r2, [r5, #0]
 80064d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80064dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80064e0:	2301      	movs	r3, #1
 80064e2:	e0a3      	b.n	800662c <_printf_i+0x1f4>
 80064e4:	6820      	ldr	r0, [r4, #0]
 80064e6:	6829      	ldr	r1, [r5, #0]
 80064e8:	0606      	lsls	r6, r0, #24
 80064ea:	f101 0304 	add.w	r3, r1, #4
 80064ee:	d50a      	bpl.n	8006506 <_printf_i+0xce>
 80064f0:	680e      	ldr	r6, [r1, #0]
 80064f2:	602b      	str	r3, [r5, #0]
 80064f4:	2e00      	cmp	r6, #0
 80064f6:	da03      	bge.n	8006500 <_printf_i+0xc8>
 80064f8:	232d      	movs	r3, #45	; 0x2d
 80064fa:	4276      	negs	r6, r6
 80064fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006500:	485e      	ldr	r0, [pc, #376]	; (800667c <_printf_i+0x244>)
 8006502:	230a      	movs	r3, #10
 8006504:	e019      	b.n	800653a <_printf_i+0x102>
 8006506:	680e      	ldr	r6, [r1, #0]
 8006508:	602b      	str	r3, [r5, #0]
 800650a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800650e:	bf18      	it	ne
 8006510:	b236      	sxthne	r6, r6
 8006512:	e7ef      	b.n	80064f4 <_printf_i+0xbc>
 8006514:	682b      	ldr	r3, [r5, #0]
 8006516:	6820      	ldr	r0, [r4, #0]
 8006518:	1d19      	adds	r1, r3, #4
 800651a:	6029      	str	r1, [r5, #0]
 800651c:	0601      	lsls	r1, r0, #24
 800651e:	d501      	bpl.n	8006524 <_printf_i+0xec>
 8006520:	681e      	ldr	r6, [r3, #0]
 8006522:	e002      	b.n	800652a <_printf_i+0xf2>
 8006524:	0646      	lsls	r6, r0, #25
 8006526:	d5fb      	bpl.n	8006520 <_printf_i+0xe8>
 8006528:	881e      	ldrh	r6, [r3, #0]
 800652a:	4854      	ldr	r0, [pc, #336]	; (800667c <_printf_i+0x244>)
 800652c:	2f6f      	cmp	r7, #111	; 0x6f
 800652e:	bf0c      	ite	eq
 8006530:	2308      	moveq	r3, #8
 8006532:	230a      	movne	r3, #10
 8006534:	2100      	movs	r1, #0
 8006536:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800653a:	6865      	ldr	r5, [r4, #4]
 800653c:	60a5      	str	r5, [r4, #8]
 800653e:	2d00      	cmp	r5, #0
 8006540:	bfa2      	ittt	ge
 8006542:	6821      	ldrge	r1, [r4, #0]
 8006544:	f021 0104 	bicge.w	r1, r1, #4
 8006548:	6021      	strge	r1, [r4, #0]
 800654a:	b90e      	cbnz	r6, 8006550 <_printf_i+0x118>
 800654c:	2d00      	cmp	r5, #0
 800654e:	d04d      	beq.n	80065ec <_printf_i+0x1b4>
 8006550:	4615      	mov	r5, r2
 8006552:	fbb6 f1f3 	udiv	r1, r6, r3
 8006556:	fb03 6711 	mls	r7, r3, r1, r6
 800655a:	5dc7      	ldrb	r7, [r0, r7]
 800655c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006560:	4637      	mov	r7, r6
 8006562:	42bb      	cmp	r3, r7
 8006564:	460e      	mov	r6, r1
 8006566:	d9f4      	bls.n	8006552 <_printf_i+0x11a>
 8006568:	2b08      	cmp	r3, #8
 800656a:	d10b      	bne.n	8006584 <_printf_i+0x14c>
 800656c:	6823      	ldr	r3, [r4, #0]
 800656e:	07de      	lsls	r6, r3, #31
 8006570:	d508      	bpl.n	8006584 <_printf_i+0x14c>
 8006572:	6923      	ldr	r3, [r4, #16]
 8006574:	6861      	ldr	r1, [r4, #4]
 8006576:	4299      	cmp	r1, r3
 8006578:	bfde      	ittt	le
 800657a:	2330      	movle	r3, #48	; 0x30
 800657c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006580:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006584:	1b52      	subs	r2, r2, r5
 8006586:	6122      	str	r2, [r4, #16]
 8006588:	f8cd a000 	str.w	sl, [sp]
 800658c:	464b      	mov	r3, r9
 800658e:	aa03      	add	r2, sp, #12
 8006590:	4621      	mov	r1, r4
 8006592:	4640      	mov	r0, r8
 8006594:	f7ff fee2 	bl	800635c <_printf_common>
 8006598:	3001      	adds	r0, #1
 800659a:	d14c      	bne.n	8006636 <_printf_i+0x1fe>
 800659c:	f04f 30ff 	mov.w	r0, #4294967295
 80065a0:	b004      	add	sp, #16
 80065a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065a6:	4835      	ldr	r0, [pc, #212]	; (800667c <_printf_i+0x244>)
 80065a8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80065ac:	6829      	ldr	r1, [r5, #0]
 80065ae:	6823      	ldr	r3, [r4, #0]
 80065b0:	f851 6b04 	ldr.w	r6, [r1], #4
 80065b4:	6029      	str	r1, [r5, #0]
 80065b6:	061d      	lsls	r5, r3, #24
 80065b8:	d514      	bpl.n	80065e4 <_printf_i+0x1ac>
 80065ba:	07df      	lsls	r7, r3, #31
 80065bc:	bf44      	itt	mi
 80065be:	f043 0320 	orrmi.w	r3, r3, #32
 80065c2:	6023      	strmi	r3, [r4, #0]
 80065c4:	b91e      	cbnz	r6, 80065ce <_printf_i+0x196>
 80065c6:	6823      	ldr	r3, [r4, #0]
 80065c8:	f023 0320 	bic.w	r3, r3, #32
 80065cc:	6023      	str	r3, [r4, #0]
 80065ce:	2310      	movs	r3, #16
 80065d0:	e7b0      	b.n	8006534 <_printf_i+0xfc>
 80065d2:	6823      	ldr	r3, [r4, #0]
 80065d4:	f043 0320 	orr.w	r3, r3, #32
 80065d8:	6023      	str	r3, [r4, #0]
 80065da:	2378      	movs	r3, #120	; 0x78
 80065dc:	4828      	ldr	r0, [pc, #160]	; (8006680 <_printf_i+0x248>)
 80065de:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80065e2:	e7e3      	b.n	80065ac <_printf_i+0x174>
 80065e4:	0659      	lsls	r1, r3, #25
 80065e6:	bf48      	it	mi
 80065e8:	b2b6      	uxthmi	r6, r6
 80065ea:	e7e6      	b.n	80065ba <_printf_i+0x182>
 80065ec:	4615      	mov	r5, r2
 80065ee:	e7bb      	b.n	8006568 <_printf_i+0x130>
 80065f0:	682b      	ldr	r3, [r5, #0]
 80065f2:	6826      	ldr	r6, [r4, #0]
 80065f4:	6961      	ldr	r1, [r4, #20]
 80065f6:	1d18      	adds	r0, r3, #4
 80065f8:	6028      	str	r0, [r5, #0]
 80065fa:	0635      	lsls	r5, r6, #24
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	d501      	bpl.n	8006604 <_printf_i+0x1cc>
 8006600:	6019      	str	r1, [r3, #0]
 8006602:	e002      	b.n	800660a <_printf_i+0x1d2>
 8006604:	0670      	lsls	r0, r6, #25
 8006606:	d5fb      	bpl.n	8006600 <_printf_i+0x1c8>
 8006608:	8019      	strh	r1, [r3, #0]
 800660a:	2300      	movs	r3, #0
 800660c:	6123      	str	r3, [r4, #16]
 800660e:	4615      	mov	r5, r2
 8006610:	e7ba      	b.n	8006588 <_printf_i+0x150>
 8006612:	682b      	ldr	r3, [r5, #0]
 8006614:	1d1a      	adds	r2, r3, #4
 8006616:	602a      	str	r2, [r5, #0]
 8006618:	681d      	ldr	r5, [r3, #0]
 800661a:	6862      	ldr	r2, [r4, #4]
 800661c:	2100      	movs	r1, #0
 800661e:	4628      	mov	r0, r5
 8006620:	f7f9 fdde 	bl	80001e0 <memchr>
 8006624:	b108      	cbz	r0, 800662a <_printf_i+0x1f2>
 8006626:	1b40      	subs	r0, r0, r5
 8006628:	6060      	str	r0, [r4, #4]
 800662a:	6863      	ldr	r3, [r4, #4]
 800662c:	6123      	str	r3, [r4, #16]
 800662e:	2300      	movs	r3, #0
 8006630:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006634:	e7a8      	b.n	8006588 <_printf_i+0x150>
 8006636:	6923      	ldr	r3, [r4, #16]
 8006638:	462a      	mov	r2, r5
 800663a:	4649      	mov	r1, r9
 800663c:	4640      	mov	r0, r8
 800663e:	47d0      	blx	sl
 8006640:	3001      	adds	r0, #1
 8006642:	d0ab      	beq.n	800659c <_printf_i+0x164>
 8006644:	6823      	ldr	r3, [r4, #0]
 8006646:	079b      	lsls	r3, r3, #30
 8006648:	d413      	bmi.n	8006672 <_printf_i+0x23a>
 800664a:	68e0      	ldr	r0, [r4, #12]
 800664c:	9b03      	ldr	r3, [sp, #12]
 800664e:	4298      	cmp	r0, r3
 8006650:	bfb8      	it	lt
 8006652:	4618      	movlt	r0, r3
 8006654:	e7a4      	b.n	80065a0 <_printf_i+0x168>
 8006656:	2301      	movs	r3, #1
 8006658:	4632      	mov	r2, r6
 800665a:	4649      	mov	r1, r9
 800665c:	4640      	mov	r0, r8
 800665e:	47d0      	blx	sl
 8006660:	3001      	adds	r0, #1
 8006662:	d09b      	beq.n	800659c <_printf_i+0x164>
 8006664:	3501      	adds	r5, #1
 8006666:	68e3      	ldr	r3, [r4, #12]
 8006668:	9903      	ldr	r1, [sp, #12]
 800666a:	1a5b      	subs	r3, r3, r1
 800666c:	42ab      	cmp	r3, r5
 800666e:	dcf2      	bgt.n	8006656 <_printf_i+0x21e>
 8006670:	e7eb      	b.n	800664a <_printf_i+0x212>
 8006672:	2500      	movs	r5, #0
 8006674:	f104 0619 	add.w	r6, r4, #25
 8006678:	e7f5      	b.n	8006666 <_printf_i+0x22e>
 800667a:	bf00      	nop
 800667c:	08006d89 	.word	0x08006d89
 8006680:	08006d9a 	.word	0x08006d9a

08006684 <_putc_r>:
 8006684:	b570      	push	{r4, r5, r6, lr}
 8006686:	460d      	mov	r5, r1
 8006688:	4614      	mov	r4, r2
 800668a:	4606      	mov	r6, r0
 800668c:	b118      	cbz	r0, 8006696 <_putc_r+0x12>
 800668e:	6983      	ldr	r3, [r0, #24]
 8006690:	b90b      	cbnz	r3, 8006696 <_putc_r+0x12>
 8006692:	f7ff f9bf 	bl	8005a14 <__sinit>
 8006696:	4b1c      	ldr	r3, [pc, #112]	; (8006708 <_putc_r+0x84>)
 8006698:	429c      	cmp	r4, r3
 800669a:	d124      	bne.n	80066e6 <_putc_r+0x62>
 800669c:	6874      	ldr	r4, [r6, #4]
 800669e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80066a0:	07d8      	lsls	r0, r3, #31
 80066a2:	d405      	bmi.n	80066b0 <_putc_r+0x2c>
 80066a4:	89a3      	ldrh	r3, [r4, #12]
 80066a6:	0599      	lsls	r1, r3, #22
 80066a8:	d402      	bmi.n	80066b0 <_putc_r+0x2c>
 80066aa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80066ac:	f7ff fa50 	bl	8005b50 <__retarget_lock_acquire_recursive>
 80066b0:	68a3      	ldr	r3, [r4, #8]
 80066b2:	3b01      	subs	r3, #1
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	60a3      	str	r3, [r4, #8]
 80066b8:	da05      	bge.n	80066c6 <_putc_r+0x42>
 80066ba:	69a2      	ldr	r2, [r4, #24]
 80066bc:	4293      	cmp	r3, r2
 80066be:	db1c      	blt.n	80066fa <_putc_r+0x76>
 80066c0:	b2eb      	uxtb	r3, r5
 80066c2:	2b0a      	cmp	r3, #10
 80066c4:	d019      	beq.n	80066fa <_putc_r+0x76>
 80066c6:	6823      	ldr	r3, [r4, #0]
 80066c8:	1c5a      	adds	r2, r3, #1
 80066ca:	6022      	str	r2, [r4, #0]
 80066cc:	701d      	strb	r5, [r3, #0]
 80066ce:	b2ed      	uxtb	r5, r5
 80066d0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80066d2:	07da      	lsls	r2, r3, #31
 80066d4:	d405      	bmi.n	80066e2 <_putc_r+0x5e>
 80066d6:	89a3      	ldrh	r3, [r4, #12]
 80066d8:	059b      	lsls	r3, r3, #22
 80066da:	d402      	bmi.n	80066e2 <_putc_r+0x5e>
 80066dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80066de:	f7ff fa38 	bl	8005b52 <__retarget_lock_release_recursive>
 80066e2:	4628      	mov	r0, r5
 80066e4:	bd70      	pop	{r4, r5, r6, pc}
 80066e6:	4b09      	ldr	r3, [pc, #36]	; (800670c <_putc_r+0x88>)
 80066e8:	429c      	cmp	r4, r3
 80066ea:	d101      	bne.n	80066f0 <_putc_r+0x6c>
 80066ec:	68b4      	ldr	r4, [r6, #8]
 80066ee:	e7d6      	b.n	800669e <_putc_r+0x1a>
 80066f0:	4b07      	ldr	r3, [pc, #28]	; (8006710 <_putc_r+0x8c>)
 80066f2:	429c      	cmp	r4, r3
 80066f4:	bf08      	it	eq
 80066f6:	68f4      	ldreq	r4, [r6, #12]
 80066f8:	e7d1      	b.n	800669e <_putc_r+0x1a>
 80066fa:	4629      	mov	r1, r5
 80066fc:	4622      	mov	r2, r4
 80066fe:	4630      	mov	r0, r6
 8006700:	f7fe ffae 	bl	8005660 <__swbuf_r>
 8006704:	4605      	mov	r5, r0
 8006706:	e7e3      	b.n	80066d0 <_putc_r+0x4c>
 8006708:	08006d38 	.word	0x08006d38
 800670c:	08006d58 	.word	0x08006d58
 8006710:	08006d18 	.word	0x08006d18

08006714 <_sbrk_r>:
 8006714:	b538      	push	{r3, r4, r5, lr}
 8006716:	4d06      	ldr	r5, [pc, #24]	; (8006730 <_sbrk_r+0x1c>)
 8006718:	2300      	movs	r3, #0
 800671a:	4604      	mov	r4, r0
 800671c:	4608      	mov	r0, r1
 800671e:	602b      	str	r3, [r5, #0]
 8006720:	f7fb fc86 	bl	8002030 <_sbrk>
 8006724:	1c43      	adds	r3, r0, #1
 8006726:	d102      	bne.n	800672e <_sbrk_r+0x1a>
 8006728:	682b      	ldr	r3, [r5, #0]
 800672a:	b103      	cbz	r3, 800672e <_sbrk_r+0x1a>
 800672c:	6023      	str	r3, [r4, #0]
 800672e:	bd38      	pop	{r3, r4, r5, pc}
 8006730:	20000270 	.word	0x20000270

08006734 <__sread>:
 8006734:	b510      	push	{r4, lr}
 8006736:	460c      	mov	r4, r1
 8006738:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800673c:	f000 f8ea 	bl	8006914 <_read_r>
 8006740:	2800      	cmp	r0, #0
 8006742:	bfab      	itete	ge
 8006744:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006746:	89a3      	ldrhlt	r3, [r4, #12]
 8006748:	181b      	addge	r3, r3, r0
 800674a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800674e:	bfac      	ite	ge
 8006750:	6563      	strge	r3, [r4, #84]	; 0x54
 8006752:	81a3      	strhlt	r3, [r4, #12]
 8006754:	bd10      	pop	{r4, pc}

08006756 <__swrite>:
 8006756:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800675a:	461f      	mov	r7, r3
 800675c:	898b      	ldrh	r3, [r1, #12]
 800675e:	05db      	lsls	r3, r3, #23
 8006760:	4605      	mov	r5, r0
 8006762:	460c      	mov	r4, r1
 8006764:	4616      	mov	r6, r2
 8006766:	d505      	bpl.n	8006774 <__swrite+0x1e>
 8006768:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800676c:	2302      	movs	r3, #2
 800676e:	2200      	movs	r2, #0
 8006770:	f000 f868 	bl	8006844 <_lseek_r>
 8006774:	89a3      	ldrh	r3, [r4, #12]
 8006776:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800677a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800677e:	81a3      	strh	r3, [r4, #12]
 8006780:	4632      	mov	r2, r6
 8006782:	463b      	mov	r3, r7
 8006784:	4628      	mov	r0, r5
 8006786:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800678a:	f000 b817 	b.w	80067bc <_write_r>

0800678e <__sseek>:
 800678e:	b510      	push	{r4, lr}
 8006790:	460c      	mov	r4, r1
 8006792:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006796:	f000 f855 	bl	8006844 <_lseek_r>
 800679a:	1c43      	adds	r3, r0, #1
 800679c:	89a3      	ldrh	r3, [r4, #12]
 800679e:	bf15      	itete	ne
 80067a0:	6560      	strne	r0, [r4, #84]	; 0x54
 80067a2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80067a6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80067aa:	81a3      	strheq	r3, [r4, #12]
 80067ac:	bf18      	it	ne
 80067ae:	81a3      	strhne	r3, [r4, #12]
 80067b0:	bd10      	pop	{r4, pc}

080067b2 <__sclose>:
 80067b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067b6:	f000 b813 	b.w	80067e0 <_close_r>
	...

080067bc <_write_r>:
 80067bc:	b538      	push	{r3, r4, r5, lr}
 80067be:	4d07      	ldr	r5, [pc, #28]	; (80067dc <_write_r+0x20>)
 80067c0:	4604      	mov	r4, r0
 80067c2:	4608      	mov	r0, r1
 80067c4:	4611      	mov	r1, r2
 80067c6:	2200      	movs	r2, #0
 80067c8:	602a      	str	r2, [r5, #0]
 80067ca:	461a      	mov	r2, r3
 80067cc:	f7fb fa26 	bl	8001c1c <_write>
 80067d0:	1c43      	adds	r3, r0, #1
 80067d2:	d102      	bne.n	80067da <_write_r+0x1e>
 80067d4:	682b      	ldr	r3, [r5, #0]
 80067d6:	b103      	cbz	r3, 80067da <_write_r+0x1e>
 80067d8:	6023      	str	r3, [r4, #0]
 80067da:	bd38      	pop	{r3, r4, r5, pc}
 80067dc:	20000270 	.word	0x20000270

080067e0 <_close_r>:
 80067e0:	b538      	push	{r3, r4, r5, lr}
 80067e2:	4d06      	ldr	r5, [pc, #24]	; (80067fc <_close_r+0x1c>)
 80067e4:	2300      	movs	r3, #0
 80067e6:	4604      	mov	r4, r0
 80067e8:	4608      	mov	r0, r1
 80067ea:	602b      	str	r3, [r5, #0]
 80067ec:	f7fb fa42 	bl	8001c74 <_close>
 80067f0:	1c43      	adds	r3, r0, #1
 80067f2:	d102      	bne.n	80067fa <_close_r+0x1a>
 80067f4:	682b      	ldr	r3, [r5, #0]
 80067f6:	b103      	cbz	r3, 80067fa <_close_r+0x1a>
 80067f8:	6023      	str	r3, [r4, #0]
 80067fa:	bd38      	pop	{r3, r4, r5, pc}
 80067fc:	20000270 	.word	0x20000270

08006800 <_fstat_r>:
 8006800:	b538      	push	{r3, r4, r5, lr}
 8006802:	4d07      	ldr	r5, [pc, #28]	; (8006820 <_fstat_r+0x20>)
 8006804:	2300      	movs	r3, #0
 8006806:	4604      	mov	r4, r0
 8006808:	4608      	mov	r0, r1
 800680a:	4611      	mov	r1, r2
 800680c:	602b      	str	r3, [r5, #0]
 800680e:	f7fb fa81 	bl	8001d14 <_fstat>
 8006812:	1c43      	adds	r3, r0, #1
 8006814:	d102      	bne.n	800681c <_fstat_r+0x1c>
 8006816:	682b      	ldr	r3, [r5, #0]
 8006818:	b103      	cbz	r3, 800681c <_fstat_r+0x1c>
 800681a:	6023      	str	r3, [r4, #0]
 800681c:	bd38      	pop	{r3, r4, r5, pc}
 800681e:	bf00      	nop
 8006820:	20000270 	.word	0x20000270

08006824 <_isatty_r>:
 8006824:	b538      	push	{r3, r4, r5, lr}
 8006826:	4d06      	ldr	r5, [pc, #24]	; (8006840 <_isatty_r+0x1c>)
 8006828:	2300      	movs	r3, #0
 800682a:	4604      	mov	r4, r0
 800682c:	4608      	mov	r0, r1
 800682e:	602b      	str	r3, [r5, #0]
 8006830:	f7fb f9de 	bl	8001bf0 <_isatty>
 8006834:	1c43      	adds	r3, r0, #1
 8006836:	d102      	bne.n	800683e <_isatty_r+0x1a>
 8006838:	682b      	ldr	r3, [r5, #0]
 800683a:	b103      	cbz	r3, 800683e <_isatty_r+0x1a>
 800683c:	6023      	str	r3, [r4, #0]
 800683e:	bd38      	pop	{r3, r4, r5, pc}
 8006840:	20000270 	.word	0x20000270

08006844 <_lseek_r>:
 8006844:	b538      	push	{r3, r4, r5, lr}
 8006846:	4d07      	ldr	r5, [pc, #28]	; (8006864 <_lseek_r+0x20>)
 8006848:	4604      	mov	r4, r0
 800684a:	4608      	mov	r0, r1
 800684c:	4611      	mov	r1, r2
 800684e:	2200      	movs	r2, #0
 8006850:	602a      	str	r2, [r5, #0]
 8006852:	461a      	mov	r2, r3
 8006854:	f7fb fa25 	bl	8001ca2 <_lseek>
 8006858:	1c43      	adds	r3, r0, #1
 800685a:	d102      	bne.n	8006862 <_lseek_r+0x1e>
 800685c:	682b      	ldr	r3, [r5, #0]
 800685e:	b103      	cbz	r3, 8006862 <_lseek_r+0x1e>
 8006860:	6023      	str	r3, [r4, #0]
 8006862:	bd38      	pop	{r3, r4, r5, pc}
 8006864:	20000270 	.word	0x20000270

08006868 <memmove>:
 8006868:	4288      	cmp	r0, r1
 800686a:	b510      	push	{r4, lr}
 800686c:	eb01 0402 	add.w	r4, r1, r2
 8006870:	d902      	bls.n	8006878 <memmove+0x10>
 8006872:	4284      	cmp	r4, r0
 8006874:	4623      	mov	r3, r4
 8006876:	d807      	bhi.n	8006888 <memmove+0x20>
 8006878:	1e43      	subs	r3, r0, #1
 800687a:	42a1      	cmp	r1, r4
 800687c:	d008      	beq.n	8006890 <memmove+0x28>
 800687e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006882:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006886:	e7f8      	b.n	800687a <memmove+0x12>
 8006888:	4402      	add	r2, r0
 800688a:	4601      	mov	r1, r0
 800688c:	428a      	cmp	r2, r1
 800688e:	d100      	bne.n	8006892 <memmove+0x2a>
 8006890:	bd10      	pop	{r4, pc}
 8006892:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006896:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800689a:	e7f7      	b.n	800688c <memmove+0x24>

0800689c <__malloc_lock>:
 800689c:	4801      	ldr	r0, [pc, #4]	; (80068a4 <__malloc_lock+0x8>)
 800689e:	f7ff b957 	b.w	8005b50 <__retarget_lock_acquire_recursive>
 80068a2:	bf00      	nop
 80068a4:	20000264 	.word	0x20000264

080068a8 <__malloc_unlock>:
 80068a8:	4801      	ldr	r0, [pc, #4]	; (80068b0 <__malloc_unlock+0x8>)
 80068aa:	f7ff b952 	b.w	8005b52 <__retarget_lock_release_recursive>
 80068ae:	bf00      	nop
 80068b0:	20000264 	.word	0x20000264

080068b4 <_realloc_r>:
 80068b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068b8:	4680      	mov	r8, r0
 80068ba:	4614      	mov	r4, r2
 80068bc:	460e      	mov	r6, r1
 80068be:	b921      	cbnz	r1, 80068ca <_realloc_r+0x16>
 80068c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80068c4:	4611      	mov	r1, r2
 80068c6:	f7ff ba1f 	b.w	8005d08 <_malloc_r>
 80068ca:	b92a      	cbnz	r2, 80068d8 <_realloc_r+0x24>
 80068cc:	f7ff f9b0 	bl	8005c30 <_free_r>
 80068d0:	4625      	mov	r5, r4
 80068d2:	4628      	mov	r0, r5
 80068d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80068d8:	f000 f82e 	bl	8006938 <_malloc_usable_size_r>
 80068dc:	4284      	cmp	r4, r0
 80068de:	4607      	mov	r7, r0
 80068e0:	d802      	bhi.n	80068e8 <_realloc_r+0x34>
 80068e2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80068e6:	d812      	bhi.n	800690e <_realloc_r+0x5a>
 80068e8:	4621      	mov	r1, r4
 80068ea:	4640      	mov	r0, r8
 80068ec:	f7ff fa0c 	bl	8005d08 <_malloc_r>
 80068f0:	4605      	mov	r5, r0
 80068f2:	2800      	cmp	r0, #0
 80068f4:	d0ed      	beq.n	80068d2 <_realloc_r+0x1e>
 80068f6:	42bc      	cmp	r4, r7
 80068f8:	4622      	mov	r2, r4
 80068fa:	4631      	mov	r1, r6
 80068fc:	bf28      	it	cs
 80068fe:	463a      	movcs	r2, r7
 8006900:	f7fe fc82 	bl	8005208 <memcpy>
 8006904:	4631      	mov	r1, r6
 8006906:	4640      	mov	r0, r8
 8006908:	f7ff f992 	bl	8005c30 <_free_r>
 800690c:	e7e1      	b.n	80068d2 <_realloc_r+0x1e>
 800690e:	4635      	mov	r5, r6
 8006910:	e7df      	b.n	80068d2 <_realloc_r+0x1e>
	...

08006914 <_read_r>:
 8006914:	b538      	push	{r3, r4, r5, lr}
 8006916:	4d07      	ldr	r5, [pc, #28]	; (8006934 <_read_r+0x20>)
 8006918:	4604      	mov	r4, r0
 800691a:	4608      	mov	r0, r1
 800691c:	4611      	mov	r1, r2
 800691e:	2200      	movs	r2, #0
 8006920:	602a      	str	r2, [r5, #0]
 8006922:	461a      	mov	r2, r3
 8006924:	f7fb f9ce 	bl	8001cc4 <_read>
 8006928:	1c43      	adds	r3, r0, #1
 800692a:	d102      	bne.n	8006932 <_read_r+0x1e>
 800692c:	682b      	ldr	r3, [r5, #0]
 800692e:	b103      	cbz	r3, 8006932 <_read_r+0x1e>
 8006930:	6023      	str	r3, [r4, #0]
 8006932:	bd38      	pop	{r3, r4, r5, pc}
 8006934:	20000270 	.word	0x20000270

08006938 <_malloc_usable_size_r>:
 8006938:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800693c:	1f18      	subs	r0, r3, #4
 800693e:	2b00      	cmp	r3, #0
 8006940:	bfbc      	itt	lt
 8006942:	580b      	ldrlt	r3, [r1, r0]
 8006944:	18c0      	addlt	r0, r0, r3
 8006946:	4770      	bx	lr

08006948 <_init>:
 8006948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800694a:	bf00      	nop
 800694c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800694e:	bc08      	pop	{r3}
 8006950:	469e      	mov	lr, r3
 8006952:	4770      	bx	lr

08006954 <_fini>:
 8006954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006956:	bf00      	nop
 8006958:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800695a:	bc08      	pop	{r3}
 800695c:	469e      	mov	lr, r3
 800695e:	4770      	bx	lr
